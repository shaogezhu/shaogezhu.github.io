{
    "version": "https://jsonfeed.org/version/1",
    "title": "田埂の技术分享",
    "subtitle": "和你一起遇见更好的自己",
    "icon": "https://shaogezhu.cn/images/favicon.ico",
    "description": "仍在奔赴远方路上的少年",
    "home_page_url": "https://shaogezhu.cn",
    "items": [
        {
            "id": "https://shaogezhu.cn/2022/11/47e96ce86a0a/",
            "url": "https://shaogezhu.cn/2022/11/47e96ce86a0a/",
            "title": "初探RPC框架设计",
            "date_published": "2022-11-17T18:43:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>🌴🌴经常听到大家说不同项目之间调用使用 HTTP 方式，同一个项目内不同服务之间调用使用 RPC 方式。今天就来学习一下 <code>RPC框架</code> ，RPC 框架由哪些部分组成又是如何一步一步设计出来的。</p>\n</div>\n<br/>\n<h2 id=\"了解rpc框架\"><a class=\"anchor\" href=\"#了解rpc框架\">#</a> 了解 RPC 框架</h2>\n<p>既然要设计 RPC 框架，就需要先知道<strong>什么是 RPC</strong> ？</p>\n<p>RPC（Remote Procedure Call Protocol）全称<strong>远程过程调用</strong> ，像调用本地服务 (方法) 一样调用服务器的服务 (方法)。</p>\n<br/>\n<p><strong>RPC 又是如何进行调用的呢？</strong></p>\n<p>很早的时候，国外的工程师设计了一种能够通过 A 计算机调用 B 计算机上边应用程序的技术，这种技术不需要开发人员对于网络通讯了解过多，并且<strong>调用其他机器上边程序的时候和调用本地的程序一样方便好用</strong>。A 机器发起请求去调用 B 机器程序的时候会被挂起，B 机器接收到 A 机器发起的请求参数之后会做一定的参数转换，最后将对应的程序结果返回给 A，这个就是最原始的 RPC 服务调用了。</p>\n<br/>\n<p>通常的 RPC 架构可分为了以下几个核心组件：</p>\n<ul>\n<li>Client</li>\n<li>Client Stub</li>\n<li>Server</li>\n<li>Server Stub</li>\n</ul>\n<p>Client 和 Server 两个名词的概念一般都比较好理解，前一个是客户端（请求发起方），后一个是服务端（服务提供方）。下面来说一下 Server Stub 和 Client Stub 是做什么的。</p>\n<p><strong>Client Stub：</strong> 就是将客户端请求的参数、服务名称、服务地址进行打包，统一发送给 server 方。</p>\n<p><strong>Server Stub：</strong> 简单来说就是，服务端接收到 Client 发送的数据之后进行消息解包，调用本地方法。</p>\n<p>具体的调用流程和关系如下图所示：</p>\n<p><img data-src=\"/assets/2022-11/rpc1.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"rpc框架整体分析和设计\"><a class=\"anchor\" href=\"#rpc框架整体分析和设计\">#</a> RPC 框架整体分析和设计</h2>\n<p>上面我们已经知道了 RPC 框架的一些基本概念，接下来对我们的 RPC 框架进行进一步的分析和设计。</p>\n<h3 id=\"rpc框架调用流程\"><a class=\"anchor\" href=\"#rpc框架调用流程\">#</a> RPC 框架调用流程</h3>\n<p>本地客户端<strong>以本地调用方式</strong>调用服务，首先需要通知到本地的存根 <code>（Client Stub）</code> ，接着本地存根会进行一些数据格式的包装，网络请求的封装等，最终组装成能够进行网络传输的消息体，按照一定的规则将这个消息体通过 <code>Socket</code>  发送到指定的目标机器上。</p>\n<p>服务端的存根 <code>（Server Stub）</code> 在接收到相关的数据信息之后，需要将其按照事先约定好的规则进行解码，从而识别到消息体内部的信息，然后将对应的请求<strong>转发到本地服务对应的函数</strong>中进行处理。处理完的数据需要再通过 <code>Socket</code>  返回给调用方。</p>\n<p>调用方存根在接收到服务方数据的时候，需要进行数据解码，最后得到这次请求的最终结果。</p>\n<p>调用的流程如下图所示：</p>\n<p><img data-src=\"/assets/2022-11/rpc2.png\" alt=\"image.png\" /></p>\n<p>这幅图只是一个最简单的调用流程，接下来我们尝试在这张调用图的基础上 不断地进行功能扩展，从而最终设计出一个比较完善的 RPC 框架。</p>\n<br/>\n<h3 id=\"代理层设计\"><a class=\"anchor\" href=\"#代理层设计\">#</a> 代理层设计</h3>\n<p>RPC 最大的特点就是<strong>像调用本地服务 (方法) 一样调用服务器的服务 (方法)</strong>，实现这一点就需要我们在远程调用的时候，将其中内部的细节进行封装屏蔽，让调用者感知不到远程调用的逻辑。</p>\n<p>看了上面的描述会不会联想到 <code>代理模式</code> ？ 由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这个时候，访问对象 <code>（Client）</code> 不适合或者不能直接引用目标对象 <code>（Service）</code> ，<strong>代理对象作为访问对象和目标对象之间的中介</strong>。</p>\n<br/>\n<p>代理模式的主要优点有：</p>\n<ul>\n<li>代理模式能将代理对象与真实被调用的目标对象分离；</li>\n<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>\n<li>代理模式一定程度上降低了系统的耦合度，增加了程序的可扩展性。</li>\n</ul>\n<p>所以面对客户端的请求，我们可以增加一个<strong>代理层</strong>，统一将内部的细节都屏蔽起来，让调用者使用起来无感知。这个时候我们可以用下图表示这个请求调用的流程：</p>\n<p><img data-src=\"/assets/2022-11/rpc3.png\" alt=\"image.png\" /></p>\n<br/>\n<h3 id=\"路由层的设计\"><a class=\"anchor\" href=\"#路由层的设计\">#</a> 路由层的设计</h3>\n<p>当服务提供者有多个的时候，我们就会面临以下问题：<strong>当目标服务众多的时候，客户端需要如何确定最终请求的服务提供者是谁呢？</strong></p>\n<p>这里就需要引入一个叫做 <code>路由的角色</code> ，负责遴选出符合条件的服务提供者，此时客户端的调用整体流程大致如下：</p>\n<p><img data-src=\"/assets/2022-11/rpc4.png\" alt=\"image.png\" /></p>\n<p>客户端的请求会经过一个叫做路由层的部分，通过路由层内部的规则去选择对应的 <code>Server</code>  服务。</p>\n<br/>\n<h3 id=\"协议层的设计\"><a class=\"anchor\" href=\"#协议层的设计\">#</a> 协议层的设计</h3>\n<p>客户端在使用 RPC 框架进行远程调用的时候，<strong>还需要对数据信息进行统一的包装和组织</strong>，最后才能将其发送到目标机器并且被目标机器接收解析，因此对于数据的各种序列化、反序列化，协议的组装我们统一可以封装在协议层中进行实现，此时客户端的调用整体流程如下图所示：</p>\n<p><img data-src=\"/assets/2022-11/rpc5.png\" alt=\"image.png\" /></p>\n<p><code>router层</code> 会负责计算好最终需要调用的服务提供者具体信息，然后将对应的地址信息、请求参数传输给到 protocol 层，最终由 <code>protocol层</code> 对数据封装为对应的协议体，然后进行序列化处理，最终通过网络发送给到目标机器。</p>\n<br/>\n<h3 id=\"可插拔式组件设计\"><a class=\"anchor\" href=\"#可插拔式组件设计\">#</a> 可插拔式组件设计</h3>\n<p>从客户端本地请求，到 <code>protocol层</code> 发送数据，整个链路中可能<strong>还需要考虑后续的一些二次扩展设计</strong>。例如某些自定义条件的过滤，服务分组等等，所以在设计的时候可以考虑在代理层（proxy）和路由层（router）之间加入一些链路模块。这类设计有点类似于 <code>责任链模式</code> ，整体的设计结构大致如下：</p>\n<p><img data-src=\"/assets/2022-11/rpc6.png\" alt=\"image.png\" /></p>\n<p>可插拔式的组件主要是为了以后方便进行二次扩展。</p>\n<br/>\n<h3 id=\"注册中心层的设计\"><a class=\"anchor\" href=\"#注册中心层的设计\">#</a> 注册中心层的设计</h3>\n<p>当服务提供者呈现集群的时候，客户端需要<strong>去动态获取服务提供者的诸多信息</strong>，那么在这个过程中就需要引入一个叫做注册中心的角色。</p>\n<p>服务提供者将自己的地址、接口等详细信息都上报到注册中心模块，并且当服务上线、下线都会通知到注册中心。然后服务调用方只需要订阅注册中心即可。</p>\n<p>所以对于注册中心层我们也可以统一抽取一个层面出来，现在我们再来调整下整体的设计结构图：</p>\n<p><img data-src=\"/assets/2022-11/rpc7.png\" alt=\"image.png\" /></p>\n<p>市面上有很多注册中心技术，常见的组件有 <code>ZooKeeper</code> ， <code>Nacos</code> ， <code>Redis</code>  等等。</p>\n<br/>\n<h3 id=\"容错层的设计\"><a class=\"anchor\" href=\"#容错层的设计\">#</a> 容错层的设计</h3>\n<p>在进行远程调用的过程中，<strong>难免会出现一些异常的情况</strong>。市面上常见的 RPC 框架在处理调用异常的时候通常都会提供一些容错方面的处理手段，常见手段如下：</p>\n<ul>\n<li><strong>超时重试</strong>：当调用某个 provider 失败的时候，会重试其他 provider，可以设置重试次数；</li>\n<li><strong>快速失败</strong>：当调用某个 provider 失败的时候，不会重试其他 provider，快速返回异常结果；</li>\n<li><strong>无限重试</strong>：请求失败后会自动会自动记录在失败队列中，并由一个定时线程重试；</li>\n<li><strong>异常回调</strong>：出现异常后，回调指定方法；</li>\n<li><strong>无视失败</strong>：出现异常后，不做任何处理。</li>\n<li>……</li>\n</ul>\n<p>面对这种异常的场景，我们可以尝试将这些处理手段统一抽象出来，交给 <code>容错层</code> 去处理，所以此时我们需要再对这款 RPC 框架进行修改：</p>\n<p><img data-src=\"/assets/2022-11/rpc8.png\" alt=\"image.png\" /></p>\n<br/>\n<h3 id=\"服务提供者的线程池设计\"><a class=\"anchor\" href=\"#服务提供者的线程池设计\">#</a> 服务提供者的线程池设计</h3>\n<p>当请求发送到了服务提供者的时候，服务提供方需要对其进行相应的解码，然后<strong>在本地进行核心处理</strong>。我们如果想提升服务器的并发访问，这部分的工作需要交给专门的线程去计算处理。此时我们再对 RPC 框架的调用图进行修改，大致如下：</p>\n<p><img data-src=\"/assets/2022-11/rpc9.png\" alt=\"image.png\" /></p>\n<p>好了到这里，RPC 框架已经设计的差不多了，这个就是我们最终设计的 RPC 框架。通过上面的了解对日后更深入学习 RPC 框架会有很大的帮助。</p>\n<br/>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>最后我们再做一下总结，在上面一步一步设计完 RPC 的框架之后，我们的 RPC 框架的整体结构基本分层为：</p>\n<ul>\n<li>\n<p><strong>代理层</strong>：负责对底层调用细节的封装；</p>\n</li>\n<li>\n<p><strong>链路层</strong>：负责执行一些自定义的过滤链路，可以供后期二次扩展；</p>\n</li>\n<li>\n<p><strong>路由层</strong>：负责在集群目标服务中的调用筛选策略；</p>\n</li>\n<li>\n<p><strong>协议层</strong>：负责请求数据的转码封装等作用；</p>\n</li>\n<li>\n<p><strong>注册中心</strong>：关注服务的上下线，以及一些权重，配置动态调整等功能；</p>\n</li>\n<li>\n<p><strong>容错层</strong>：当服务调用出现失败之后需要有容错层的兜底辅助；</p>\n</li>\n</ul>\n<p>另外再附一张业界知名 RPC 框架 <code>Dubbo</code>  中各个层依赖关系图作对比：（来自 Dubbo 官方文档）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/a8668df70fa713ada4702dd88f9ed107.jpeg\" alt=\"来自Dubbo官方文档\" /></p>\n<p>这次分享就到这里就结束了，欢迎大家交流探讨。</p>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "RPC",
                "Java",
                "中间件"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/11/739a0b98107c/",
            "url": "https://shaogezhu.cn/2022/11/739a0b98107c/",
            "title": "写代码犹如写文章-读代码的简洁之道",
            "date_published": "2022-11-10T19:05:23.000Z",
            "content_html": "<p><img data-src=\"/assets/2022-11/codeclean1.png\" alt=\"image\" /></p>\n<div class=\"note info\">\n<p>前段时间看了 Bob 大叔的《代码整洁之道》英文名 <code>clean code</code> ，结合自己的学习经验，对代码整洁的重要性有了⼀些新的理解与感悟。遂在此做笔记，大家共同探讨，共同学习。</p>\n</div>\n<br/>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>书中 Bob 大叔提倡 <code>&quot;写代码犹如写文章&quot;</code>  ，又说道 “<strong>大师级程序员把系统当故事来讲，而不是当做程序来写</strong> ” 。没错，好的代码就应该如好文章一样表达思想，被人读懂。</p>\n<p>这本书如其名，教我们如何写出整洁的代码，以及写出整洁代码的理念。足够好的命名，简单专注的函数，有意义的注释以及规范的代码格式。比如如何命名（命名太难了😢）、如何处理异常、怎么写好易读的类和方法等等。</p>\n<br/>\n<h2 id=\"什么是整洁的代码\"><a class=\"anchor\" href=\"#什么是整洁的代码\">#</a> 什么是整洁的代码？</h2>\n<p>作者采访了一些知名的程序员，对于这个问题每个人都有不同的定义：</p>\n<ul>\n<li>“<strong>我喜欢优雅和高效的代码...</strong>” --Bjarne Stroustrup</li>\n<li>“<strong>整洁的代码简单直接...</strong>” --Grady Booch</li>\n<li>“<strong>整洁的代码总是看起来像是某位特别在意它的人写的，几乎没有改进的余地...</strong>” --Michael Feathers</li>\n<li>“<strong>如果每个例程都让你深合己意，那就是整洁代码...</strong>” --Ward Cunningham</li>\n<li><strong>等等</strong>。。。</li>\n</ul>\n<br/>\n<p>看了上面几位知名程序员的话，感觉还是有点抽象。不还还算是有点眉目了。那么我们日常开发该如何写出这样的代码呢？</p>\n<br/>\n<h2 id=\"如何才能写出整洁代码呢\"><a class=\"anchor\" href=\"#如何才能写出整洁代码呢\">#</a> 如何才能写出整洁代码呢？</h2>\n<p>简单总结一下就是 KISS（ <code>Keep It Simple Stupid</code> ）：<strong>让代码简单直接，让阅读代码的人可以很容易地看出设计者的意图</strong>。</p>\n<p>书中给出了很多方法与规范，学习这些规则可以帮我们写出更加的整洁代码。下面总结一些我印象比较深刻的内容 结合我的理解分享给大家。</p>\n<br/>\n<h3 id=\"有意义的命名\"><a class=\"anchor\" href=\"#有意义的命名\">#</a> 有意义的命名</h3>\n<blockquote>\n<p><strong>认证对待每个变量名，应当用为自己第一个孩子命名般的谨慎来给变量命名。</strong></p>\n</blockquote>\n<ol>\n<li><strong>名副其实</strong>：选一个好名字，也许会花费很多的时间，但省下来的时间比花掉的多，我们读和写的比例是远远大于 5:1 的。而且一旦发现有其他更好的名称，就换掉旧的。</li>\n<li><strong>做有意义的区分</strong>：不要定义，没有提供正确信息，没有提供导向作者意图的线索的命名。</li>\n<li><strong>名称</strong>：使用读得出来的名称，使用可搜索的名称。名称的长短应与其作用域大小相对应。</li>\n<li><strong>类名</strong>：类名和对象名应该是名词或名词短语，如 Customer 和 Account。避免使用 Manager、Data 或 Info 这样的类名。不应当是动词。</li>\n<li><strong>方法名</strong>：方法名应当是动词或动词短语，如 postPayment、deletePage 或 save。</li>\n<li><strong>别用双关语</strong>：不要将同一个单词用于不用的目的。</li>\n</ol>\n<br/>\n<p>我们的代码不仅是写给自己看的，更是写给别人看的，<span class=\"roange\"><strong>有意义的命名是提高表达力的一种方式</strong></span>。时刻保持代码整洁，是对自己负责也是对团队负责。</p>\n<br/>\n<h3 id=\"简单专注的函数\"><a class=\"anchor\" href=\"#简单专注的函数\">#</a> 简单专注的函数</h3>\n<blockquote>\n<p><strong>函数的第一条规则是短小，第二条规则是还要更短小。</strong></p>\n</blockquote>\n<ol>\n<li><strong>只做一件事</strong>：函数应该做一件事，做好这一件事，只做这一件事。</li>\n<li><strong>每个函数一个抽象层级</strong>：这一条比较难理解，就比如将大象装进冰箱一样，可以分为 3 个步骤 <code>开门-&gt;装大象-&gt;关门</code> 。而在装大象之前需要进行判断冰箱的大小和大象的大小以及冰箱中是否有其他东西，那么 3 大步骤是一个层级的，其余的这些判断第二层级，还可能有第三层级。简而言之，就是分层。</li>\n<li><strong>switch 语句</strong>：尽量少用，switch 语句本身就是用来处理多件事的，而用抽象工厂可能会更好一点。</li>\n<li><strong>描述性的名称</strong>：长而具有描述性的函数名称，好过描述性的长注释。</li>\n<li><strong>函数的参数</strong>：零参数最好，其次是一个参数，再次是二个参数，应尽量避免三个参数。</li>\n<li><strong>无副作用</strong>：不要把另外一件事隐藏到这个函数中，避免函数做不在名称描述中的第二件事。</li>\n</ol>\n<br/>\n<p>写代码很像是写文章。先想什么就写什么，然后再打磨：<strong> <code>分解函数、修改名称、消除重复</code> </strong>。一开始编写的代码或许冗长而复杂，最后经过打磨会变的短小，并且被很好的归置。</p>\n<br/>\n<h3 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h3>\n<blockquote>\n<p><strong>＂别给糟糕的代码加注释 —— 重新写吧。＂</strong> 　—Brian W. Kernighan 与 P. J. Plaugher</p>\n</blockquote>\n<ol>\n<li>注释不能美化糟糕的代码；</li>\n<li>注释的恰当用法是弥补我们在用代码表达意图时遭遇的失败。</li>\n<li><strong>代码可以表达清楚的事情，就不要用注释。</strong></li>\n<li>与其花时间编写解释你写的糟糕的代码的注释，不如花时间清理那堆糟糕的代码。</li>\n</ol>\n<br/>\n<p><strong>为什么这里要极力贬低注释？</strong></p>\n<p>因为注释会撒谎。注释存在的时间越久，就离其所描述的代码越远，越来越变得有误导性。原因很简单：我们维护项目的时候，不能坚持维护注释。代码在变动、在演化，但是注释并不总是随之变动 —— 不能总是跟着走。</p>\n<p><strong>PS</strong>：不知道有没有小伙伴和我一样，单纯的认为 “<strong>所有的方法都必须写注释</strong>”。然而大部分的注释就是简单的把方法名翻译一遍，我们自己可能感觉没什么，但是对于下一个阅读我们代码的人来说 阅读时间就需要乘以二（和我一起改掉这个不好的习惯吧～）。如果我们决定要写注释，就要花必要的时间确保写出最好的注释。</p>\n<br/>\n<h3 id=\"单元测试\"><a class=\"anchor\" href=\"#单元测试\">#</a> 单元测试</h3>\n<blockquote>\n<p><strong>整洁测试三要素：可读性、可读性、可读性</strong></p>\n</blockquote>\n<p>说到测试就有必要说一下著名的 TDD 了。</p>\n<p><strong>TDD 三定律</strong></p>\n<blockquote>\n<p>TDD 是测试驱动开发（Test-Driven Development）的英文简称，是敏捷开发中的一项核心实践和技术，也是一种设计方法论。</p>\n</blockquote>\n<ul>\n<li><strong>定律一</strong>　在编写不能通过的单元测试前，不可编写生产代码。</li>\n<li><strong>定律二</strong>　只可编写刚好无法通过的单元测试，不能编译也算不通过。</li>\n<li><strong>定律三</strong>　只可编写刚好足以通过当前失败测试的生产代码</li>\n</ul>\n<p>大家都知道 TDD 要求我们在编写生产代码前先编写单元测试。但这条规则只是冰山之巅。</p>\n<br/>\n<p>编写单元测试虽然很花费时间，但是好处还是很显而易见的：</p>\n<ol>\n<li>单元测试好处：保持生产代码可扩展、可维护、可复用。</li>\n<li>有了测试，我们就不用担心对代码的修改。</li>\n<li>测试代码可以降低性能的要求、来追求可读性。</li>\n</ol>\n<br/>\n<p><strong>整洁的测试还遵循以下 5 条规则：</strong></p>\n<ul>\n<li><strong>快速</strong>（Fast）　测试应该够快。测试应该能快速运行。</li>\n<li><strong>独立</strong>（Independent）　测试应该相互独立。某个测试不应为下一个测试设定条件。</li>\n<li><strong>可重复</strong>（Repeatable）　测试应当可在任何环境中重复通过。</li>\n<li><strong>自足验证</strong>（Self-Validating）　测试应该有布尔值输出。无论是通过或失败，你不应该查看日志文件来确认测试是否通过。</li>\n<li><strong>及时</strong>（Timely）　测试应及时编写。单元测试应该恰好在使其通过的生产代码之前编写。</li>\n</ul>\n<br/>\n<blockquote>\n<p>关于简洁代码相关内容就先介绍到这里。有什么问题大家一起讨论</p>\n</blockquote>\n<br/>\n<h2 id=\"结尾\"><a class=\"anchor\" href=\"#结尾\">#</a> 结尾：</h2>\n<p><img data-src=\"/assets/2022-11/codeclean2.png\" alt=\"image\" /></p>\n<blockquote>\n<p>艺术书并不保证你读过之后能成为艺术家，只能告诉你其它艺术家用过的工具、技术和思维过程。</p>\n</blockquote>\n<br/>\n<p>最后，再送给大家一些书中我比较喜欢的话：</p>\n<ul>\n<li>\n<p>质量是上百万次全心投入的结果。</p>\n</li>\n<li>\n<p>细节之中自有天地，整洁成就卓越代码。</p>\n</li>\n<li>\n<p>全心倾注于细节，屡见于追求卓越的行为之中。</p>\n</li>\n</ul>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "java",
                "代码规范"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/8/9b38152aa2ec/",
            "url": "https://shaogezhu.cn/2022/8/9b38152aa2ec/",
            "title": "推荐几个提升Java开发效率的“轮子”",
            "date_published": "2022-08-21T09:31:06.000Z",
            "content_html": "<div class=\"note info\">\n<p>在 <code>java</code>  的庞大体系中，其实有很多不错的小工具，也就是我们平常说的： <code>轮子</code> 。如果在我们的日常工作当中，能够将这些轮子用户，再配合一下 <code>idea</code>  的快捷键，可以极大得提升我们的开发效率🚀</p>\n<p>今天把我一些压箱底的小工具，分享给大家，希望对你有所帮助📌。</p>\n</div>\n<br/>\n<h2 id=\"collections\"><a class=\"anchor\" href=\"#collections\">#</a> Collections</h2>\n<blockquote>\n<p>首先出场的是 <code>java.util</code>  包下的 <code>Collections</code>  类，该类主要用于操作集合或者返回集合，我个人非常喜欢用它。</p>\n</blockquote>\n<h3 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h3>\n<p>在工作中经常有对集合排序的需求。</p>\n<p>看一下使用 <code>Collections</code>  工具 是如何实现<strong>升序</strong>和<strong>降序</strong>的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 升序</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 降序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"获取最大或最小值\"><a class=\"anchor\" href=\"#获取最大或最小值\">#</a> 获取最大或最小值</h3>\n<p>有时候需要找出集合中的 <code>最大值</code> 或者 <code>最小值</code> ，这时可以使用 <code>Collections</code>  的 <code>max</code>  和 <code>min</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Integer</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取最大值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Integer</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取最小值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"转换线程安全集合\"><a class=\"anchor\" href=\"#转换线程安全集合\">#</a> 转换线程安全集合</h3>\n<blockquote>\n<p>我们知道， <code>java</code>  中的很多集合，比如： <code>ArrayList</code> 、 <code>LinkedList</code> 、 <code>HashMap</code> 、 <code>HashSet</code>  等，都是线程不安全的。</p>\n<p>换句话说，这些集合在多线程的环境中，添加数据会出现异常。</p>\n</blockquote>\n<p>可以用 <code>Collections</code>  的 <code>synchronizedxxx</code>  方法，将这些线程不安全的集合，直接转换成线程安全集合。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integers <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 ArrayList 转换成线程安全集合</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它的底层会创建 <code>SynchronizedRandomAccessList</code>  或者 <code>SynchronizedList</code>  类，这两个类的很多方法都会用 <code>synchronized</code>  加锁。</p>\n<h3 id=\"返回空集合\"><a class=\"anchor\" href=\"#返回空集合\">#</a> 返回空集合</h3>\n<p>有时，我们在判空之后，需要返回空集合，就可以使用 <code>emptyList</code>  方法，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 业务处理</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二分查找\"><a class=\"anchor\" href=\"#二分查找\">#</a> 二分查找</h3>\n<p><code>binarySearch</code>  方法提供了一个非常好用的 <code>二分查找</code> 功能，只用传入指定集合和需要找到的 <code>key</code>  即可。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 二分查找</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr></table></figure><h3 id=\"转换成不可修改集合\"><a class=\"anchor\" href=\"#转换成不可修改集合\">#</a> 转换成不可修改集合</h3>\n<p>为了防止后续的程序把某个集合的结果修改了，有时候我们需要把某个集合定义成不可修改的，使用 Collections 的 <code>unmodifiablexxx</code>  方法就能轻松实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integers <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>integers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>UnsupportedOperationException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> at <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Collections</span>$<span class=\"token class-name\">UnmodifiableCollection</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1055</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sue<span class=\"token punctuation\">.</span>jump<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>test1<span class=\"token punctuation\">.</span></span>UtilTest</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UtilTest</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当然 Collections 工具类中还有很多常用的方法，在这里就不一一介绍了，需要你自己去探索。</p>\n<p><img data-src=\"/assets/2022-8/lz1.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"/assets/2022-8/lz2.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"collectionutils\"><a class=\"anchor\" href=\"#collectionutils\">#</a> CollectionUtils</h2>\n<p>对集合操作，除了前面说的 <code>Collections</code>  工具类之后， <code>CollectionUtils</code>  工具类也非常常用。</p>\n<p>目前比较主流的是 <code>spring</code>  的 <code>org.springframework.util</code>  包下的 <code>CollectionUtils</code>  工具类。</p>\n<p><img data-src=\"/assets/2022-8/lz3.png\" alt=\"image.png\" /></p>\n<p>和 <code>apache</code>  的 <code>org.apache.commons.collections</code>  包下的 <code>CollectionUtils</code>  工具类。</p>\n<p><img data-src=\"/assets/2022-8/lz4.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"/assets/2022-8/lz5.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p>我个人更推荐使用 <code>apache</code>  的包下的 <code>CollectionUtils</code>  工具类，因为它的工具更多更全面。</p>\n</blockquote>\n<p>举个简单的例子， <code>spring</code>  的 <code>CollectionUtils</code>  工具类没有判断集合不为空的方法。而 <code>apache</code>  的 <code>CollectionUtils</code>  工具类却有。</p>\n<p>下面我们以 <code>apache</code>  的 <code>CollectionUtils</code>  工具类为例，介绍一下常用方法。</p>\n<h3 id=\"集合判空\"><a class=\"anchor\" href=\"#集合判空\">#</a> 集合判空</h3>\n<p>通过 <code>CollectionUtils</code>  工具类的 <code>isEmpty</code>  方法可以轻松判断集合是否为空， <code>isNotEmpty</code>  方法判断集合不为空。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"集合为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"集合不为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对两个集合进行操作\"><a class=\"anchor\" href=\"#对两个集合进行操作\">#</a> 对两个集合进行操作</h3>\n<p>有时候我们需要对已有的两个集合进行操作，比如取<strong>交集</strong>或者<strong>并集</strong>等。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取并集</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> unionList <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>unionList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 获取交集</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intersectionList <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>intersectionList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 获取交集的补集</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> disjunctionList <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">disjunction</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>disjunctionList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 获取差集</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> subtractList <span class=\"token operator\">=</span> <span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subtractList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>说句实话，对两个集合的操作，在实际工作中用得挺多的，特别是很多批量的场景中。以前我们需要写一堆代码，但没想到有现成的 &quot;轮子&quot;。</p>\n<br/>\n<h2 id=\"lists\"><a class=\"anchor\" href=\"#lists\">#</a> Lists</h2>\n<p>如果你引入 <code>com.google.guava</code>  的 pom 文件，会获得很多好用的小工具。这里推荐一款 <code>com.google.common.collect</code>  包下的集合工具： <code>Lists</code> 。</p>\n<blockquote>\n<p>它实在太好用了，让我爱不释手。</p>\n</blockquote>\n<h3 id=\"创建空集合\"><a class=\"anchor\" href=\"#创建空集合\">#</a> 创建空集合</h3>\n<p>有时候，我们想创建一个空集合。这时可以用 <code>Lists</code>  的 <code>newArrayList</code>  方法，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"快速初始化集合\"><a class=\"anchor\" href=\"#快速初始化集合\">#</a> 快速初始化集合</h3>\n<p>有时候，我们想给一个集合中初始化一些元素。这时可以用 <code>Lists</code>  的 <code>newArrayList</code>  方法，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"笛卡尔积\"><a class=\"anchor\" href=\"#笛卡尔积\">#</a> 笛卡尔积</h3>\n<p>如果你想将两个集合做 <code>笛卡尔积</code> ， <code>Lists</code>  的 <code>cartesianProduct</code>  方法可以帮你实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> productList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">cartesianProduct</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"分页拆分\"><a class=\"anchor\" href=\"#分页拆分\">#</a> 分页 | 拆分</h3>\n<p>如果你想将一个 <code>大集合</code> 分成若干个 <code>小集合</code> ，可以使用 <code>Lists</code>  的 <code>partition</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> partitionList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>partitionList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这个例子中， <code>list</code>  有 5 条数据，我将 list 集合按大小为 2，分成了 3 页，即变成 3 个小集合。</p>\n<p>这个是我最喜欢的方法之一，经常在项目中使用。</p>\n<blockquote>\n<p>比如有个需求：现在有 5000 个 id，需要调用批量用户查询接口，查出用户数据。但如果你直接查 5000 个用户，单次接口响应时间可能会非常慢。如果改成分页处理，每次只查 500 个用户，异步调用 10 次接口，就不会有单次接口响应慢的问题。</p>\n</blockquote>\n<h3 id=\"流处理\"><a class=\"anchor\" href=\"#流处理\">#</a> 流处理</h3>\n<p>如果我们想把某个集合转换成另外一个接口，可以使用 Lists 的 <code>transform</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> transformList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>transformList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将小写字母转换成了大写字母。</p>\n<h3 id=\"颠倒顺序\"><a class=\"anchor\" href=\"#颠倒顺序\">#</a> 颠倒顺序</h3>\n<p>Lists 的有颠倒顺序的方法 <code>reverse</code> 。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> reverseList <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>reverseList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>list 的原始顺序是 3 1 2，使用 <code>reverse</code>  方法颠倒顺序之后，变成了 2 1 3。</p>\n<p>Lists 还有其他的好用的工具，我在这里只是抛砖引玉，有兴趣的朋友，可以深入研究一下。</p>\n<p><img data-src=\"/assets/2022-8/lz6.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"objects\"><a class=\"anchor\" href=\"#objects\">#</a> Objects</h2>\n<p>在 <code>jdk7</code>  之后，提供了 <code>Objects</code>  工具类，我们可以通过它操作对象。</p>\n<h3 id=\"对象判空\"><a class=\"anchor\" href=\"#对象判空\">#</a> 对象判空</h3>\n<p>在 java 中万事万物皆对象，对象的判空可以说无处不在。 <code>Objects</code>  的 <code>isNull</code>  方法判断对象是否为空，而 <code>nonNull</code>  方法判断对象是否不为空。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对象不为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对象为空抛异常\"><a class=\"anchor\" href=\"#对象为空抛异常\">#</a> 对象为空抛异常</h3>\n<p>如果我们想在对象为空时，抛出空指针异常，可以使用 <code>Objects</code>  的 <code>requireNonNull</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> integer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>integer1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>integer1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"参数不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>integer1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"参数不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"判断两个对象是否相等\"><a class=\"anchor\" href=\"#判断两个对象是否相等\">#</a> 判断两个对象是否相等</h3>\n<p>我们经常需要判断两个对象是否相等， <code>Objects</code>  给我们提供了 <code>equals</code>  方法，能非常方便的实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> integer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> integer2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>integer1<span class=\"token punctuation\">,</span> integer2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token boolean\">true</span></pre></td></tr></table></figure><p>但使用这个方法有坑，比如例子改成：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> integer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Long</span> integer2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>integer1<span class=\"token punctuation\">,</span> integer2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token boolean\">false</span></pre></td></tr></table></figure><blockquote>\n<p>出现这种现象的主要原因是 两种数据类型不一致，一种是 <code>Integer</code> 、一种是 <code>Long</code>  所以为 false。</p>\n<p>更具体的就不过多解释，有兴趣的小伙们可以看一下该方法的源码，里面有非常详细的介绍。</p>\n</blockquote>\n<h3 id=\"获取对象的hashcode\"><a class=\"anchor\" href=\"#获取对象的hashcode\">#</a> 获取对象的 hashCode</h3>\n<p>如果我们想获取某个对象的 <code>hashCode</code> ，可以使用 Objects 的 <code>hashCode</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">96354</span></pre></td></tr></table></figure><p>Objects 的内容先介绍到这里，有兴趣的小伙，可以看看下面更多的方法：</p>\n<p><img data-src=\"/assets/2022-8/lz7.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"booleanutils\"><a class=\"anchor\" href=\"#booleanutils\">#</a> BooleanUtils</h2>\n<blockquote>\n<p>在 <code>java</code>  中布尔值，随处可见。</p>\n</blockquote>\n<p>如果我们使用了布尔的包装类： <code>Boolean</code> ，总感觉有点麻烦，因为它有三种值： <code>null</code> 、 <code>true</code> 、 <code>false</code> 。我们在处理 Boolean 对象时，需要经常判空。</p>\n<p>但如果使用 <code>BooleanUtils</code>  类处理布尔值，就方便许多了。</p>\n<h3 id=\"判断true或false\"><a class=\"anchor\" href=\"#判断true或false\">#</a> 判断 true 或 false</h3>\n<p>如果你想判断某个参数的值是 true 或 false，可以直接使用 <code>isTrue</code>  或 <code>isFalse</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFalse</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"判断不为true或不为false\"><a class=\"anchor\" href=\"#判断不为true或不为false\">#</a> 判断不为 true 或不为 false</h3>\n<p>有时候，需要判断某个参数不为 <code>true</code> ，即是 <code>null</code>  或者 <code>false</code> 。或者判断不为 <code>false</code> ，即是 <code>null</code>  或者 <code>true</code> 。</p>\n<p>可以使用 <code>isNotTrue</code>  或 <code>isNotFalse</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotTrue</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotTrue</span><span class=\"token punctuation\">(</span>aBoolean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotFalse</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotFalse</span><span class=\"token punctuation\">(</span>aBoolean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//true</span></pre></td></tr></table></figure><h3 id=\"转换成数字\"><a class=\"anchor\" href=\"#转换成数字\">#</a> 转换成数字</h3>\n<p>如果你想将 <code>true</code>  转换成数字 1， <code>false</code>  转换成数字 0，可以使用 <code>toInteger</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInteger</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInteger</span><span class=\"token punctuation\">(</span>aBoolean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr></table></figure><h3 id=\"boolean转换成布尔值\"><a class=\"anchor\" href=\"#boolean转换成布尔值\">#</a> Boolean 转换成布尔值</h3>\n<p>我们有时候需要将包装类 <code>Boolean</code>  对象，转换成原始的 <code>boolean</code>  对象，可以使用 <code>toBoolean</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> aBoolean1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span>aBoolean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BooleanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBooleanDefaultIfNull</span><span class=\"token punctuation\">(</span>aBoolean1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们无需额外的判空了，而且还可以设置 <code>Boolean</code>  对象为空时返回的默认值。</p>\n<p><code>BooleanUtils</code>  类的方法还有很多，有兴趣的小伙伴可以看看下面的内容：</p>\n<p><img data-src=\"/assets/2022-8/lz8.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"stringutils\"><a class=\"anchor\" href=\"#stringutils\">#</a> StringUtils</h2>\n<p>字符串（ <code>String</code> ）在我们的日常工作中，用得非常非常非常多。</p>\n<p>在我们的代码中经常需要对<strong>字符串判空，截取字符串、转换大小写、分隔字符串、比较字符串、去掉多余空格、拼接字符串、使用正则表达式</strong>等等。</p>\n<p>如果只用 <code>String</code>  类提供的那些方法，我们需要手写大量的额外代码，不然容易出现各种异常。</p>\n<p>现在有个好消息是： <code>org.apache.commons.lang3</code>  包下的 <code>StringUtils</code>  工具类，给我们提供了非常丰富的选择。</p>\n<h3 id=\"字符串判空\"><a class=\"anchor\" href=\"#字符串判空\">#</a> 字符串判空</h3>\n<p>其实空字符串，不只是 null 一种，还有 &quot;&quot;，&quot; &quot;，&quot;null&quot; 等等，多种情况。</p>\n<p><code>StringUtils</code>  给我们提供了多个判空的静态方法，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>示例中的： <code>isEmpty</code> 、 <code>isNotEmpty</code> 、 <code>isBlank</code>  和 <code>isNotBlank</code> ，这 4 个判空方法你们可以根据实际情况使用。</p>\n<blockquote>\n<p>优先推荐使用 <code>isBlank</code>  和 <code>isNotBlank</code>  方法，因为它会把 <code>&quot; &quot;</code>  也考虑进去。</p>\n</blockquote>\n<h3 id=\"分隔字符串\"><a class=\"anchor\" href=\"#分隔字符串\">#</a> 分隔字符串</h3>\n<p>分隔字符串是常见需求，如果直接使用 <code>String</code>  类的 <code>split</code>  方法，就可能会出现空指针异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>NullPointerException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> at <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sue<span class=\"token punctuation\">.</span>jump<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>test1<span class=\"token punctuation\">.</span></span>UtilTest</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UtilTest</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用 <code>StringUtils</code>  的 <code>split</code>  方法会返回 <code>null</code> ，而使用 <code>String</code>  的 <code>split</code>  方法会报指针异常。</p>\n<h3 id=\"判断是否纯数字\"><a class=\"anchor\" href=\"#判断是否纯数字\">#</a> 判断是否纯数字</h3>\n<p>给定一个字符串，判断它是否为纯数字，可以使用 <code>isNumeric</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"123q\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"0.33\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><h3 id=\"将集合拼接成字符串\"><a class=\"anchor\" href=\"#将集合拼接成字符串\">#</a> 将集合拼接成字符串</h3>\n<p>有时候，我们需要将某个集合的内容，拼接成一个字符串，然后输出，这时可以使用 <code>join</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Lists</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>当然还有很多实用的方法，我在这里就不一一介绍了。</p>\n<p><img data-src=\"/assets/2022-8/lz9.png\" alt=\"image.png\" /></p>\n<p><img data-src=\"/assets/2022-8/lz10.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"assert\"><a class=\"anchor\" href=\"#assert\">#</a> Assert</h2>\n<p>很多时候，我们需要在代码中做判断：如果不满足条件，则抛异常。</p>\n<p>有没有统一的封装呢？</p>\n<p>其实 <code>spring</code>  给我们提供了 <code>Assert</code>  类，它表示 <code>断言</code> 。</p>\n<h3 id=\"断言参数是否为空\"><a class=\"anchor\" href=\"#断言参数是否为空\">#</a> 断言参数是否为空</h3>\n<p>断言 <code>参数</code> 是否空，如果不满足条件，则直接抛异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"str必须为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"str必须为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"str不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果不满足条件就会抛出 <code>IllegalArgumentException</code>  异常。</p>\n<h3 id=\"断言集合是否为空\"><a class=\"anchor\" href=\"#断言集合是否为空\">#</a> 断言集合是否为空</h3>\n<p>断言 <code>集合</code> 是否空，如果不满足条件，则直接抛异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"list不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"list不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notEmpty</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token string\">\"map不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果不满足条件就会抛出 <code>IllegalArgumentException</code>  异常。</p>\n<h3 id=\"断言条件是否为空\"><a class=\"anchor\" href=\"#断言条件是否为空\">#</a> 断言条件是否为空</h3>\n<p>断言是否满足某个 <code>条件</code> ，如果不满足条件，则直接抛异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"list不能为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然 Assert 类还有一些其他的功能，这里就不多介绍了。</p>\n<p><img data-src=\"/assets/2022-8/lz11.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"ioutils\"><a class=\"anchor\" href=\"#ioutils\">#</a> IOUtils</h2>\n<p><code>IO</code>  流在我们日常工作中也用得比较多，尽管 java 已经给我们提供了丰富的 <code>API</code> 。</p>\n<p>但我们不得不每次读取文件，或者写入文件之后，写一些重复的的代码。手动在 <code>finally</code>  代码块中关闭流，不然可能会造成 <code>内存溢出</code> 。</p>\n<p>有个好消息是：如果你使用 <code>org.apache.commons.io</code>  包下的 <code>IOUtils</code>  类，会节省大量的时间。</p>\n<h3 id=\"读取文件\"><a class=\"anchor\" href=\"#读取文件\">#</a> 读取文件</h3>\n<p>如果你想将某个 txt 文件中的数据，读取到字符串当中，可以使用 <code>IOUtils</code>  类的 <code>toString</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/temp/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"写入文件\"><a class=\"anchor\" href=\"#写入文件\">#</a> 写入文件</h3>\n<p>如果你想将某个字符串的内容，写入到指定文件当中，可以使用 <code>IOUtils</code>  类的 <code>write</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/temp/b.tx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"文件拷贝\"><a class=\"anchor\" href=\"#文件拷贝\">#</a> 文件拷贝</h3>\n<p>如果你想将某个文件中的所有内容，都拷贝到另一个文件当中，可以使用 <code>IOUtils</code>  类的 <code>copy</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/temp/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/temp/b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取文件内容到字节数组\"><a class=\"anchor\" href=\"#读取文件内容到字节数组\">#</a> 读取文件内容到字节数组</h3>\n<p>如果你想将某个文件中的内容，读取字节数组中，可以使用 <code>IOUtils</code>  类的 <code>toByteArray</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/temp/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>IOUtils 类非常实用，感兴趣的小伙们，可以看看下面内容。</p>\n<p><img data-src=\"/assets/2022-8/lz12.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"mdc\"><a class=\"anchor\" href=\"#mdc\">#</a> MDC</h2>\n<p><code>MDC</code>  是 <code>org.slf4j</code>  包下的一个类，它的全称是 <code>Mapped Diagnostic Context</code> ，我们可以认为它是一个线程安全的<strong>存放诊断日志的容器</strong>。</p>\n<p>MDC 的底层是用了 <code>ThreadLocal</code>  来保存数据的。</p>\n<p>我们可以用它传递参数。</p>\n<blockquote>\n<p>例如现在有这样一种场景：我们使用 <code>RestTemplate</code>  调用远程接口时，有时需要在 <code>header</code>  中传递信息，比如：traceId，source 等，便于在查询日志时能够串联一次完整的请求链路，快速定位问题。</p>\n</blockquote>\n<p>这种业务场景就能通过 <code>ClientHttpRequestInterceptor</code>  接口实现，具体做法如下：</p>\n<p><strong>第一步</strong>，定义一个 <code>LogFilter</code>  拦截所有接口请求，在 MDC 中设置 <code>traceId</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">MdcUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"记录请求日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"记录响应日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>第二步</strong>，实现 <code>ClientHttpRequestInterceptor</code>  接口，MDC 中获取当前请求的 traceId，然后设置到 <code>header</code>  中：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestTemplateInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClientHttpRequestInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ClientHttpResponse</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClientHttpRequestExecution</span> execution<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"traceId\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MdcUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> execution<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>第三步</strong>，定义配置类，配置上面定义的 <code>RestTemplateInterceptor</code>  类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestTemplateConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">RestTemplate</span> restTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span><span class=\"token function\">restTemplateInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplateInterceptor</span> <span class=\"token function\">restTemplateInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplateInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 <code>MdcUtil</code>  其实是利用 <code>MDC</code>  工具在 <code>ThreadLocal</code>  中存储和获取 <code>traceId</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MdcUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TRACE_ID <span class=\"token operator\">=</span> <span class=\"token string\">\"TRACE_ID\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> MDC<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>TRACE_ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        MDC<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>TRACE_ID<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，这个例子中没有演示 <code>MdcUtil</code>  类的 <code>add</code>  方法具体调的地方，我们可以在 <code>filter</code>  中执行接口方法之前，生成 <code>traceId</code> ，调用 <code>MdcUtil</code>  类的 <code>add</code>  方法添加到 <code>MDC</code>  中，然后在同一个请求的其他地方就能通过 <code>MdcUtil</code>  类的 <code>get</code>  方法获取到该 <code>traceId</code> 。</p>\n<p>能使用 <code>MDC</code>  保存 <code>traceId</code>  等参数的根本原因是，用户请求到应用服务器， <code>Tomcat</code>  会从线程池中分配一个线程去处理该请求。</p>\n<p>那么该请求的整个过程中，保存到 <code>MDC</code>  的 <code>ThreadLocal</code>  中的参数，也是该线程独享的，所以不会有线程安全问题。</p>\n<br/>\n<h2 id=\"classutils\"><a class=\"anchor\" href=\"#classutils\">#</a> ClassUtils</h2>\n<p>spring 的 <code>org.springframework.util</code>  包下的 <code>ClassUtils</code>  类，它里面有很多让我们惊喜的功能。</p>\n<p>它里面包含了类和对象相关的很多非常实用的方法。</p>\n<h3 id=\"获取对象的所有接口\"><a class=\"anchor\" href=\"#获取对象的所有接口\">#</a> 获取对象的所有接口</h3>\n<p>如果你想获取某个对象的所有接口，可以使用 <code>ClassUtils</code>  的 <code>getAllInterfaces</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> allInterfaces <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"获取某个类的包名\"><a class=\"anchor\" href=\"#获取某个类的包名\">#</a> 获取某个类的包名</h3>\n<p>如果你想获取某个类的包名，可以使用 <code>ClassUtils</code>  的 <code>getPackageName</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> packageName <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPackageName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>packageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"判断某个类是否内部类\"><a class=\"anchor\" href=\"#判断某个类是否内部类\">#</a> 判断某个类是否内部类</h3>\n<p>如果你想判断某个类是否内部类，可以使用 <code>ClassUtils</code>  的 <code>isInnerClass</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInnerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"判断对象是否代理对象\"><a class=\"anchor\" href=\"#判断对象是否代理对象\">#</a> 判断对象是否代理对象</h3>\n<p>如果你想判断对象是否代理对象，可以使用 <code>ClassUtils</code>  的 <code>isCglibProxy</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCglibProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ClassUtils 还有很多有用的方法，感兴趣的朋友，可以看看下面内容：</p>\n<p><img data-src=\"/assets/2022-8/lz13.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"beanutils\"><a class=\"anchor\" href=\"#beanutils\">#</a> BeanUtils</h2>\n<p>spring 给我们提供了一个 <code>JavaBean</code>  的工具类，它在 <code>org.springframework.beans</code>  包下面，它的名字叫做： <code>BeanUtils</code> 。</p>\n<blockquote>\n<p>让我们一起看看这个工具可以带给我们哪些惊喜。</p>\n</blockquote>\n<h3 id=\"拷贝对象的属性\"><a class=\"anchor\" href=\"#拷贝对象的属性\">#</a> 拷贝对象的属性</h3>\n<p>曾几何时，你有没有这样的需求：把某个对象中的所有属性，都拷贝到另外一个对象中。这时就能使用 <code>BeanUtils</code>  的 <code>copyProperties</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user1<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>user1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"田埂上的梦\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>user1<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"实例化某个类\"><a class=\"anchor\" href=\"#实例化某个类\">#</a> 实例化某个类</h3>\n<p>如果你想通过反射实例化一个类的对象，可以使用 <code>BeanUtils</code>  的 <code>instantiateClass</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">instantiateClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"获取指定类的指定方法\"><a class=\"anchor\" href=\"#获取指定类的指定方法\">#</a> 获取指定类的指定方法</h3>\n<p>如果你想获取某个类的指定方法，可以使用 <code>BeanUtils</code>  的 <code>findDeclaredMethod</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> declaredMethod <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>declaredMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"获取指定方法的参数\"><a class=\"anchor\" href=\"#获取指定方法的参数\">#</a> 获取指定方法的参数</h3>\n<p>如果你想获取某个方法的参数，可以使用 <code>BeanUtils</code>  的 <code>findPropertyForMethod</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> declaredMethod <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">PropertyDescriptor</span> propertyForMethod <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findPropertyForMethod</span><span class=\"token punctuation\">(</span>declaredMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>propertyForMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果你对 <code>BeanUtils</code>  比较感兴趣，可以看看下面内容：</p>\n<p><img data-src=\"/assets/2022-8/lz14.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"reflectionutils\"><a class=\"anchor\" href=\"#reflectionutils\">#</a> ReflectionUtils</h2>\n<p>有时候，我们需要在项目中使用 <code>反射</code> 功能，如果使用最原始的方法来开发，代码量会非常多，而且很麻烦，它需要处理一大堆异常以及访问权限等问题。</p>\n<p>好消息是 spring 给我们提供了一个 <code>ReflectionUtils</code>  工具，它在 <code>org.springframework.util</code>  包下面。</p>\n<h3 id=\"获取方法\"><a class=\"anchor\" href=\"#获取方法\">#</a> 获取方法</h3>\n<p>如果你想获取某个类的某个方法，可以使用 <code>ReflectionUtils</code>  类的 <code>findMethod</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"获取字段\"><a class=\"anchor\" href=\"#获取字段\">#</a> 获取字段</h3>\n<p>如果你想获取某个类的某个字段，可以使用 <code>ReflectionUtils</code>  类的 <code>findField</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"执行方法\"><a class=\"anchor\" href=\"#执行方法\">#</a> 执行方法</h3>\n<p>如果你想通过反射调用某个方法，传递参数，可以使用 <code>ReflectionUtils</code>  类的 <code>invokeMethod</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">invokeMethod</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> springContextsUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"判断字段是否常量\"><a class=\"anchor\" href=\"#判断字段是否常量\">#</a> 判断字段是否常量</h3>\n<p>如果你想判断某个字段是否常量，可以使用 <code>ReflectionUtils</code>  类的 <code>isPublicStaticFinal</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublicStaticFinal</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"判断是否equals方法\"><a class=\"anchor\" href=\"#判断是否equals方法\">#</a> 判断是否 equals 方法</h3>\n<p>如果你想判断某个方法是否 <code>equals</code>  方法，可以使用 <code>ReflectionUtils</code>  类的 <code>isEqualsMethod</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualsMethod</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然这个类还有不少有趣的方法，感兴趣的朋友，可以看看下面内容：</p>\n<p><img data-src=\"/assets/2022-8/lz15.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"base64utils\"><a class=\"anchor\" href=\"#base64utils\">#</a> Base64Utils</h2>\n<p>有时候，为了安全考虑，需要将参数只用 <code>base64</code>  编码。</p>\n<p>这时就能直接使用 <code>org.springframework.util</code>  包下的 <code>Base64Utils</code>  工具类。</p>\n<p>它里面包含： <code>encode</code>  和 <code>decode</code>  方法，用于对数据进行加密和解密。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> encode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密后：\"</span> <span class=\"token operator\">+</span> encode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> decode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>encode<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密后：\"</span> <span class=\"token operator\">+</span> decode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>加密后：<span class=\"token class-name\">YWJj</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>解密后：abc</pre></td></tr></table></figure><br/>\n<h2 id=\"standardcharsets\"><a class=\"anchor\" href=\"#standardcharsets\">#</a> StandardCharsets</h2>\n<p>我们在做字符转换的时候，经常需要指定字符编码，比如： <code>UTF-8</code> 、 <code>ISO-8859-1</code>  等等。</p>\n<p>这时就可以直接使用 <code>java.nio.charset</code>  包下的 <code>StandardCharsets</code>  类中静态变量。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> encode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密后：\"</span> <span class=\"token operator\">+</span> encode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> decode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>encode<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密后：\"</span> <span class=\"token operator\">+</span> decode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><br/>\n<h2 id=\"digestutils\"><a class=\"anchor\" href=\"#digestutils\">#</a> DigestUtils</h2>\n<p>有时候，我们需要对数据进行加密处理，比如： <code>md5</code>  或 <code>sha256</code> 。</p>\n<p>可以使用 apache 的 <code>org.apache.commons.codec.digest</code>  包下的 <code>DigestUtils</code>  类。</p>\n<h3 id=\"md5加密\"><a class=\"anchor\" href=\"#md5加密\">#</a> md5 加密</h3>\n<p>如果你想对数据进行 md5 加密，可以使用 <code>DigestUtils</code>  的 <code>md5Hex</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> md5Hex <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏三说技术\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sha256加密\"><a class=\"anchor\" href=\"#sha256加密\">#</a> sha256 加密</h3>\n<p>如果你想对数据进行 sha256 加密，可以使用 <code>DigestUtils</code>  的 <code>sha256Hex</code>  方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> md5Hex <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">sha256Hex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苏三说技术\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然这个工具还有很多其他的加密方法：</p>\n<p><img data-src=\"/assets/2022-8/lz16.png\" alt=\"image.png\" /></p>\n<br/>\n<h2 id=\"serializationutils\"><a class=\"anchor\" href=\"#serializationutils\">#</a> SerializationUtils</h2>\n<p>有时候，我们需要把数据进行 <code>序列化</code> 和 <code>反序列化</code> 处理。</p>\n<p>传统的做法是某个类实现 <code>Serializable</code>  接口，然后重新它的 <code>writeObject</code>  和 <code>readObject</code>  方法。</p>\n<p>但如果使用 <code>org.springframework.util</code>  包下的 <code>SerializationUtils</code>  工具类，能更轻松实现序列化和反序列化功能。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Maps</span><span class=\"token punctuation\">.</span><span class=\"token function\">newHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serialize <span class=\"token operator\">=</span> <span class=\"token class-name\">SerializationUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Object</span> deserialize <span class=\"token operator\">=</span> <span class=\"token class-name\">SerializationUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>serialize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deserialize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><br/>\n<h2 id=\"httpstatus\"><a class=\"anchor\" href=\"#httpstatus\">#</a> HttpStatus</h2>\n<p>很多时候，我们会在代码中定义 <code>http</code>  的返回码，比如：接口正常返回 200，异常返回 500，接口找不到返回 404，接口不可用返回 502 等。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> SUCCESS_CODE <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> ERROR_CODE <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> NOT_FOUND_CODE <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其实 <code>org.springframework.http</code>  包下的 <code>HttpStatus</code>  枚举，或者 <code>org.apache.http</code>  包下的 <code>HttpStatus</code>  接口，已经把常用的 <code>http</code>  返回码给我们定义好了，直接拿来用就可以了，真的不用再重复定义了。</p>\n<p><img data-src=\"/assets/2022-8/lz17.png\" alt=\"image.png\" /></p>\n<p>好了，这次就分享到这里。</p>\n<p>工作当中还有很多好用的小工具，我会继续更新的。</p>\n<br/>\n",
            "tags": [
                "Java",
                "技术实践",
                "笔记",
                "工具",
                "轮子"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/8/b87af8545928/",
            "url": "https://shaogezhu.cn/2022/8/b87af8545928/",
            "title": "一篇文章教你轻松使用Fastjson",
            "date_published": "2022-08-14T14:17:06.000Z",
            "content_html": "<div class=\"note info\">\n<p>在前后端数据传输交互中，经常会遇到字符串 (String) 与 Json、XML 等格式相互转换与解析，其中 json 以跨语言，跨前后端的优点在开发中被频繁使用，基本上可以说是标准的数据交换格式。下面我们就来学习一下常用的 Fastjson。</p>\n</div>\n<h1 id=\"fastjson介绍\"><a class=\"anchor\" href=\"#fastjson介绍\">#</a> Fastjson 介绍</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>Fastjson 是阿里巴巴公司开源的一个 Java 语言编写的高性能功能完善的 JSON 库。它采用一种 “<strong>假定有序快速匹配</strong>” 的算法，把 JSON Parse 的性能提升到极致，是目前 Java 语言中最快的 JSON 库，并且它不依赖于其它任何库。</p>\n<h2 id=\"主要特点\"><a class=\"anchor\" href=\"#主要特点\">#</a> 主要特点：</h2>\n<ul>\n<li>快速 FAST (比其它任何基于 Java 的解析器和生成器更快，包括 jackson）</li>\n<li>强大（支持普通 JDK 类包括任意 Java Bean Class、Collection、Map、Date 或 enum）</li>\n<li>零依赖（没有依赖其它任何类库除了 JDK）</li>\n</ul>\n<h1 id=\"fastjson使用\"><a class=\"anchor\" href=\"#fastjson使用\">#</a> Fastjson 使用</h1>\n<p>maven 依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!--（起码 1.2.67 以上）因为这个版本以下存在漏洞 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>版本根据自己需要<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>android 版本：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>x.x.xx.android<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h1>\n<h2 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h2>\n<p><code>fastjson</code>  提供了  <code>JSON.parseObject()</code>  和  <code>JSON.toJSONString</code>  两个直接用于解析和生成的方法。前者实现了反序列化，后者实现了序列化。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> emailAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 省略 getter/setter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>生成 JSON 格式字符串：</strong><small>（Object to JSON-String）</small></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"怪盗tiangeng\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> jsonStr <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>解析 JSON 格式字符串：</strong><small>（JSON-String to Object）</small></p>\n<blockquote>\n<p><code>注意</code> ，需要 User 类有无参的构造方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;\\\"name\\\":\\\"怪盗tiangeng\\\",\\\"age\\\":23&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"jsonobject\"><a class=\"anchor\" href=\"#jsonobject\">#</a> JSONObject</h2>\n<blockquote>\n<p>在  <code>Java</code>  中，一个 <code>Map&lt;String, Object&gt;</code>  对象可以等价描述一个 <code> JavaBean</code> 。 <code>Map</code>  中的每个键值对，对应 <code> JavaBean</code>  中的一个属性。键为属性名，值为属性值。</p>\n</blockquote>\n<p><code>JSONObject </code> 就是 <code>fastjson</code>  专门提供的一个用于这样的使用场景的 <code> Map</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>fastJson</code>  提供了  <code>JSON.parseObject()</code>  将  <code>JSON </code> 格式字符串转换成一个 <code>JSONObject</code>  对象（本质上，就是转换成一个 <code>Map</code> ）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;\\\"name\\\":\\\"怪盗tiangeng\\\",\\\"age\\\":23&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">JSONObject</span> map <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> val1 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> val2 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getIntValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>对于不同类型的各种属性，JSONObject 提供了不同的  <code>getXXX()</code>  方法与之对应。</p>\n</blockquote>\n<h2 id=\"jsonarray\"><a class=\"anchor\" href=\"#jsonarray\">#</a> JSONArray</h2>\n<p>反序列化数组形式的  <code>JSON </code> 格式字符串的第三种方案是利用  <code>fastJson </code> 提供的  <code>JSONArray</code>  。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JSONArray</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从其定义看， <code>JSONArray </code> 本质上也就是一个 <code> List</code> ，所以这种方案本质上和之前的第二种方案没太大区别。</p>\n<p>只不过它不需要在最开始提供所要转换的类型，而是通过各种  <code>getXXX()</code>  方法在获取值数据时进行转换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">JSONArray</span> arr2 <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseArray</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组-集合的序列化和反序列化\"><a class=\"anchor\" href=\"#数组-集合的序列化和反序列化\">#</a> 数组、集合的序列化和反序列化</h2>\n<p>数组的序列化很简单，与普通对象类似；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jerry\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"456@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> jsonStr <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数组的反序列化，有几种方案，其中一种方案与普通对象的反序列化类似，，唯一需要注意的就是填写正确的数组类型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>鉴于  <code>List</code>  与 数组 有极大地相似性，另一种反序列化数组形式的 <code>JSON</code>  字符串的方案是，将其反序列化为对象的链表：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseArray</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"泛型-和-resetfull-api\"><a class=\"anchor\" href=\"#泛型-和-resetfull-api\">#</a> 泛型 和 RESETfull API</h2>\n<p>泛型的引入可以减少无关的代码，这在 <code>resetful api</code>  返回数据时反映得更为清楚，通常  <code>resetful api</code>  接口返回的 <code> JSON</code>  数据为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"status\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"msg\"</span><span class=\"token operator\">:</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"status\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"msg\"</span><span class=\"token operator\">:</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"data\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><blockquote>\n<p><code>status</code>  表示响应状态码， <code>msg</code>  表示状态码配套的信息，而 <code>data</code>  才是最核心的部分：响应的数据。一般而言，它要么表示返回一个对象，要么表示返回一个对象的集合<small>（数组或 <code> List</code> ）</small>。</p>\n</blockquote>\n<p>在这里会把这个结果对象定义成泛型类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>否则， <code>data </code> 的类型无穷无尽，你就需要为每一种情况定义一种 <code> Result</code>  类。</p>\n<p>那么对于  <code>data</code>  字段，当 T 是 <code> User</code>  时则可以写为  <code>Result&lt;User&gt;</code> ，当是个列表的时候为  <code>Result&lt;List&lt;User&gt;&gt;</code> ，其它类型同理（ <code>Result&lt;XXX&gt;</code>  和  <code>Result&lt;List&lt;XXX&gt;&gt;</code> ）。</p>\n<p>对此， <code>Json</code>  字符串转对象时，代码自然就类似如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">JSONArray</span> list <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseArray</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jsonfield-注解name-属性\"><a class=\"anchor\" href=\"#jsonfield-注解name-属性\">#</a> @JSONField 注解：name 属性</h2>\n<blockquote>\n<p>默认 / 一般情况下， <code>JSON</code>  字段中的名字和类的属性名是一致的。但是也有不一致的情况，因为本身驼峰命名法（如 Java）和下划线命名法（如 C）本身就是两大命名规则 “流派”。</p>\n</blockquote>\n<p>对类的属性使用  <code>@JSONField</code>  注解（及其  <code>name</code>  属性），可以重新指定与该属性对应的 <code>JSON</code>  字符串中的名字。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"email_address\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> emailAddress</pre></td></tr></table></figure><p>你甚至可以重新命名为另一个看起来毫不相关的名字：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> emailAddress<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;\\\"name\\\":\\\"怪盗taingeng\\\",\\\"age\\\":23, \\\"email_address\\\":\\\"123456@qq.com\\\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"jsonfield-注解serialzefeatures-属性\"><a class=\"anchor\" href=\"#jsonfield-注解serialzefeatures-属性\">#</a> @JSONField 注解：serialzeFeatures 属性</h2>\n<p>在将一个对象转换成・ <code>JSON</code>  格式字符串时， <code>fastJson </code> 会自动忽略掉其中值为  <code>null</code>  的属性，及不包含在 <code>JSON</code>  格式为字符串中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &#123;\"name\":\"tom\"&#125;</span></pre></td></tr></table></figure><p>有时你需要以更完善的形式来表达出这个对象中的所有属性，即便其值为  <code>null</code>  。</p>\n<p>为此， <code>fastJson</code>  通过  <code>@JSONField</code>  注解的  <code>serialzeFeatures</code>  属性值进行设置：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>serialzeFeatures<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>WriteNullNumberAsZero</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>serialzeFeatures<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>WriteMapNullValue</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> emailAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>serialzeFeatures<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>WriteNullStringAsEmpty</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// &#123;\"age\":0,\"emailAddress\":null,\"list\":null,\"name\":\"tom\"&#125;</span></pre></td></tr></table></figure><h2 id=\"jsonfield-注解format-属性\"><a class=\"anchor\" href=\"#jsonfield-注解format-属性\">#</a> @JSONField 注解：format 属性</h2>\n<p>当所需要序列化和反序列化的对象的属性有  <code>Date</code>  类型时，这里就涉及到  <code>Date</code>  类型的字符串形式的格式问题，为此  <code>@JSONField</code>  注解提供了  <code>format</code>  属性用以自定义其字符串格式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>format<span class=\"token operator\">=</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 ISO-8601 日期格式:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>serialzeFeatures<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>UseISO8601DateFormat</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>反序列化能够自动识别如下日期格式：</p>\n<ul>\n<li>ISO-8601 日期格式</li>\n<li>yyyy-MM-dd</li>\n<li>yyyy-MM-dd HH:mm:ss</li>\n<li>yyyy-MM-dd HH:mm:ss.SSS</li>\n<li>毫秒数字</li>\n<li>毫秒数字字符串</li>\n<li>.NET JSON 日期格式</li>\n<li>new Date(198293238)</li>\n</ul>\n<h2 id=\"jsonfield-注解serialize-属性\"><a class=\"anchor\" href=\"#jsonfield-注解serialize-属性\">#</a> @JSONField 注解：serialize 属性</h2>\n<p>标注了  <code>@JSONField(serialize=false)</code>  的属性在序列化成 <code>JSON</code>  格式字符串的过程中，会被  <code>fastJSON </code> 忽略。无论其是否有值。</p>\n<h2 id=\"循环引用\"><a class=\"anchor\" href=\"#循环引用\">#</a> 循环引用</h2>\n<p><code>fastJson</code>  自动识别循环混用的问题，并将其替换成  <code>$ref</code>  形式。而是不是  <code>StackOverflowError</code>  异常。</p>\n<blockquote>\n<p><code>$ref</code> ： <code>..</code>  上一级</p>\n<p><code>$ref</code> ： <code>@</code>  当前对象，也就是自引用</p>\n<p><code>$ref</code> ： <code>$</code>  根对象</p>\n<p><code>$ref</code> ： <code>$.children.0</code>  基于路径的引用，相当于  <code>root.getChildren().get(0)</code></p>\n</blockquote>\n<p>如果百分百肯定所要序列化的对象不存在循环引用问题，可以在序列化时关闭该检测功能（默认是开启的）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>DisableCircularReferenceDetect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "技术实践",
                "笔记",
                "实战",
                "Fastjson"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/8/e92c6dc1ddaa/",
            "url": "https://shaogezhu.cn/2022/8/e92c6dc1ddaa/",
            "title": "系统总结，带你实现Linux命令自由",
            "date_published": "2022-08-06T18:56:48.000Z",
            "content_html": "<div class=\"note info\">\n<p>Linux 的学习对于一个程序员的重要性是不言而喻的。前端开发相比后端开发，接触  <code>Linux</code>  机会相对较少，因此往往容易忽视它。但是学好它却是程序员必备修养之一。👀</p>\n</div>\n<h1 id=\"linux基础\"><a class=\"anchor\" href=\"#linux基础\">#</a> Linux 基础</h1>\n<h2 id=\"什么是linux\"><a class=\"anchor\" href=\"#什么是linux\">#</a> 什么是 Linux</h2>\n<h3 id=\"linux-系统内核与-linux-发行套件的区别\"><a class=\"anchor\" href=\"#linux-系统内核与-linux-发行套件的区别\">#</a> Linux 系统内核与 Linux 发行套件的区别</h3>\n<ul>\n<li><code>Linux</code>  系统内核指的是由  <code>Linus Torvalds</code>  负责维护，提供硬件抽象层、硬盘及文件系统控制及多任务功能的系统核心程序。</li>\n<li><code>Linux</code>  发行套件系统是我们常说的  <code>Linux</code>  操作系统，也即是由  <code>Linux</code>  内核与各种常用软件的集合产品。</li>\n</ul>\n<p><strong><span class=\"blue\">总结：真正的  <code>Linux</code>  指的是系统内核，而我们常说的  <code>Linux</code>  指的是 “发行版完整的包含一些基础软件的操作系统”。</span></strong></p>\n<h3 id=\"linux-对比-windows\"><a class=\"anchor\" href=\"#linux-对比-windows\">#</a> Linux 对比 Windows</h3>\n<ol>\n<li>稳定且有效率；</li>\n<li>免费（或少许费用）；</li>\n<li>漏洞少且快速修补；</li>\n<li>多任务多用户；</li>\n<li>更加安全的用户与文件权限策略；</li>\n<li>适合小内核程序的嵌入系统；</li>\n<li>相对不耗资源。</li>\n</ol>\n<h3 id=\"linux-系统种类\"><a class=\"anchor\" href=\"#linux-系统种类\">#</a> Linux 系统种类</h3>\n<ul>\n<li>红帽企业版  <code>Linux</code>  ：  <code>RHEL</code>  是全世界内使用最广泛的  <code>Linux</code>  系统。它具有极强的性能与稳定性，是众多生成环境中使用的（收费的）系统。</li>\n<li><code>Fedora</code>  ：由红帽公司发布的桌面版系统套件，用户可以免费体验到最新的技术或工具，这些技术或工具在成熟后会被加入到  <code>RHEL</code>  系统中，因此  <code>Fedora</code>  也成为  <code>RHEL</code>  系统的试验版本。</li>\n<li><code>CentOS</code>  ：通过把  <code>RHEL</code>  系统重新编译并发布给用户免费使用的  <code>Linux</code>  系统，具有广泛的使用人群。</li>\n<li><code>Deepin</code>  ：中国发行，对优秀的开源成品进行集成和配置。</li>\n<li><code>Debian</code>  ：稳定性、安全性强，提供了免费的基础支持，在国外拥有很高的认可度和使用率。</li>\n<li><code>Ubuntu</code>  ：是一款派生自  <code>Debian</code>  的操作系统，对新款硬件具有极强的兼容能力。  <code>Ubuntu</code>  与  <code>Fedora</code>  都是极其出色的  <code>Linux</code>  桌面系统，而且  <code>Ubuntu</code>  也可用于服务器领域。</li>\n</ul>\n<h2 id=\"shell\"><a class=\"anchor\" href=\"#shell\">#</a> Shell</h2>\n<p><code>Shell</code>  这个单词的原意是 “外壳”，跟  <code>kernel</code> （内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。</p>\n<ul>\n<li><code>Shell</code>  是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（  <code>command line interface</code>  ，简写为  <code>CLI</code>  ）。  <code>Shell</code>  接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。</li>\n<li><code>Shell</code>  是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用  <code>Shell</code>  命令写出各种小程序，又称为  <code>Shell</code>  脚本。这些脚本都通过  <code>Shell</code>  的解释执行，而不通过编译。</li>\n<li><code>Shell</code>  是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</li>\n</ul>\n<h3 id=\"shell-的种类\"><a class=\"anchor\" href=\"#shell-的种类\">#</a> Shell 的种类</h3>\n<p><code>Shell</code>  有很多种，只要能给用户提供命令行环境的程序，都可以看作是  <code>Shell</code>  。</p>\n<p>历史上，主要的  <code>Shell</code>  有下面这些：</p>\n<ul>\n<li>Bourne Shell（sh）</li>\n<li>Bourne Again shell（bash）</li>\n<li>C Shell（csh）</li>\n<li>TENEX C Shell（tcsh）</li>\n<li>Korn shell（ksh）</li>\n<li>Z Shell（zsh）</li>\n<li>Friendly Interactive Shell（fish）</li>\n</ul>\n<p>其中  <code>Bash</code>  是目前最常用的  <code>Shell</code>  。  <code>MacOS</code>  中的默认  <code>Shell</code>  就是  <code>Bash</code>  。</p>\n<p>通过执行  <code>echo $SHELL</code>  命令可以查看到当前正在使用的  <code>Shell</code>  。还可以通过  <code>cat /etc/shells</code>  查看当前系统安装的所有  <code>Shell</code>  种类。</p>\n<h2 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h2>\n<h3 id=\"命令提示符\"><a class=\"anchor\" href=\"#命令提示符\">#</a> 命令提示符</h3>\n<p>进入命令行环境以后，用户会看到  <code>Shell</code>  的提示符。提示符往往是一串前缀，最后以一个美元符号  <code>$</code>  结尾，用户可以在这个符号后面输入各种命令。</p>\n<p>执行一个简单的命令  <code>pwd</code>  ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZm5e8dsxce9ufaic7hi3uZ ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/root</pre></td></tr></table></figure><p>命令解析：</p>\n<ul>\n<li>\n<p><code>root</code> ：表示用户名；</p>\n</li>\n<li>\n<p><code>iZm5e8dsxce9ufaic7hi3uZ</code> ：表示主机名；</p>\n</li>\n<li>\n<p><code>~</code> ：表示目前所在目录为家目录，其中  <code>root</code>  用户的家目录是  <code>/root</code>  普通用户的家目录在  <code>/home</code>  下；</p>\n</li>\n<li>\n<p><code>#</code> ：指示你所具有的权限（  <code>root</code>  用户为  <code>#</code>  ，普通用户为  <code>$</code>  ）。</p>\n</li>\n<li>\n<p>执行  <code>whoami</code>  命令可以查看当前用户名；</p>\n</li>\n<li>\n<p>执行  <code>hostname</code>  命令可以查看当前主机名；</p>\n</li>\n</ul>\n<p>关于如何创建、切换、删除用户，在后面的用户与权限会具体讲解，这里先使用  <code>root</code>  用户进行演示。</p>\n<blockquote>\n<p><code>root</code>  是超级用户，具备操作系统的一切权限。</p>\n</blockquote>\n<h3 id=\"命令格式\"><a class=\"anchor\" href=\"#命令格式\">#</a> 命令格式</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">command</span> parameters（命令 参数）</pre></td></tr></table></figure><h4 id=\"长短参数\"><a class=\"anchor\" href=\"#长短参数\">#</a> 长短参数</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>单个参数：ls -a（a 是英文 all 的缩写，表示“全部”）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>多个参数：ls -al（全部文件 + 列表形式展示）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>单个长参数：ls --all</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>多个长参数：ls --reverse --all</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>长短混合参数：ls --all -l</pre></td></tr></table></figure><h4 id=\"参数值\"><a class=\"anchor\" href=\"#参数值\">#</a> 参数值</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>短参数：command -p <span class=\"token number\">10</span>（例如：ssh root@121.42.11.34 -p <span class=\"token number\">22</span>）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>长参数：command --paramters<span class=\"token operator\">=</span><span class=\"token number\">10</span>（例如：ssh root@121.42.11.34 --port<span class=\"token operator\">=</span><span class=\"token number\">22</span>）</pre></td></tr></table></figure><h2 id=\"快捷方式\"><a class=\"anchor\" href=\"#快捷方式\">#</a> 快捷方式</h2>\n<blockquote>\n<p>在开始使用 <code>Linux</code>  命令之前，有这么一些快捷方式，是必须要提前掌握的，它将贯穿整个  <code>Linux</code>  使用生涯。</p>\n</blockquote>\n<ul>\n<li>通过上下方向键 ↑ ↓ 来调取过往执行过的  <code>Linux</code>  命令；</li>\n<li>命令或参数仅需输入前几位就可以用  <code>Tab</code>  键补全；</li>\n<li><code>Ctrl + R</code>  ：用于查找使用过的命令（ <code>history</code>  命令用于列出之前使用过的所有命令，然后输入  <code>!</code>  命令加上编号 (  <code>!2</code>  ) 就可以直接执行该历史命令）；</li>\n<li><code>Ctrl + L</code> ：清除屏幕并将当前行移到页面顶部；</li>\n<li><code>Ctrl + C</code> ：中止当前正在执行的命令；</li>\n<li><code>Ctrl + U</code> ：从光标位置剪切到行首；</li>\n<li><code>Ctrl + K</code> ：从光标位置剪切到行尾；</li>\n<li><code>Ctrl + W</code> ：剪切光标左侧的一个单词；</li>\n<li><code>Ctrl + Y</code> ：粘贴  <code>Ctrl + U | K | Y</code>  剪切的命令；</li>\n<li><code>Ctrl + A</code> ：光标跳到命令行的开头；</li>\n<li><code>Ctrl + E</code> ：光标跳到命令行的结尾；</li>\n<li><code>Ctrl + D</code> ：关闭  <code>Shell</code>  会话；</li>\n</ul>\n<h2 id=\"文件和目录\"><a class=\"anchor\" href=\"#文件和目录\">#</a> 文件和目录</h2>\n<h3 id=\"文件的组织\"><a class=\"anchor\" href=\"#文件的组织\">#</a> 文件的组织</h3>\n<p><img data-src=\"/assets/2022-8/1.png\" alt=\"image.png\" /></p>\n<h3 id=\"查看路径\"><a class=\"anchor\" href=\"#查看路径\">#</a> 查看路径</h3>\n<h4 id=\"pwd\"><a class=\"anchor\" href=\"#pwd\">#</a> pwd</h4>\n<p>显示当前目录的路径</p>\n<p><img data-src=\"/assets/2022-8/2.png\" alt=\"image.png\" /></p>\n<h4 id=\"which\"><a class=\"anchor\" href=\"#which\">#</a> which</h4>\n<p>查看命令的可执行文件所在路径，  <code>Linux</code>  下，每一条命令其实都对应一个可执行程序，在终端中输入命令，按回车的时候，就是执行了对应的那个程序，  <code>which</code>  命令本身对应的程序也存在于  <code>Linux</code>  中。</p>\n<p>总的来说一个命令就是一个可执行程序。</p>\n<p><img data-src=\"/assets/2022-8/3.png\" alt=\"image.png\" /></p>\n<h3 id=\"浏览和切换目录\"><a class=\"anchor\" href=\"#浏览和切换目录\">#</a> 浏览和切换目录</h3>\n<h4 id=\"ls\"><a class=\"anchor\" href=\"#ls\">#</a> ls</h4>\n<p>列出文件和目录，它是  <code>Linux</code>  最常用的命令之一。</p>\n<p>【常用参数】</p>\n<ul>\n<li><code>-a</code>  显示所有文件和目录包括隐藏的</li>\n<li><code>-l</code>  显示详细列表</li>\n<li><code>-h</code>  适合人类阅读的</li>\n<li><code>-t</code>  按文件最近一次修改时间排序</li>\n<li><code>-i</code>  显示文件的  <code>inode</code>  （  <code>inode</code>  是文件内容的标识）</li>\n</ul>\n<p><img data-src=\"/assets/2022-8/4.png\" alt=\"image.png\" /></p>\n<h4 id=\"cd\"><a class=\"anchor\" href=\"#cd\">#</a> cd</h4>\n<p><code>cd</code>  是英语  <code>change directory</code>  的缩写，表示切换目录。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /\t--<span class=\"token operator\">></span> 跳转到根目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~\t--<span class=\"token operator\">></span> 跳转到家目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\t--<span class=\"token operator\">></span> 跳转到上级目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ./home\t--<span class=\"token operator\">></span> 跳转到当前目录的home目录下</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /home/lion\t--<span class=\"token operator\">></span> 跳转到根目录下的home目录下的lion目录</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">cd</span>\t--<span class=\"token operator\">></span> 不添加任何参数，也是回到家目录</pre></td></tr></table></figure><blockquote>\n<p>输入 <code>cd /ho</code>  + 单次  <code>tab</code>  键会自动补全路径 + 两次  <code>tab</code>  键会列出所有可能的目录列表。</p>\n</blockquote>\n<h4 id=\"du\"><a class=\"anchor\" href=\"#du\">#</a> du</h4>\n<p>列举目录大小信息。</p>\n<p>【常用参数】</p>\n<ul>\n<li><code>-h</code>  适合人类阅读的；</li>\n<li><code>-a</code>  同时列举出目录下文件的大小信息；</li>\n<li><code>-s</code>  只显示总计大小，不显示具体信息。</li>\n</ul>\n<h3 id=\"浏览和创建文件\"><a class=\"anchor\" href=\"#浏览和创建文件\">#</a> 浏览和创建文件</h3>\n<h4 id=\"cat\"><a class=\"anchor\" href=\"#cat\">#</a> cat</h4>\n<p>一次性显示文件所有内容，更适合查看小的文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> cloud-init.log</pre></td></tr></table></figure><p>【常用参数】</p>\n<ul>\n<li><code>-n</code>  显示行号。</li>\n</ul>\n<h4 id=\"less\"><a class=\"anchor\" href=\"#less\">#</a> less</h4>\n<p>分页显示文件内容，更适合查看大的文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">less</span> cloud-init.log</pre></td></tr></table></figure><p>【快捷操作】</p>\n<ul>\n<li>空格键：前进一页（一个屏幕）；</li>\n<li><code>b</code>  键：后退一页；</li>\n<li>回车键：前进一行；</li>\n<li><code>y</code>  键：后退一行；</li>\n<li>上下键：回退或前进一行；</li>\n<li><code>d</code>  键：前进半页；</li>\n<li><code>u</code>  键：后退半页；</li>\n<li><code>q</code>  键：停止读取文件，中止  <code>less</code>  命令；</li>\n<li><code>=</code>  键：显示当前页面的内容是文件中的第几行到第几行以及一些其它关于本页内容的详细信息；</li>\n<li><code>h</code>  键：显示帮助文档；</li>\n<li><code>/</code>  键：进入搜索模式后，按  <code>n</code>  键跳到一个符合项目，按  <code>N</code>  键跳到上一个符合项目，同时也可以输入正则表达式匹配。</li>\n</ul>\n<h4 id=\"head\"><a class=\"anchor\" href=\"#head\">#</a> head</h4>\n<p>显示文件的开头几行（默认是 10 行）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">head</span> cloud-init.log</pre></td></tr></table></figure><p>【参数】</p>\n<ul>\n<li><code>-n</code>  指定行数  <code>head cloud-init.log -n 2</code></li>\n</ul>\n<h4 id=\"tail\"><a class=\"anchor\" href=\"#tail\">#</a> tail</h4>\n<p>显示文件的结尾几行（默认是 10 行）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tail</span> cloud-init.log</pre></td></tr></table></figure><p>【参数】</p>\n<ul>\n<li><code>-n</code>  指定行数  <code>tail cloud-init.log -n 2</code></li>\n<li><code>-f</code>  会每过 1 秒检查下文件是否有更新内容，也可以用  <code>-s</code>  参数指定间隔时间  <code>tail -f -s 4 xxx.log</code></li>\n</ul>\n<h4 id=\"touch\"><a class=\"anchor\" href=\"#touch\">#</a> touch</h4>\n<p>创建一个文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> new_file</pre></td></tr></table></figure><h4 id=\"mkdir\"><a class=\"anchor\" href=\"#mkdir\">#</a> mkdir</h4>\n<p>创建一个目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> new_folder</pre></td></tr></table></figure><p>【常用参数】</p>\n<ul>\n<li><code>-p</code>  递归的创建目录结构  <code>mkdir -p one/two/three</code></li>\n</ul>\n<h3 id=\"文件的复制和移动\"><a class=\"anchor\" href=\"#文件的复制和移动\">#</a> 文件的复制和移动</h3>\n<h4 id=\"cp\"><a class=\"anchor\" href=\"#cp\">#</a> cp</h4>\n<p>拷贝文件和目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token function\">file</span> file_copy\t--<span class=\"token operator\">></span> <span class=\"token function\">file</span> 是目标文件，file_copy 是拷贝出来的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token function\">file</span> one\t--<span class=\"token operator\">></span> 把 <span class=\"token function\">file</span> 文件拷贝到 one 目录下，并且文件名依然为 <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token function\">file</span> one/file_copy\t--<span class=\"token operator\">></span> 把 <span class=\"token function\">file</span> 文件拷贝到 one 目录下，文件名为file_copy</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cp</span> *.txt folder\t--<span class=\"token operator\">></span> 把当前目录下所有 txt 文件拷贝到 folder 目录下</pre></td></tr></table></figure><p>【常用参数】</p>\n<ul>\n<li><code>-r</code>  递归的拷贝，常用来拷贝一整个目录</li>\n</ul>\n<h4 id=\"mv\"><a class=\"anchor\" href=\"#mv\">#</a> mv</h4>\n<p>移动（重命名）文件或目录，与 cp 命令用法相似。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token function\">file</span> one\t--<span class=\"token operator\">></span> 将 <span class=\"token function\">file</span> 文件移动到 one 目录下</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> new_folder one\t--<span class=\"token operator\">></span> 将 new_folder 文件夹移动到one目录下</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mv</span> *.txt folder\t--<span class=\"token operator\">></span> 把当前目录下所有 txt 文件移动到 folder 目录下</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mv</span> <span class=\"token function\">file</span> new_file\t--<span class=\"token operator\">></span> <span class=\"token function\">file</span> 文件重命名为 new_file</pre></td></tr></table></figure><h3 id=\"文件的删除和链接\"><a class=\"anchor\" href=\"#文件的删除和链接\">#</a> 文件的删除和链接</h3>\n<h4 id=\"rm\"><a class=\"anchor\" href=\"#rm\">#</a> rm</h4>\n<p>删除文件和目录，由于  <code>Linux</code>  下没有回收站，一旦删除非常难恢复，因此需要谨慎操作</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> new_file \t--<span class=\"token operator\">></span> 删除 new_file 文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rm</span> f1 f2 f3 \t--<span class=\"token operator\">></span> 同时删除 f1 f2 f3 <span class=\"token number\">3</span>个文件</pre></td></tr></table></figure><p>【常用参数】</p>\n<ul>\n<li><code>-i</code>  向用户确认是否删除；</li>\n<li><code>-f</code>  文件强制删除；</li>\n<li><code>-r</code>  递归删除文件夹，著名的删除操作  <code>rm -rf</code>  。</li>\n</ul>\n<h4 id=\"ln\"><a class=\"anchor\" href=\"#ln\">#</a> ln</h4>\n<p>英文  <code>Link</code>  的缩写，表示创建链接。</p>\n<p>学习创建链接之前，首先要理解链接是什么，我们先来看看  <code>Linux</code>  的文件是如何存储的：</p>\n<p><code>Linux</code>  文件的存储方式分为 3 个部分，文件名、文件内容以及权限，其中文件名的列表是存储在硬盘的其它地方和文件内容是分开存放的，每个文件名通过  <code>inode</code>  标识绑定到文件内容。</p>\n<blockquote>\n<p>Linux 下有两种链接类型：<strong>硬链接</strong>和<strong>软链接</strong>。</p>\n</blockquote>\n<h5 id=\"硬链接\"><a class=\"anchor\" href=\"#硬链接\">#</a> 硬链接</h5>\n<p>使链接的两个文件共享同样文件内容，就是同样的  <code>inode</code>  ，一旦文件 1 和文件 2 之间有了硬链接，那么修改任何一个文件，修改的都是同一块内容，它的缺点是，只能创建指向文件的硬链接，不能创建指向目录的（其实也可以，但比较复杂）而软链接都可以，因此软链接使用更加广泛。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> file1 file2 \t--<span class=\"token operator\">></span> 创建 file2 为 file1 的硬链接</pre></td></tr></table></figure><p><img data-src=\"/assets/2022-8/5.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p>如果我们用  <code>rm file1</code>  来删除  <code>file1</code>  ，对  <code>file2</code>  没有什么影响，对于硬链接来说，删除任意一方的文件，共同指向的文件内容并不会从硬盘上删除。只有同时删除了  <code>file1</code>  与  <code>file2</code>  后，它们共同指向的文件内容才会消失。</p>\n</blockquote>\n<h5 id=\"软链接\"><a class=\"anchor\" href=\"#软链接\">#</a> 软链接</h5>\n<p>软链接就类似  <code>windows</code>  下快捷方式。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> -s file1 file2</pre></td></tr></table></figure><p><img data-src=\"/assets/2022-8/6.png\" alt=\"image.png\" /></p>\n<p>执行  <code>ls -l</code>  命名查看当前目录下文件的具体信息</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>total <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">0</span> Jan <span class=\"token number\">14</span> 06:29 file1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lrwxrwxrwx <span class=\"token number\">1</span> root root <span class=\"token number\">5</span> Jan <span class=\"token number\">14</span> 06:42 file2 -<span class=\"token operator\">></span> file1  <span class=\"token comment\"># 表示 file2 指向 file1</span></pre></td></tr></table></figure><blockquote>\n<p>其实  <code>file2</code>  只是  <code>file1</code>  的一个快捷方式，它指向的是  <code>file1</code>  ，所以显示的是  <code>file1</code>  的内容，但其实  <code>file2</code>  的  <code>inode</code>  与  <code>file1</code>  并不相同。如果我们删除了  <code>file2</code>  的话，  <code>file1</code>  是不会受影响的，但如果删除  <code>file1</code>  的话，  <code>file2</code>  就会变成死链接，因为指向的文件不见了。</p>\n</blockquote>\n<h2 id=\"用户与权限\"><a class=\"anchor\" href=\"#用户与权限\">#</a> 用户与权限</h2>\n<h3 id=\"用户\"><a class=\"anchor\" href=\"#用户\">#</a> 用户</h3>\n<p><code>Linux</code>  是一个多用户的操作系统。在  <code>Linux</code>  中，理论上来说，我们可以创建无数个用户，但是这些用户是被划分到不同的群组里面的，有一个用户，名叫  <code>root</code>  ，是一个很特殊的用户，它是超级用户，拥有最高权限。</p>\n<p><img data-src=\"/assets/2022-8/7.png\" alt=\"image.png\" /></p>\n<p>自己创建的用户是有限权限的用户，这样大大提高了  <code>Linux</code>  系统的安全性，有效防止误操作或是病毒攻击，但是我们执行的某些命令需要更高权限时可以使用  <code>sudo</code>  命令。</p>\n<h4 id=\"sudo\"><a class=\"anchor\" href=\"#sudo\">#</a> sudo</h4>\n<p>以  <code>root</code>  身份运行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">date</span>  --<span class=\"token operator\">></span> 当然查看日期是不需要sudo的这里只是演示，sudo 完之后一般还需要输入用户密码的</pre></td></tr></table></figure><h4 id=\"useradd-passwd\"><a class=\"anchor\" href=\"#useradd-passwd\">#</a> useradd + passwd</h4>\n<ul>\n<li><code>useradd</code>  添加新用户</li>\n<li><code>passwd</code>  修改用户密码</li>\n</ul>\n<p>这两个命令需要  <code>root</code>  用户权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> lion\t--<span class=\"token operator\">></span> 添加一个lion用户，添加完之后在 /home 路径下可以查看</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span> lion\t--<span class=\"token operator\">></span> 修改lion用户的密码</pre></td></tr></table></figure><h4 id=\"userdel\"><a class=\"anchor\" href=\"#userdel\">#</a> userdel</h4>\n<p>删除用户，需要  <code>root</code>  用户权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">userdel</span> lion\t--<span class=\"token operator\">></span> 只会删除用户名，不会从/home中删除对应文件夹</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">userdel</span> lion -r\t--<span class=\"token operator\">></span> 会同时删除/home下的对应文件夹</pre></td></tr></table></figure><h4 id=\"su\"><a class=\"anchor\" href=\"#su\">#</a> su</h4>\n<p>切换用户，需要  <code>root</code>  用户权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">su</span>\t--<span class=\"token operator\">></span> 切换为root用户（exit 命令或 CTRL + D 快捷键都可以使普通用户切换为 root 用户）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">su</span> lion\t--<span class=\"token operator\">></span> 切换为普通用户</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">su</span> -\t--<span class=\"token operator\">></span> 切换为root用户</pre></td></tr></table></figure><h3 id=\"群组的管理\"><a class=\"anchor\" href=\"#群组的管理\">#</a> 群组的管理</h3>\n<p><code>Linux</code>  中每个用户都属于一个特定的群组，如果你不设置用户的群组，默认会创建一个和它的用户名一样的群组，并且把用户划归到这个群组。</p>\n<h4 id=\"groupadd\"><a class=\"anchor\" href=\"#groupadd\">#</a> groupadd</h4>\n<p>创建群组，用法和  <code>useradd</code>  类似。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groupadd</span> friends</pre></td></tr></table></figure><h4 id=\"groupdel\"><a class=\"anchor\" href=\"#groupdel\">#</a> groupdel</h4>\n<p>删除一个已存在的群组</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groupdel</span> foo \t--<span class=\"token operator\">></span> 删除foo群组</pre></td></tr></table></figure><h4 id=\"groups\"><a class=\"anchor\" href=\"#groups\">#</a> groups</h4>\n<p>查看用户所在群组</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groups</span> lion \t--<span class=\"token operator\">></span> 查看 lion 用户所在的群组</pre></td></tr></table></figure><h4 id=\"usermod\"><a class=\"anchor\" href=\"#usermod\">#</a> usermod</h4>\n<p>用于修改用户的账户。</p>\n<p>【常用参数】</p>\n<ul>\n<li><code>-l</code>  对用户重命名。需要注意的是  <code>/home</code>  中的用户家目录的名字不会改变，需要手动修改。</li>\n<li><code>-g</code>  修改用户所在的群组，例如  <code>usermod -g friends lion </code>  修改  <code>lion</code>  用户的群组为  <code>friends</code>  。</li>\n<li><code>-G</code>  一次性让用户添加多个群组，例如  <code>usermod -G friends,foo,bar lion</code>  。</li>\n<li><code>-a</code>   <code>-G</code>  会让你离开原先的群组，如果你不想这样做的话，就得再添加  <code>-a</code>  参数，意味着  <code>append</code>  追加的意思。</li>\n</ul>\n<h4 id=\"chgrp\"><a class=\"anchor\" href=\"#chgrp\">#</a> chgrp</h4>\n<p>用于修改文件的群组。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chgrp</span> bar file.txt\t--<span class=\"token operator\">></span> file.txt文件的群组修改为bar</pre></td></tr></table></figure><h4 id=\"chown\"><a class=\"anchor\" href=\"#chown\">#</a> chown</h4>\n<p>改变文件的所有者，需要  <code>root</code>  身份才能运行。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chown</span> lion file.txt\t--<span class=\"token operator\">></span> 把其它用户创建的file.txt转让给lion用户</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chown</span> lion:bar file.txt\t--<span class=\"token operator\">></span> 把file.txt的用户改为lion，群组改为bar</pre></td></tr></table></figure><p>【常用参数】</p>\n<ul>\n<li><code>-R</code>  递归设置子目录和子文件，  <code>chown -R lion:lion /home/frank</code>  把  <code>frank</code>  文件夹的用户和群组都改为  <code>lion</code>  。</li>\n</ul>\n<h3 id=\"文件权限管理\"><a class=\"anchor\" href=\"#文件权限管理\">#</a> 文件权限管理</h3>\n<h4 id=\"chmod\"><a class=\"anchor\" href=\"#chmod\">#</a> chmod</h4>\n<p>修改访问权限。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">740</span> file.txt</pre></td></tr></table></figure><p>【常用参数】</p>\n<ul>\n<li><code>-R</code>  可以递归地修改文件访问权限，例如  <code>chmod -R 777 /home/lion</code></li>\n</ul>\n<p>修改权限的确简单，但是理解其深层次的意义才是更加重要的。下面我们来系统的了解  <code>Linux</code>  的文件权限。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls -l</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>drwxr-xr-x <span class=\"token number\">5</span> root root <span class=\"token number\">4096</span> Apr <span class=\"token number\">13</span>  <span class=\"token number\">2020</span> climb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lrwxrwxrwx <span class=\"token number\">1</span> root root    <span class=\"token number\">7</span> Jan <span class=\"token number\">14</span> 06:41 hello2.c -<span class=\"token operator\">></span> hello.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">149</span> Jan <span class=\"token number\">13</span> 06:14 hello.c</pre></td></tr></table></figure><p>其中  <code>drwxr-xr-x</code>  表示文件或目录的权限。让我们一起来解读它具体代表什么？</p>\n<ul>\n<li><code>d</code>  ：表示目录，就是说这是一个目录，普通文件是  <code>-</code>  ，链接是  <code>l</code>  。</li>\n<li><code>r</code>  ：  <code>read</code>  表示文件可读。</li>\n<li><code>w</code>  ：  <code>write</code>  表示文件可写，一般有写的权限，就有删除的权限。</li>\n<li><code>x</code>  ：  <code>execute</code>  表示文件可执行。</li>\n<li><code>-</code>  ：表示没有相应权限。</li>\n</ul>\n<p>权限的整体是按用户来划分的，如下图所示：</p>\n<p><img data-src=\"/assets/2022-8/8.png\" alt=\"image.png\" /></p>\n<p>现在再来理解这句权限  <code>drwxr-xr-x</code>  的意思：</p>\n<ul>\n<li>它是一个文件夹；</li>\n<li>它的所有者具有：读、写、执行权限；</li>\n<li>它的群组用户具有：读、执行的权限，没有写的权限；</li>\n<li>它的其它用户具有：读、执行的权限，没有写的权限。</li>\n</ul>\n<p>现在理解了权限，我们使用  <code>chmod</code>  来尝试修改权限。  <code>chmod</code>  它不需要是  <code>root</code>  用户才能运行的，只要你是此文件所有者，就可以用  <code>chmod</code>  来修改文件的访问权限。</p>\n<h5 id=\"数字分配权限\"><a class=\"anchor\" href=\"#数字分配权限\">#</a> 数字分配权限</h5>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>4</td>\n</tr>\n<tr>\n<td>w</td>\n<td>2</td>\n</tr>\n<tr>\n<td>x</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>因此要改变权限，只要做一些简单的加法就行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">640</span> hello.c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 分析</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> + <span class=\"token number\">2</span> + <span class=\"token number\">0</span> 表示所有者具有 rw 权限</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> + <span class=\"token number\">0</span> + <span class=\"token number\">0</span> 表示群组用户具有 r 权限</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> + <span class=\"token number\">0</span> + <span class=\"token number\">0</span> 表示其它用户没有权限</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>对应文字权限为：-rw-r-----</pre></td></tr></table></figure><h5 id=\"用字母来分配权限\"><a class=\"anchor\" href=\"#用字母来分配权限\">#</a> 用字母来分配权限</h5>\n<ul>\n<li><code>u</code>  ：  <code>user</code>  的缩写，用户的意思，表示所有者。</li>\n<li><code>g</code>  ：  <code>group</code>  的缩写，群组的意思，表示群组用户。</li>\n<li><code>o</code>  ：  <code>other</code>  的缩写，其它的意思，表示其它用户。</li>\n<li><code>a</code>  ：  <code>all</code>  的缩写，所有的意思，表示所有用户。</li>\n<li><code>+</code>  ：加号，表示添加权限。</li>\n<li><code>-</code>  ：减号，表示去除权限。</li>\n<li><code>=</code>  ：等于号，表示分配权限。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> u+rx <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的所有者增加读和运行的权限</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> g+r <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的群组用户增加读的权限</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> o-r <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的其它用户移除读的权限</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">chmod</span> g+r o-r <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的群组用户增加读的权限，其它用户移除读的权限</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">chmod</span> go-r <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的群组和其他用户移除读的权限</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">chmod</span> +x <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的所有用户增加运行的权限</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">u</span><span class=\"token operator\">=</span>rwx,g<span class=\"token operator\">=</span>r,o<span class=\"token operator\">=</span>- <span class=\"token function\">file</span>\t--<span class=\"token operator\">></span> 文件file的所有者分配读写和执行的权限，群组其它用户分配读的权限，其他用户没有任何权限</pre></td></tr></table></figure><h2 id=\"查找文件\"><a class=\"anchor\" href=\"#查找文件\">#</a> 查找文件</h2>\n<h3 id=\"locate\"><a class=\"anchor\" href=\"#locate\">#</a> locate</h3>\n<p>搜索包含关键字的所有文件和目录。后接需要查找的文件名，也可以用正则表达式。</p>\n<h4 id=\"安装-locate\"><a class=\"anchor\" href=\"#安装-locate\">#</a> 安装 locate</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> mlocate\t--<span class=\"token operator\">></span> 安装包</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>updatedb\t--<span class=\"token operator\">></span> 更新数据库</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">locate</span> file.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">locate</span> fil*.txt</pre></td></tr></table></figure><blockquote>\n<p><code>locate</code>  命令会去文件数据库中查找命令，而不是全磁盘查找，因此刚创建的文件并不会更新到数据库中，所以无法被查找到，可以执行  <code>updatedb</code>  命令去更新数据库。</p>\n</blockquote>\n<h3 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find</h3>\n<p>用于查找文件，它会去遍历你的实际硬盘进行查找，而且它允许我们对每个找到的文件进行后续操作，功能非常强大。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token operator\">&lt;</span>何处<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>何物<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>做什么<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>何处：指定在哪个目录查找，此目录的所有子目录也会被查找。</li>\n<li>何物：查找什么，可以根据文件的名字来查找，也可以根据其大小来查找，还可以根据其最近访问时间来查找。</li>\n<li>做什么：找到文件后，可以进行后续处理，如果不指定这个参数，  <code>find</code>  命令只会显示找到的文件。</li>\n</ul>\n<h4 id=\"根据文件名查找\"><a class=\"anchor\" href=\"#根据文件名查找\">#</a> 根据文件名查找</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> -name <span class=\"token string\">\"file.txt\"</span>\t--<span class=\"token operator\">></span> 当前目录以及子目录下通过名称查找文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -name <span class=\"token string\">\"syslog\"</span>\t--<span class=\"token operator\">></span> 当前目录以及子目录下通过名称查找文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">find</span> / -name <span class=\"token string\">\"syslog\"</span>\t--<span class=\"token operator\">></span> 整个硬盘下查找syslog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">find</span> /var/log -name <span class=\"token string\">\"syslog\"</span>\t--<span class=\"token operator\">></span> 在指定的目录/var/log下查找syslog文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">find</span> /var/log -name <span class=\"token string\">\"syslog*\"</span>\t--<span class=\"token operator\">></span> 查找syslog1、syslog2 <span class=\"token punctuation\">..</span>. 等文件，通配符表示所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">find</span> /var/log -name <span class=\"token string\">\"*syslog*\"</span>\t--<span class=\"token operator\">></span> 查找包含syslog的文件</pre></td></tr></table></figure><blockquote>\n<p><code>find</code>  命令只会查找完全符合 “何物” 字符串的文件，而  <code>locate</code>  会查找所有包含关键字的文件。</p>\n</blockquote>\n<h4 id=\"根据文件大小查找\"><a class=\"anchor\" href=\"#根据文件大小查找\">#</a> 根据文件大小查找</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> /var -size +10M\t--<span class=\"token operator\">></span> /var 目录下查找文件大小超过 10M 的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> /var -size -50k\t--<span class=\"token operator\">></span> /var 目录下查找文件大小小于 50k 的文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">find</span> /var -size +1G\t--<span class=\"token operator\">></span> /var 目录下查找文件大小查过 1G 的文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">find</span> /var -size 1M\t--<span class=\"token operator\">></span> /var 目录下查找文件大小等于 1M 的文件</pre></td></tr></table></figure><h4 id=\"根据文件最近访问时间查找\"><a class=\"anchor\" href=\"#根据文件最近访问时间查找\">#</a> 根据文件最近访问时间查找</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> -name <span class=\"token string\">\"*.txt\"</span> -atime -7 \t--<span class=\"token operator\">></span> 近 <span class=\"token number\">7</span>天内访问过的.txt结尾的文件</pre></td></tr></table></figure><h4 id=\"仅查找目录或文件\"><a class=\"anchor\" href=\"#仅查找目录或文件\">#</a> 仅查找目录或文件</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -name <span class=\"token string\">\"file\"</span> -type f \t--<span class=\"token operator\">></span> 只查找当前目录下的file文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -name <span class=\"token string\">\"file\"</span> -type d \t--<span class=\"token operator\">></span> 只查找当前目录下的file目录</pre></td></tr></table></figure><h4 id=\"操作查找结果\"><a class=\"anchor\" href=\"#操作查找结果\">#</a> 操作查找结果</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> -name <span class=\"token string\">\"*.txt\"</span> -printf <span class=\"token string\">\"%p - %u<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>\t--<span class=\"token operator\">></span> 找出所有后缀为txt的文件，并按照 %p - %u<span class=\"token punctuation\">\\</span>n 格式打印，其中%p<span class=\"token operator\">=</span>文件名，%u<span class=\"token operator\">=</span>文件所有者</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> -name <span class=\"token string\">\"*.jpg\"</span> -delete\t--<span class=\"token operator\">></span> 删除当前目录以及子目录下所有.jpg为后缀的文件，不会有删除提示，因此要慎用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">find</span> -name <span class=\"token string\">\"*.c\"</span> -exec <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\t--<span class=\"token operator\">></span> 对每个.c结尾的文件，都进行 -exec 参数指定的操作，<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> 会被查找到的文件替代，<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span> 是必须的结尾</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">find</span> -name <span class=\"token string\">\"*.c\"</span> -ok <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\t--<span class=\"token operator\">></span> 和上面的功能一直，会多一个确认提示</pre></td></tr></table></figure><h2 id=\"软件仓库\"><a class=\"anchor\" href=\"#软件仓库\">#</a> 软件仓库</h2>\n<p><code>Linux</code>  下软件是以包的形式存在，一个软件包其实就是软件的所有文件的压缩包，是二进制的形式，包含了安装软件的所有指令。  <code>Red Hat</code>  家族的软件包后缀名一般为  <code>.rpm</code>  ，  <code>Debian</code>  家族的软件包后缀是  <code>.deb</code>  。</p>\n<p><code>Linux</code>  的包都存在一个仓库，叫做软件仓库，它可以使用  <code>yum</code>  来管理软件包，  <code>yum</code>  是  <code>CentOS</code>  中默认的包管理工具，适用于  <code>Red Hat</code>  一族。可以理解成  <code>Node.js</code>  的  <code>npm</code>  。</p>\n<h3 id=\"yum-常用命令\"><a class=\"anchor\" href=\"#yum-常用命令\">#</a> yum 常用命令</h3>\n<ul>\n<li><code>yum update | yum upgrade</code>  更新软件包</li>\n<li><code>yum search xxx</code>  搜索相应的软件包</li>\n<li><code>yum install xxx</code>  安装软件包</li>\n<li><code>yum remove xxx</code>  删除软件包</li>\n</ul>\n<h3 id=\"切换-centos-软件源\"><a class=\"anchor\" href=\"#切换-centos-软件源\">#</a> 切换 CentOS 软件源</h3>\n<p>有时候  <code>CentOS</code>  默认的  <code>yum</code>  源不一定是国内镜像，导致  <code>yum</code>  在线安装及更新速度不是很理想。这时候需要将  <code>yum</code>  源设置为国内镜像站点。国内主要开源的镜像站点是网易和阿里云。</p>\n<ol>\n<li>首先备份系统自带  <code>yum</code>  源配置文件  <code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code></li>\n<li>下载阿里云的  <code>yum</code>  源配置文件到  <code>/etc/yum.repos.d/CentOS7</code></li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</pre></td></tr></table></figure><ol start=\"3\">\n<li>生成缓存</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum makecache</pre></td></tr></table></figure><h1 id=\"linux-进阶\"><a class=\"anchor\" href=\"#linux-进阶\">#</a> Linux 进阶</h1>\n<h2 id=\"文本操作\"><a class=\"anchor\" href=\"#文本操作\">#</a> 文本操作</h2>\n<h3 id=\"grep\"><a class=\"anchor\" href=\"#grep\">#</a> grep</h3>\n<p>全局搜索一个正则表达式，并且打印到屏幕。简单来说就是，在文件中查找关键字，并显示关键字所在行。</p>\n<h4 id=\"基础语法\"><a class=\"anchor\" href=\"#基础语法\">#</a> 基础语法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> text <span class=\"token function\">file</span> <span class=\"token comment\"># text 代表要搜索的文本，file 代表供搜索的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep path /etc/profile</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function-name function\">pathmunge</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    pathmunge /usr/sbin</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pathmunge /usr/local/sbin</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pathmunge /usr/local/sbin after</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pathmunge /usr/sbin after</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">unset</span> -f pathmunge</pre></td></tr></table></figure><h4 id=\"常用参数\"><a class=\"anchor\" href=\"#常用参数\">#</a> 常用参数</h4>\n<ul>\n<li><code>-i</code>  忽略大小写，  <code>grep -i path /etc/profile</code></li>\n<li><code>-n</code>  显示行号， <code>grep -n path /etc/profile</code></li>\n<li><code>-v</code>  只显示搜索文本不在的那些行， <code>grep -v path /etc/profile</code></li>\n<li><code>-r</code>  递归查找，  <code>grep -r hello /etc</code>  ，Linux 中还有一个 rgrep 命令，作用相当于  <code>grep -r</code></li>\n</ul>\n<h4 id=\"高级用法\"><a class=\"anchor\" href=\"#高级用法\">#</a> 高级用法</h4>\n<p><code>grep</code>  可以配合正则表达式使用。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> -E path /etc/profile --<span class=\"token operator\">></span> 完全匹配path</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">grep</span> -E ^path /etc/profile --<span class=\"token operator\">></span> 匹配path开头的字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">grep</span> -E <span class=\"token punctuation\">[</span>Pp<span class=\"token punctuation\">]</span>ath /etc/profile --<span class=\"token operator\">></span> 匹配path或Path</pre></td></tr></table></figure><h3 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a> sort</h3>\n<p>对文件的行进行排序。</p>\n<h4 id=\"基础语法-2\"><a class=\"anchor\" href=\"#基础语法-2\">#</a> 基础语法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span> name.txt <span class=\"token comment\"># 对 name.txt 文件进行排序</span></pre></td></tr></table></figure><h4 id=\"实例用法\"><a class=\"anchor\" href=\"#实例用法\">#</a> 实例用法</h4>\n<p>为了演示方便，我们首先创建一个文件  <code>name.txt</code>  ，放入以下内容：</p>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Christopher</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Shawn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Ted</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Rock</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Noah</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Zachary</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Bella</pre></td></tr></table></figure><p>执行  <code>sort name.txt</code>  命令，会对文本内容进行排序。</p>\n<h4 id=\"常用参数-2\"><a class=\"anchor\" href=\"#常用参数-2\">#</a> 常用参数</h4>\n<ul>\n<li><code>-o</code>  将排序后的文件写入新文件，  <code>sort -o name_sorted.txt name.txt</code>  ；</li>\n<li><code>-r</code>  倒序排序，  <code>sort -r name.txt</code>  ；</li>\n<li><code>-R</code>  随机排序，  <code>sort -R name.txt</code>  ；</li>\n<li><code>-n</code>  对数字进行排序，默认是把数字识别成字符串的，因此 138 会排在 25 前面，如果添加了  <code>-n</code>  数字排序的话，则 25 会在 138 前面。</li>\n</ul>\n<h3 id=\"wc\"><a class=\"anchor\" href=\"#wc\">#</a> wc</h3>\n<p><code>word count</code>  的缩写，用于文件的统计。它可以统计单词数目、行数、字符数，字节数等。</p>\n<h4 id=\"基础语法-3\"><a class=\"anchor\" href=\"#基础语法-3\">#</a> 基础语法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wc</span> name.txt <span class=\"token comment\"># 统计 name.txt</span></pre></td></tr></table></figure><h4 id=\"实例用法-2\"><a class=\"anchor\" href=\"#实例用法-2\">#</a> 实例用法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wc name.txt </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">13</span> <span class=\"token number\">13</span> <span class=\"token number\">91</span> name.txt</pre></td></tr></table></figure><ul>\n<li>第一个 13，表示行数；</li>\n<li>第二个 13，表示单词数；</li>\n<li>第三个 91，表示字节数。</li>\n</ul>\n<h4 id=\"常用参数-3\"><a class=\"anchor\" href=\"#常用参数-3\">#</a> 常用参数</h4>\n<ul>\n<li><code>-l</code>  只统计行数，  <code>wc -l name.txt</code>  ；</li>\n<li><code>-w</code>  只统计单词数，  <code>wc -w name.txt</code>  ；</li>\n<li><code>-c</code>  只统计字节数，  <code>wc -c name.txt</code>  ；</li>\n<li><code>-m</code>  只统计字符数，  <code>wc -m name.txt</code>  。</li>\n</ul>\n<h3 id=\"uniq\"><a class=\"anchor\" href=\"#uniq\">#</a> uniq</h3>\n<p>删除文件中的重复内容。</p>\n<h4 id=\"基础语法-4\"><a class=\"anchor\" href=\"#基础语法-4\">#</a> 基础语法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uniq</span> name.txt <span class=\"token comment\"># 去除 name.txt 重复的行数，并打印到屏幕上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">uniq</span> name.txt uniq_name.txt <span class=\"token comment\"># 把去除重复后的文件保存为 uniq_name.txt</span></pre></td></tr></table></figure><blockquote>\n<p>它只能去除连续重复的行数。</p>\n</blockquote>\n<h4 id=\"常用参数-4\"><a class=\"anchor\" href=\"#常用参数-4\">#</a> 常用参数</h4>\n<ul>\n<li><code>-c</code>  统计重复行数，  <code>uniq -c name.txt</code>  ；</li>\n<li><code>-d</code>  只显示重复的行数，  <code>uniq -d name.txt</code>  。</li>\n</ul>\n<h3 id=\"cut\"><a class=\"anchor\" href=\"#cut\">#</a> cut</h3>\n<p>剪切文件的一部分内容。</p>\n<h4 id=\"基础语法-5\"><a class=\"anchor\" href=\"#基础语法-5\">#</a> 基础语法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cut</span> -c <span class=\"token number\">2</span>-4 name.txt <span class=\"token comment\"># 剪切每一行第二到第四个字符</span></pre></td></tr></table></figure><h4 id=\"常用参数-5\"><a class=\"anchor\" href=\"#常用参数-5\">#</a> 常用参数</h4>\n<ul>\n<li><code>-d</code>  用于指定用什么分隔符（比如逗号、分号、双引号等等）  <code>cut -d , name.txt</code>  ；</li>\n<li><code>-f</code>  表示剪切下用分隔符分割的哪一块或哪几块区域，  <code>cut -d , -f 1 name.txt</code>  。</li>\n</ul>\n<h2 id=\"重定向-管道-流\"><a class=\"anchor\" href=\"#重定向-管道-流\">#</a> 重定向 管道 流</h2>\n<p>在  <code>Linux</code>  中一个命令的去向可以有 3 个地方：终端、文件、作为另外一个命令的入参。</p>\n<p><img data-src=\"/assets/2022-8/9.png\" alt=\"image.png\" /></p>\n<p>命令一般都是通过键盘输入，然后输出到终端、文件等地方，它的标准用语是  <code>stdin</code>  、  <code>stdout</code>  以及  <code>stderr</code>  。</p>\n<ul>\n<li>标准输入  <code>stdin</code>  ，终端接收键盘输入的命令，会产生两种输出；</li>\n<li>标准输出  <code>stdout</code>  ，终端输出的信息（不包含错误信息）；</li>\n<li>标准错误输出  <code>stderr</code>  ，终端输出的错误信息。</li>\n</ul>\n<p><img data-src=\"/assets/2022-8/10.png\" alt=\"image.png\" /></p>\n<h3 id=\"重定向\"><a class=\"anchor\" href=\"#重定向\">#</a> 重定向</h3>\n<p>把本来要显示在终端的命令结果，输送到别的地方（到文件中或者作为其他命令的输入）。</p>\n<h4 id=\"输出重定向\"><a class=\"anchor\" href=\"#输出重定向\">#</a> 输出重定向  <code>&gt;</code></h4>\n<p><code>&gt;</code>  表示重定向到新的文件，  <code>cut -d , -f 1 notes.csv &gt; name.csv</code>  ，它表示通过逗号剪切  <code>notes.csv</code>  文件（剪切完有 3 个部分）获取第一个部分，重定向到  <code>name.csv</code>  文件。</p>\n<p>我们来看一个具体示例，理解它的使用，假设我们有一个文件  <code>notes.csv</code>  ，文件内容如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Mark1,951/100,很不错1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Mark2,952/100,很不错2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Mark3,953/100,很不错3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Mark4,954/100,很不错4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Mark5,955/100,很不错5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Mark6,956/100,很不错6</pre></td></tr></table></figure><p>执行命令：  <code>cut -d , -f 1 notes.csv &gt; name.csv</code>  最后输出如下内容：</p>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Mark1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Mark2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Mark3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Mark4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Mark5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Mark6</pre></td></tr></table></figure><blockquote>\n<p>使用  <code>&gt;</code>  要注意，如果输出的文件不存在它会新建一个，如果输出的文件已经存在，则会覆盖。因此执行这个操作要非常小心，以免覆盖其它重要文件。</p>\n</blockquote>\n<h4 id=\"输出重定向-2\"><a class=\"anchor\" href=\"#输出重定向-2\">#</a> 输出重定向  <code>&gt;&gt;</code></h4>\n<p>表示重定向到文件末尾，因此它不会像  <code>&gt;</code>  命令这么危险，它是追加到文件的末尾（当然如果文件不存在，也会被创建）。</p>\n<p>再次执行  <code>cut -d , -f 1 notes.csv &gt;&gt; name.csv</code>  ，则会把名字追加到  <code>name.csv</code>  里面。</p>\n<pre><code>Mark1\nMark2\nMark3\nMark4\nMark5\nMark6\nMark1\nMark2\nMark3\nMark4\nMark5\nMark6\n</code></pre>\n<p>我们平时读的  <code>log</code>  日志文件其实都是用这个命令输出的。</p>\n<h4 id=\"输出重定向-2\"><a class=\"anchor\" href=\"#输出重定向-2\">#</a> 输出重定向  <code>2&gt;</code></h4>\n<p>标准错误输出</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> not_exist_file.csv <span class=\"token operator\">></span> res.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> errors.log</pre></td></tr></table></figure><ul>\n<li>当我们  <code>cat</code>  一个文件时，会把文件内容打印到屏幕上，这个是标准输出；</li>\n<li>当使用了  <code>&gt; res.txt</code>  时，则不会打印到屏幕，会把标准输出写入文件  <code>res.txt</code>  文件中；</li>\n<li><code>2&gt; errors.log</code>  当发生错误时会写入  <code>errors.log</code>  文件中。</li>\n</ul>\n<h4 id=\"输出重定向-2-2\"><a class=\"anchor\" href=\"#输出重定向-2-2\">#</a> 输出重定向  <code>2&gt;&gt;</code></h4>\n<p>标准错误输出（追加到文件末尾）同  <code>&gt;&gt;</code>  相似。</p>\n<h4 id=\"输出重定向-21\"><a class=\"anchor\" href=\"#输出重定向-21\">#</a> 输出重定向  <code>2&gt;&amp;1</code></h4>\n<p>标准输出和标准错误输出都重定向都一个地方</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> not_exist_file.csv <span class=\"token operator\">></span> res.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>  <span class=\"token comment\"># 覆盖输出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> not_exist_file.csv <span class=\"token operator\">>></span> res.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token comment\"># 追加输出</span></pre></td></tr></table></figure><p>目前为止，我们接触的命令的输入都来自命令的参数，其实命令的输入还可以来自文件或者键盘的输入。</p>\n<p><img data-src=\"/assets/2022-8/11.png\" alt=\"image.png\" /></p>\n<h4 id=\"输入重定向\"><a class=\"anchor\" href=\"#输入重定向\">#</a> 输入重定向  <code>&lt;</code></h4>\n<p><code>&lt;</code>  符号用于指定命令的输入。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;</span> name.csv <span class=\"token comment\"># 指定命令的输入为 name.csv</span></pre></td></tr></table></figure><p>虽然它的运行结果与  <code>cat name.csv</code>  一样，但是它们的原理却完全不同。</p>\n<ul>\n<li><code>cat name.csv</code>  表示  <code>cat</code>  命令接收的输入是  <code>notes.csv</code>  文件名，那么要先打开这个文件，然后打印出文件内容。</li>\n<li><code>cat &lt; name.csv</code>  表示  <code>cat</code>  命令接收的输入直接是  <code>notes.csv</code>  这个文件的内容，  <code>cat</code>  命令只负责将其内容打印，打开文件并将文件内容传递给  <code>cat</code>  命令的工作则交给终端完成。</li>\n</ul>\n<h4 id=\"输入重定向-2\"><a class=\"anchor\" href=\"#输入重定向-2\">#</a> 输入重定向  <code>&lt;&lt;</code></h4>\n<p>将键盘的输入重定向为某个命令的输入。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sort</span> -n <span class=\"token operator\">&lt;&lt;</span> END <span class=\"token comment\"># 输入这个命令之后，按下回车，终端就进入键盘输入模式，其中 END 为结束命令（这个可以自定义）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">wc</span> -m <span class=\"token operator\">&lt;&lt;</span> END <span class=\"token comment\"># 统计输入的单词</span></pre></td></tr></table></figure><h3 id=\"管道\"><a class=\"anchor\" href=\"#管道\">#</a> 管道  <code>|</code></h3>\n<p>把两个命令连起来使用，一个命令的输出作为另外一个命令的输入，英文是  <code>pipeline</code>  ，可以想象一个个水管连接起来，管道算是重定向流的一种。</p>\n<p><img data-src=\"/assets/2022-8/12.png\" alt=\"image.png\" /></p>\n<p>举几个实际用法案例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cut</span> -d , -f <span class=\"token number\">1</span> name.csv <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">></span> sorted_name.txt </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 第一步获取到的 name 列表，通过管道符再进行排序，最后输出到 sorted_name.txt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -nr <span class=\"token operator\">|</span> <span class=\"token function\">head</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># du 表示列举目录大小信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># sort 进行排序，-n 表示按数字排序，-r 表示倒序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># head 前 10 行文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">grep</span> log -Ir /var/log <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d <span class=\"token builtin class-name\">:</span> -f <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># grep log -Ir /var/log 表示在 log 文件夹下搜索 /var/log 文本，-r 表示递归，-I 用于排除二进制文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># cut -d : -f 1 表示通过冒号进行剪切，获取剪切的第一部分</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># sort 进行排序</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># uniq 进行去重</span></pre></td></tr></table></figure><h3 id=\"流\"><a class=\"anchor\" href=\"#流\">#</a> 流</h3>\n<p>流并非一个命令，在计算机科学中，流  <code>stream</code>  的含义是比较难理解的，记住一点即可：<strong>流就是读一点数据，处理一点点数据。其中数据一般就是二进制格式。</strong> 上面提及的重定向或管道，就是把数据当做流去运转的。</p>\n<blockquote>\n<p>到此我们就接触了，流、重定向、管道等  <code>Linux</code>  高级概念及指令。其实你会发现关于流和管道在其它语言中也有广泛的应用。  <code>Angular</code>  中的模板语法中可以使用管道。  <code>Node.js</code>  中也有  <code>stream</code>  流的概念。</p>\n</blockquote>\n<h2 id=\"查看进程\"><a class=\"anchor\" href=\"#查看进程\">#</a> 查看进程</h2>\n<p>在  <code>Windows</code>  中通过  <code>Ctrl + Alt + Delete</code>  快捷键查看软件进程。</p>\n<h3 id=\"w\"><a class=\"anchor\" href=\"#w\">#</a> w</h3>\n<p>帮助我们快速了解系统中目前有哪些用户登录着，以及他们在干什么。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># w</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 06:31:53 up <span class=\"token number\">25</span> days,  <span class=\"token number\">9</span>:53,  <span class=\"token number\">1</span> user,  load average: <span class=\"token number\">0.00</span>, <span class=\"token number\">0.01</span>, <span class=\"token number\">0.05</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">USER</span>     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root     pts/0    <span class=\"token number\">118.31</span>.243.53    05:56    <span class=\"token number\">1</span>.00s  <span class=\"token number\">0</span>.02s  <span class=\"token number\">0</span>.00s w</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>06:31:53：表示当前时间</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>up <span class=\"token number\">25</span> days, <span class=\"token number\">9</span>:53：表示系统已经正常运行了“25天9小时53分钟”</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span> user：表示一个用户</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>load average: <span class=\"token number\">0.00</span>, <span class=\"token number\">0.01</span>, <span class=\"token number\">0.05</span>：表示系统的负载，3个值分别表示“1分钟的平均负载”，“5分钟的平均负载”，“15分钟的平均负载”</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token environment constant\">USER</span>：表示登录的用于</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> TTY：登录的终端名称为pts/0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> FROM：连接到服务器的ip地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> LOGIN@：登录时间</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> IDLE：用户有多久没有活跃了</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> JCPU：该终端所有相关的进程使用的 CPU 时间，每当进程结束就停止计时，开始新的进程则会重新计时</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> PCPU：表示 CPU 执行当前程序所消耗的时间，当前进程就是在 WHAT 列里显示的程序</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> WHAT：表示当下用户正运行的程序是什么，这里我运行的是 w</pre></td></tr></table></figure><h3 id=\"ps\"><a class=\"anchor\" href=\"#ps\">#</a> ps</h3>\n<p>用于显示当前系统中的进程，  <code>ps</code>  命令显示的进程列表不会随时间而更新，是静态的，是运行  <code>ps</code>  命令那个时刻的状态或者说是一个进程快照。</p>\n<h4 id=\"基础语法-6\"><a class=\"anchor\" href=\"#基础语法-6\">#</a> 基础语法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ps</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1793</span> pts/0    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">4756</span> pts/0    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> PID：进程号，每个进程都有唯一的进程号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> TTY：进程运行所在的终端</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> TIME：进程运行时间</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> CMD：产生这个进程的程序名，如果在进程列表中看到有好几行都是同样的程序名，那么就是同样的程序产生了不止一个进程</pre></td></tr></table></figure><h4 id=\"常用参数-6\"><a class=\"anchor\" href=\"#常用参数-6\">#</a> 常用参数</h4>\n<ul>\n<li><code>-ef</code>  列出所有进程；</li>\n<li><code>-efH</code>  以乔木状列举出所有进程；</li>\n<li><code>-u</code>  列出此用户运行的进程；</li>\n<li><code>-aux</code>  通过  <code>CPU</code>  和内存使用来过滤进程  <code>ps -aux | less</code>  ;</li>\n<li><code>-aux --sort -pcpu</code>  按  <code>CPU</code>  使用降序排列，  <code>-aux --sort -pmem</code>  表示按内存使用降序排列；</li>\n<li><code>-axjf</code>  以树形结构显示进程，  <code>ps -axjf</code>  它和  <code>pstree</code>  效果类似。</li>\n</ul>\n<h3 id=\"top\"><a class=\"anchor\" href=\"#top\">#</a> top</h3>\n<p>获取进程的动态列表。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">top</span> - 07:20:07 up <span class=\"token number\">25</span> days, <span class=\"token number\">10</span>:41,  <span class=\"token number\">1</span> user,  load average: <span class=\"token number\">0.30</span>, <span class=\"token number\">0.10</span>, <span class=\"token number\">0.07</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Tasks:  <span class=\"token number\">67</span> total,   <span class=\"token number\">1</span> running,  <span class=\"token number\">66</span> sleeping,   <span class=\"token number\">0</span> stopped,   <span class=\"token number\">0</span> zombie</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>%Cpu<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>:  <span class=\"token number\">0.7</span> us,  <span class=\"token number\">0.3</span> sy,  <span class=\"token number\">0.0</span> ni, <span class=\"token number\">99.0</span> id,  <span class=\"token number\">0.0</span> wa,  <span class=\"token number\">0.0</span> hi,  <span class=\"token number\">0.0</span> si,  <span class=\"token number\">0.0</span> st</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>KiB Mem <span class=\"token builtin class-name\">:</span>  <span class=\"token number\">1882072</span> total,   <span class=\"token number\">552148</span> free,   <span class=\"token number\">101048</span> used,  <span class=\"token number\">1228876</span> buff/cache</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>KiB Swap:        <span class=\"token number\">0</span> total,        <span class=\"token number\">0</span> free,        <span class=\"token number\">0</span> used.  <span class=\"token number\">1594080</span> avail Mem </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  PID <span class=\"token environment constant\">USER</span>      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">956</span> root      <span class=\"token number\">10</span> -10  <span class=\"token number\">133964</span>  <span class=\"token number\">15848</span>  <span class=\"token number\">10240</span> S  <span class=\"token number\">0.7</span>  <span class=\"token number\">0.8</span> <span class=\"token number\">263</span>:13.01 AliYunDun                                                                                                     </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">1</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>   <span class=\"token number\">51644</span>   <span class=\"token number\">3664</span>   <span class=\"token number\">2400</span> S  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.2</span>   <span class=\"token number\">3</span>:23.63 systemd                                                                                                       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">2</span> root      <span class=\"token number\">20</span>   <span class=\"token number\">0</span>       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.05 kthreadd                                                                                                      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">4</span> root       <span class=\"token number\">0</span> -20       <span class=\"token number\">0</span>      <span class=\"token number\">0</span>      <span class=\"token number\">0</span> S  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.0</span>   <span class=\"token number\">0</span>:00.00 kworker/0:0H</pre></td></tr></table></figure><ul>\n<li><code>top - 07:20:07 up 25 days, 10:41,  1 user,  load average: 0.30, 0.10, 0.07</code>  相当  <code>w</code>  命令的第一行的信息。</li>\n<li>展示的这些进程是按照使用处理器  <code>%CPU</code>  的使用率来排序的。</li>\n</ul>\n<h3 id=\"kill\"><a class=\"anchor\" href=\"#kill\">#</a> kill</h3>\n<p>结束一个进程，  <code>kill + PID</code>  。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token number\">956</span> <span class=\"token comment\"># 结束进程号为 956 的进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token number\">956</span> <span class=\"token number\">957</span> <span class=\"token comment\"># 结束多个进程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">kill</span> -9 <span class=\"token number\">7291</span> <span class=\"token comment\"># 强制结束进程</span></pre></td></tr></table></figure><h2 id=\"管理进程\"><a class=\"anchor\" href=\"#管理进程\">#</a> 管理进程</h2>\n<h3 id=\"进程状态\"><a class=\"anchor\" href=\"#进程状态\">#</a> 进程状态</h3>\n<p>主要是切换进程的状态。我们先了解下  <code>Linux</code>  下进程的五种状态：</p>\n<ol>\n<li>状态码  <code>R</code>  ：表示正在运行的状态；</li>\n<li>状态码  <code>S</code>  ：表示中断（休眠中，受阻，当某个条件形成后或接受到信号时，则脱离该状态）；</li>\n<li>状态码  <code>D</code>  ：表示不可中断（进程不响应系统异步信号，即使用 kill 命令也不能使其中断）；</li>\n<li>状态码  <code>Z</code>  ：表示僵死（进程已终止，但进程描述符依然存在，直到父进程调用  <code>wait4()</code>  系统函数后将进程释放）；</li>\n<li>状态码  <code>T</code>  ：表示停止（进程收到  <code>SIGSTOP</code>  、  <code>SIGSTP</code>  、  <code>SIGTIN</code>  、  <code>SIGTOU</code>  等停止信号后停止运行）。</li>\n</ol>\n<h3 id=\"前台进程-后台进程\"><a class=\"anchor\" href=\"#前台进程-后台进程\">#</a> 前台进程 &amp; 后台进程</h3>\n<p>默认情况下，用户创建的进程都是前台进程，前台进程从键盘读取数据，并把处理结果输出到显示器。例如运行  <code>top</code>  命令，这就是一个一直运行的前台进程。</p>\n<p>后台进程的优点是不必等待程序运行结束，就可以输入其它命令。在需要执行的命令后面添加  <code>&amp;</code>  符号，就表示启动一个后台进程。</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> &amp;</h3>\n<p>启动后台进程，它的缺点是后台进程与终端相关联，一旦关闭终端，进程就自动结束了。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> name.csv name-copy.csv <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><h3 id=\"nohup\"><a class=\"anchor\" href=\"#nohup\">#</a> nohup</h3>\n<p>使进程不受挂断（关闭终端等动作）的影响。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> <span class=\"token function\">cp</span> name.csv name-copy.csv</pre></td></tr></table></figure><p><code>nohup</code>  命令也可以和  <code>&amp;</code>  结合使用。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> <span class=\"token function\">cp</span> name.csv name-copy.csv <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><h3 id=\"bg\"><a class=\"anchor\" href=\"#bg\">#</a> bg</h3>\n<p>使一个 “后台暂停运行” 的进程，状态改为 “后台运行”。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bg</span> %1 <span class=\"token comment\"># 不加任何参数的情况下，bg 命令会默认作用于最近的一个后台进程，如果添加参数则会作用于指定标号的进程</span></pre></td></tr></table></figure><p>实际案例 1：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. 执行 <span class=\"token function\">grep</span> -r <span class=\"token string\">\"log\"</span> / <span class=\"token operator\">></span> grep_log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> 命令启动一个前台进程，并且忘记添加 <span class=\"token operator\">&amp;</span> 符号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>. ctrl + z 使进程状态转为后台暂停</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>. 执行 <span class=\"token function\">bg</span> 将命令转为后台运行</pre></td></tr></table></figure><p>实际案例 2：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>前端开发时我们经常会执行 <span class=\"token function\">yarn</span> start 启动项目</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>此时我们执行 ctrl + z 先使其暂停</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>然后执行 <span class=\"token function\">bg</span> 使其转为后台运行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这样当前终端就空闲出来可以干其它事情了，如果想要唤醒它就使用 <span class=\"token function\">fg</span> 命令即可（后面会讲）</pre></td></tr></table></figure><h3 id=\"jobs\"><a class=\"anchor\" href=\"#jobs\">#</a> jobs</h3>\n<p>显示当前终端后台进程状态。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># jobs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 <span class=\"token function\">top</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>-  Running                 <span class=\"token function\">grep</span> --color<span class=\"token operator\">=</span>auto -r <span class=\"token string\">\"log\"</span> / <span class=\"token operator\">></span> grep_log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><h3 id=\"fg\"><a class=\"anchor\" href=\"#fg\">#</a> fg</h3>\n<p><code>fg</code>  使进程转为前台运行，用法和  <code>bg</code>  命令类似。</p>\n<p>我们用一张图来表示前后台进程切换：</p>\n<p><img data-src=\"/assets/2022-8/13.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p>我们可以使程序在后台运行，成为后台进程，这样在当前终端中我们就可以做其他事情了，而不必等待此进程运行结束。</p>\n</blockquote>\n<h2 id=\"守护进程\"><a class=\"anchor\" href=\"#守护进程\">#</a> 守护进程</h2>\n<p>一个运行起来的程序被称为进程。在  <code>Linux</code>  中有些进程是特殊的，它不与任何进程关联，不论用户的身份如何，都在后台运行，这些进程的父进程是  <code>PID</code>  为 1 的进程，  <code>PID</code>  为 1 的进程只在系统关闭时才会被销毁。它们会在后台一直运行等待分配工作。我们将这类进程称之为守护进程  <code>daemon</code>  。</p>\n<p>守护进程的名字通常会在最后有一个  <code>d</code>  ，表示  <code>daemon</code>  守护的意思，例如  <code>systemd</code>  、 <code>httpd</code>  。</p>\n<h3 id=\"systemd\"><a class=\"anchor\" href=\"#systemd\">#</a> systemd</h3>\n<p><code>systemd</code>  是一个  <code>Linux</code>  系统基础组件的集合，提供了一个系统和服务管理器，运行为  <code>PID 1</code>  并负责启动其它程序。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ps -aux</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token environment constant\">USER</span>       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root         <span class=\"token number\">1</span>  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.2</span>  <span class=\"token number\">51648</span>  <span class=\"token number\">3852</span> ?        Ss   Feb01   <span class=\"token number\">1</span>:50 /usr/lib/systemd/systemd --switched-root --system --deserialize <span class=\"token number\">22</span></pre></td></tr></table></figure><blockquote>\n<p>通过命令也可以看到  <code>PID</code>  为 1 的进程就是  <code>systemd</code>  的系统进程。</p>\n</blockquote>\n<p><code>systemd</code>  常用命令（它是一组命令的集合）：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start nginx <span class=\"token comment\"># 启动服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl stop nginx <span class=\"token comment\"># 停止服务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl restart nginx <span class=\"token comment\"># 重启服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl status nginx <span class=\"token comment\"># 查看服务状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>systemctl reload nginx <span class=\"token comment\"># 重载配置文件 (不停止服务的情况)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> nginx <span class=\"token comment\"># 开机自动启动服务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>systemctl disable nginx <span class=\"token comment\"># 开机不自动启动服务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>systemctl is-enabled nginx <span class=\"token comment\"># 查看服务是否开机自动启动</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>systemctl list-unit-files --type<span class=\"token operator\">=</span>service <span class=\"token comment\"># 查看各个级别下服务的启动和禁用情况</span></pre></td></tr></table></figure><h2 id=\"文件压缩解压\"><a class=\"anchor\" href=\"#文件压缩解压\">#</a> 文件压缩解压</h2>\n<ul>\n<li>打包：是将多个文件变成一个总的文件，它的学名叫存档、归档。</li>\n<li>压缩：是将一个大文件（通常指归档）压缩变成一个小文件。</li>\n</ul>\n<p>我们常常使用  <code>tar</code>  将多个文件归档为一个总的文件，称为  <code>archive</code>  。 然后用  <code>gzip</code>  或  <code>bzip2</code>  命令将  <code>archive</code>  压缩为更小的文件。</p>\n<p><img data-src=\"/assets/2022-8/14.png\" alt=\"image.png\" /></p>\n<h3 id=\"tar\"><a class=\"anchor\" href=\"#tar\">#</a> tar</h3>\n<p>创建一个  <code>tar</code>  归档。</p>\n<h4 id=\"基础用法\"><a class=\"anchor\" href=\"#基础用法\">#</a> 基础用法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -cvf sort.tar sort/ <span class=\"token comment\"># 将 sort 文件夹归档为 sort.tar</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> -cvf archive.tar file1 file2 file3 <span class=\"token comment\"># 将 file1 file2 file3 归档为 archive.tar</span></pre></td></tr></table></figure><h4 id=\"常用参数-7\"><a class=\"anchor\" href=\"#常用参数-7\">#</a> 常用参数</h4>\n<ul>\n<li><code>-cvf</code>  表示  <code>create</code> （创建）+  <code>verbose</code> （细节）+  <code>file</code> （文件），创建归档文件并显示操作细节；</li>\n<li><code>-tf</code>  显示归档里的内容，并不解开归档；</li>\n<li><code>-rvf</code>  追加文件到归档，  <code>tar -rvf archive.tar file.txt</code>  ；</li>\n<li><code>-xvf</code>  解开归档，  <code>tar -xvf archive.tar</code>  。</li>\n</ul>\n<h3 id=\"gzip-gunzip\"><a class=\"anchor\" href=\"#gzip-gunzip\">#</a> gzip / gunzip</h3>\n<p>“压缩 / 解压” 归档，默认用  <code>gzip</code>  命令，压缩后的文件后缀名为  <code>.tar.gz</code>  。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gzip</span> archive.tar <span class=\"token comment\"># 压缩</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gunzip archive.tar.gz <span class=\"token comment\"># 解压</span></pre></td></tr></table></figure><h3 id=\"tar-归档压缩\"><a class=\"anchor\" href=\"#tar-归档压缩\">#</a> tar 归档 + 压缩</h3>\n<p>可以用  <code>tar</code>  命令同时完成归档和压缩的操作，就是给  <code>tar</code>  命令多加一个选项参数，使之完成归档操作后，还是调用  <code>gzip</code>  或  <code>bzip2</code>  命令来完成压缩操作。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zcvf archive.tar.gz archive/ <span class=\"token comment\"># 将 archive 文件夹归档并压缩</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> -zxvf archive.tar.gz <span class=\"token comment\"># 将 archive.tar.gz 归档压缩文件解压</span></pre></td></tr></table></figure><h3 id=\"zcat-zless-zmore\"><a class=\"anchor\" href=\"#zcat-zless-zmore\">#</a> zcat、zless、zmore</h3>\n<p>之前讲过使用  <code>cat less more</code>  可以查看文件内容，但是压缩文件的内容是不能使用这些命令进行查看的，而要使用  <code>zcat、zless、zmore</code>  进行查看。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>zcat archive.tar.gz</pre></td></tr></table></figure><h3 id=\"zipunzip\"><a class=\"anchor\" href=\"#zipunzip\">#</a> zip/unzip</h3>\n<p>“压缩 / 解压”  <code>zip</code>  文件（  <code>zip</code>  压缩文件一般来自  <code>windows</code>  操作系统）。</p>\n<h4 id=\"命令安装\"><a class=\"anchor\" href=\"#命令安装\">#</a> 命令安装</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Red Hat 一族中的安装方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">zip</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">unzip</span></pre></td></tr></table></figure><h4 id=\"基础用法-2\"><a class=\"anchor\" href=\"#基础用法-2\">#</a> 基础用法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">unzip</span> archive.zip <span class=\"token comment\"># 解压 .zip 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">unzip</span> -l archive.zip <span class=\"token comment\"># 不解开 .zip 文件，只看其中内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">zip</span> -r sort.zip sort/ <span class=\"token comment\"># 将 sort 文件夹压缩为 sort.zip，其中 - r 表示递归</span></pre></td></tr></table></figure><h2 id=\"编译安装软件\"><a class=\"anchor\" href=\"#编译安装软件\">#</a> 编译安装软件</h2>\n<p>之前我们学会了使用  <code>yum</code>  命令进行软件安装，如果碰到  <code>yum</code>  仓库中没有的软件，我们就需要会更高级的软件安装 “源码编译安装”。</p>\n<h3 id=\"编译安装\"><a class=\"anchor\" href=\"#编译安装\">#</a> 编译安装</h3>\n<p>简单来说，编译就是将程序的源代码转换成可执行文件的过程。大多数  <code>Linux</code>  的程序都是开放源码的，可以编译成适合我们的电脑和操纵系统属性的可执行文件。</p>\n<p>基本步骤如下：</p>\n<ol>\n<li>下载源代码</li>\n<li>解压压缩包</li>\n<li>配置</li>\n<li>编译</li>\n<li>安装</li>\n</ol>\n<h4 id=\"实际案例\"><a class=\"anchor\" href=\"#实际案例\">#</a> 实际案例</h4>\n<h5 id=\"1-下载\"><a class=\"anchor\" href=\"#1-下载\">#</a> 1、下载</h5>\n<p>我们来编译安装  <code>htop</code>  软件，首先在它的官网下载源码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaW50cmF5LmNvbS9odG9wL3NvdXJjZS9odG9wI2ZpbGVz\">bintray.com/htop/source…</span></p>\n<p>下载好的源码在本机电脑上使用如下命令同步到服务器上：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> 文件名 用户名@服务器ip:目标路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">scp</span> ~/Desktop/htop-3.0.0.tar.gz root@121.42.11.34:.</pre></td></tr></table></figure><p>也可以使用  <code>wegt</code>  进行下载：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wegt+下载地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>wegt https://bintray.com/htop/source/download_file?file_path<span class=\"token operator\">=</span>htop-3.0.0.tar.gz</pre></td></tr></table></figure><h5 id=\"2-解压文件\"><a class=\"anchor\" href=\"#2-解压文件\">#</a> 2、解压文件</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf htop-3.0.0.tar.gz <span class=\"token comment\"># 解压</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> htop-3.0.0 <span class=\"token comment\"># 进入目录</span></pre></td></tr></table></figure><h5 id=\"3-配置\"><a class=\"anchor\" href=\"#3-配置\">#</a> 3、配置</h5>\n<p>执行  <code>./configure</code>  ，它会分析你的电脑去确认编译所需的工具是否都已经安装了。</p>\n<h5 id=\"4-编译\"><a class=\"anchor\" href=\"#4-编译\">#</a> 4、编译</h5>\n<p>执行  <code>make</code>  命令</p>\n<h5 id=\"5-安装\"><a class=\"anchor\" href=\"#5-安装\">#</a> 5、安装</h5>\n<p>执行  <code>make install</code>  命令，安装完成后执行  <code>ls /usr/local/bin/</code>  查看是否有  <code>htop</code>  命令。如果有就可以执行  <code>htop</code>  命令查看系统进程了。</p>\n<h2 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h2>\n<h3 id=\"ifconfig\"><a class=\"anchor\" href=\"#ifconfig\">#</a> ifconfig</h3>\n<p>查看  <code>ip</code>  网络相关信息，如果命令不存在的话， 执行命令  <code>yum install net-tools</code>  安装。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ifconfig</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>eth0: <span class=\"token assign-left variable\">flags</span><span class=\"token operator\">=</span><span class=\"token number\">416</span><span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class=\"token operator\">></span>  mtu <span class=\"token number\">1500</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        inet <span class=\"token number\">172.31</span>.24.78  netmask <span class=\"token number\">255.255</span>.240.0  broadcast <span class=\"token number\">172.31</span>.31.255</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ether 00:16:3e:04:9c:cd  txqueuelen <span class=\"token number\">1000</span>  <span class=\"token punctuation\">(</span>Ethernet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        RX packets <span class=\"token number\">1592318</span>  bytes <span class=\"token number\">183722250</span> <span class=\"token punctuation\">(</span><span class=\"token number\">175.2</span> MiB<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        RX errors <span class=\"token number\">0</span>  dropped <span class=\"token number\">0</span>  overruns <span class=\"token number\">0</span>  frame <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        TX packets <span class=\"token number\">1539361</span>  bytes <span class=\"token number\">154044090</span> <span class=\"token punctuation\">(</span><span class=\"token number\">146.9</span> MiB<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        TX errors <span class=\"token number\">0</span>  dropped <span class=\"token number\">0</span> overruns <span class=\"token number\">0</span>  carrier <span class=\"token number\">0</span>  collisions <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>lo: <span class=\"token assign-left variable\">flags</span><span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>&lt;</span>UP,LOOPBACK,RUNNING<span class=\"token operator\">></span>  mtu <span class=\"token number\">65536</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        inet <span class=\"token number\">127.0</span>.0.1  netmask <span class=\"token number\">255.0</span>.0.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        loop  txqueuelen <span class=\"token number\">1000</span>  <span class=\"token punctuation\">(</span>Local Loopback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        RX packets <span class=\"token number\">0</span>  bytes <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span> B<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        RX errors <span class=\"token number\">0</span>  dropped <span class=\"token number\">0</span>  overruns <span class=\"token number\">0</span>  frame <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        TX packets <span class=\"token number\">0</span>  bytes <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span> B<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        TX errors <span class=\"token number\">0</span>  dropped <span class=\"token number\">0</span> overruns <span class=\"token number\">0</span>  carrier <span class=\"token number\">0</span>  collisions <span class=\"token number\">0</span></pre></td></tr></table></figure><p>参数解析：</p>\n<ul>\n<li><code>eth0</code>  对应有线连接（对应你的有线网卡），就是用网线来连接的上网。  <code>eth</code>  是  <code>Ethernet</code>  的缩写，表示 “以太网”。有些电脑可能同时有好几条网线连着，例如服务器，那么除了  <code>eht0</code>  ，你还会看到  <code>eth1</code>  、  <code>eth2</code>  等。</li>\n<li><code>lo</code>  表示本地回环（  <code>Local Loopback</code>  的缩写，对应一个虚拟网卡）可以看到它的  <code>ip</code>  地址是  <code>127.0.0.1</code>  。每台电脑都应该有这个接口，因为它对应着 “连向自己的链接”。这也是被称之为 “本地回环” 的原因。所有经由这个接口发送的东西都会回到你自己的电脑。看起来好像并没有什么用，但有时为了某些缘故，我们需要连接自己。例如用来测试一个网络程序，但又不想让局域网或外网的用户查看，只能在此台主机上运行和查看所有的网络接口。例如在我们启动一个前端工程时，在浏览器输入  <code>127.0.0.1:3000</code>  启动项目就能查看到自己的  <code>web</code>  网站，并且它只有你能看到。</li>\n<li><code>wlan0</code>  表示无线局域网（上面案例并未展示）。</li>\n</ul>\n<h3 id=\"host\"><a class=\"anchor\" href=\"#host\">#</a> host</h3>\n<p><code>ip</code>  地址和主机名的互相转换。</p>\n<h4 id=\"软件安装\"><a class=\"anchor\" href=\"#软件安装\">#</a> 软件安装</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> bind-utils</pre></td></tr></table></figure><h4 id=\"基础用法-3\"><a class=\"anchor\" href=\"#基础用法-3\">#</a> 基础用法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># host github.com</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>baidu.com has address <span class=\"token number\">13.229</span>.188.59</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@lion ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># host 13.229.188.59</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">59.188</span>.229.13.in-addr.arpa domain name pointer ec2-13-229-188-59.ap-southeast-1.compute.amazonaws.com.</pre></td></tr></table></figure><h3 id=\"ssh-连接远程服务器\"><a class=\"anchor\" href=\"#ssh-连接远程服务器\">#</a> ssh 连接远程服务器</h3>\n<p>通过非对称加密以及对称加密的方式（同  <code>HTTPS</code>  安全连接原理相似）连接到远端服务器。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> 用户@ip:port</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>、ssh root@172.20.10.1:22 <span class=\"token comment\"># 端口号可以省略不写，默认是 22 端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>、输入连接密码后就可以操作远端服务器了</pre></td></tr></table></figure><h4 id=\"配置-ssh\"><a class=\"anchor\" href=\"#配置-ssh\">#</a> 配置 ssh</h4>\n<p><code>config</code>  文件可以配置  <code>ssh</code>  ，方便批量管理多个  <code>ssh</code>  连接。</p>\n<p>配置文件分为以下几种：</p>\n<ul>\n<li>全局  <code>ssh</code>  服务端的配置：  <code>/etc/ssh/sshd_config</code>  ；</li>\n<li>全局  <code>ssh</code>  客户端的配置：  <code>/etc/ssh/ssh_config</code> （很少修改）；</li>\n<li>当前用户  <code>ssh</code>  客户端的配置：  <code>~/.ssh/config</code>  。</li>\n</ul>\n<p>【服务端  <code>config</code>  文件的常用配置参数】</p>\n<table>\n<thead>\n<tr>\n<th>服务端 config 参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Port</td>\n<td>sshd 服务端口号（默认是 22）</td>\n</tr>\n<tr>\n<td>PermitRootLogin</td>\n<td>是否允许以 root 用户身份登录（默认是可以）</td>\n</tr>\n<tr>\n<td>PasswordAuthentication</td>\n<td>是否允许密码验证登录（默认是可以）</td>\n</tr>\n<tr>\n<td>PubkeyAuthentication</td>\n<td>是否允许公钥验证登录（默认是可以）</td>\n</tr>\n<tr>\n<td>PermitEmptyPasswords</td>\n<td>是否允许空密码登录（不安全，默认不可以）</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>修改完服务端配置文件需要重启服务  <code>systemctl restart sshd</code></p>\n</blockquote>\n<p>【客户端  <code>config</code>  文件的常用配置参数】</p>\n<table>\n<thead>\n<tr>\n<th>客户端 config 参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Host</td>\n<td>别名</td>\n</tr>\n<tr>\n<td>HostName</td>\n<td>远程主机名（或 IP 地址）</td>\n</tr>\n<tr>\n<td>Port</td>\n<td>连接到远程主机的端口</td>\n</tr>\n<tr>\n<td>User</td>\n<td>用户名</td>\n</tr>\n</tbody>\n</table>\n<p>配置当前用户的  <code>config</code>  ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建 config</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vim</span> ~/.ssh/config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 填写一下内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Host lion <span class=\"token comment\"># 别名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tHostName <span class=\"token number\">172</span>.x.x.x <span class=\"token comment\"># ip 地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Port <span class=\"token number\">22</span> <span class=\"token comment\"># 端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  User root <span class=\"token comment\"># 用户</span></pre></td></tr></table></figure><p>这样配置完成后，下次登录时，可以这样登录  <code>ssh lion</code>  会自动识别为  <code>root</code>  用户。</p>\n<blockquote>\n<p>这段配置不是在服务器上，而是你自己的机器上，它仅仅是设置了一个别名。</p>\n</blockquote>\n<h4 id=\"免密登录\"><a class=\"anchor\" href=\"#免密登录\">#</a> 免密登录</h4>\n<p><code>ssh</code>  登录分两种，一种是基于口令（账号密码），另外一种是基于密钥的方式。</p>\n<p>基于口令，就是每次登录输入账号和密码，显然这样做是比较麻烦的，今天主要看一下如何基于密钥实现免密登录。</p>\n<h5 id=\"基于密钥验证原理\"><a class=\"anchor\" href=\"#基于密钥验证原理\">#</a> 基于密钥验证原理</h5>\n<p>客户机生成密钥对（公钥和私钥），把公钥上传到服务器，每次登录会与服务器的公钥进行比较，这种验证登录的方法更加安全，也被称为 “公钥验证登录”。</p>\n<h5 id=\"具体实现步骤\"><a class=\"anchor\" href=\"#具体实现步骤\">#</a> 具体实现步骤</h5>\n<p>1、在客户机中生成密钥对（公钥和私钥）  <code>ssh-keygen</code> （默认使用 RSA 非对称加密算法）</p>\n<p>运行完  <code>ssh-keygen</code>  会在  <code>~/.ssh/</code>  目录下，生成两个文件：</p>\n<ul>\n<li><code>id_rsa.pub</code>  ：公钥</li>\n<li><code>id_rsa</code>  ：私钥</li>\n</ul>\n<p>2、把客户机的公钥传送到服务</p>\n<p>执行  <code>ssh-copy-id root@172.x.x.x</code> （ <code>ssh-copy-id</code>  它会把客户机的公钥追加到服务器  <code>~/.ssh/authorized_keys</code>  的文件中）。</p>\n<p>执行完成后，运行  <code>ssh root@172.x.x.x</code>  就可以实现免密登录服务器了。</p>\n<p>配合上面设置好的别名，直接执行  <code>ssh lion</code>  就可以登录，是不是非常方便。</p>\n<h3 id=\"wget\"><a class=\"anchor\" href=\"#wget\">#</a> wget</h3>\n<p>可以使我们直接从终端控制台下载文件，只需要给出文件的 HTTP 或 FTP 地址。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>URL地址<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">wget</span> http://www.minjieren.com/wordpress-3.1-zh_CN.zip</pre></td></tr></table></figure><p><code>wget</code>  非常稳定，如果是由于网络原因下载失败，  <code>wget</code>  会不断尝试，直到整个文件下载完毕。</p>\n<h4 id=\"常用参数-8\"><a class=\"anchor\" href=\"#常用参数-8\">#</a> 常用参数</h4>\n<ul>\n<li><code>-c</code>  继续中断的下载。</li>\n</ul>\n<h2 id=\"备份\"><a class=\"anchor\" href=\"#备份\">#</a> 备份</h2>\n<h3 id=\"scp\"><a class=\"anchor\" href=\"#scp\">#</a> scp</h3>\n<p>它是  <code>Secure Copy</code>  的缩写，表示安全拷贝。  <code>scp</code>  可以使我们通过网络，把文件从一台电脑拷贝到另一台电脑。</p>\n<p><code>scp</code>  是基于  <code>ssh</code>  的原理来运作的，  <code>ssh</code>  会在两台通过网络连接的电脑之间创建一条安全通信的管道，  <code>scp</code>  就利用这条管道安全地拷贝文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> source_file destination_file <span class=\"token comment\"># source_file 表示源文件，destination_file 表示目标文件</span></pre></td></tr></table></figure><p>其中  <code>source_file</code>  和  <code>destination_file</code>  都可以这样表示：  <code>user@ip:file_name</code>  ，  <code>user</code>  是登录名，  <code>ip</code>  是域名或  <code>ip</code>  地址。  <code>file_name</code>  是文件路径。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> file.txt root@192.168.1.5:/root <span class=\"token comment\"># 表示把我的电脑中当前文件夹下的 file.txt 文件拷贝到远程电脑</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scp</span> root@192.168.1.5:/root/file.txt file.txt <span class=\"token comment\"># 表示把远程电脑上的 file.txt 文件拷贝到本机</span></pre></td></tr></table></figure><h3 id=\"rsync\"><a class=\"anchor\" href=\"#rsync\">#</a> rsync</h3>\n<p><code>rsync</code>  命令主要用于远程同步文件。它可以同步两个目录，不管它们是否处于同一台电脑。它应该是最常用于 “增量备份” 的命令了。它就是智能版的  <code>scp</code>  命令。</p>\n<h4 id=\"软件安装-2\"><a class=\"anchor\" href=\"#软件安装-2\">#</a> 软件安装</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">rsync</span></pre></td></tr></table></figure><h4 id=\"基础用法-4\"><a class=\"anchor\" href=\"#基础用法-4\">#</a> 基础用法</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rsync</span> -arv Images/ backups/ <span class=\"token comment\"># 将 Images 目录下的所有文件备份到 backups 目录下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rsync</span> -arv Images/ root@192.x.x.x:backups/ <span class=\"token comment\"># 同步到服务器的 backups 目录下</span></pre></td></tr></table></figure><h4 id=\"常用参数-9\"><a class=\"anchor\" href=\"#常用参数-9\">#</a> 常用参数</h4>\n<ul>\n<li><code>-a</code>  保留文件的所有信息，包括权限，修改日期等；</li>\n<li><code>-r</code>  递归调用，表示子目录的所有文件也都包括；</li>\n<li><code>-v</code>  冗余模式，输出详细操作信息。</li>\n</ul>\n<p>默认地，  <code>rsync</code>  在同步时并不会删除目标目录的文件，例如你在源目录中删除一个文件，但是用  <code>rsync</code>  同步时，它并不会删除同步目录中的相同文件。如果向删除也可以这么做：  <code>rsync -arv --delete Images/ backups/</code>  。</p>\n<h2 id=\"系统\"><a class=\"anchor\" href=\"#系统\">#</a> 系统</h2>\n<h3 id=\"halt\"><a class=\"anchor\" href=\"#halt\">#</a> halt</h3>\n<p>关闭系统，需要  <code>root</code>  身份。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">halt</span></pre></td></tr></table></figure><h3 id=\"reboot\"><a class=\"anchor\" href=\"#reboot\">#</a> reboot</h3>\n<p>重启系统，需要  <code>root</code>  身份。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">reboot</span></pre></td></tr></table></figure><h3 id=\"poweroff\"><a class=\"anchor\" href=\"#poweroff\">#</a> poweroff</h3>\n<p>直接运行即可关机，不需要  <code>root</code>  身份。</p>\n<h1 id=\"vim-编辑器\"><a class=\"anchor\" href=\"#vim-编辑器\">#</a> Vim 编辑器</h1>\n<h2 id=\"vim-是什么\"><a class=\"anchor\" href=\"#vim-是什么\">#</a> Vim 是什么？</h2>\n<p><code>Vim</code>  是从  <code>vi</code>  发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和  <code>Emacs</code>  并列成为类  <code>Unix</code>  系统用户最喜欢的编辑器。</p>\n<h2 id=\"vim-常用模式\"><a class=\"anchor\" href=\"#vim-常用模式\">#</a> Vim 常用模式</h2>\n<ul>\n<li>交互模式</li>\n<li>插入模式</li>\n<li>命令模式</li>\n<li>可视模式</li>\n</ul>\n<h3 id=\"交互模式\"><a class=\"anchor\" href=\"#交互模式\">#</a> 交互模式</h3>\n<p>也成为正常模式，这是  <code>Vim</code>  的默认模式，每次运行  <code>Vim</code>  程序的时候，就会进入这个模式。</p>\n<p>例如执行  <code>vim name.txt</code>  则会进入交互模式。</p>\n<p>交互模式特征：</p>\n<ul>\n<li>在这个模式下，你不能输入文本；</li>\n<li>它可以让我们在文本间移动，删除一行文本，复制黏贴文本，跳转到指定行，撤销操作，等等。</li>\n</ul>\n<h3 id=\"插入模式\"><a class=\"anchor\" href=\"#插入模式\">#</a> 插入模式</h3>\n<p>这个模式是我们熟悉的文本编辑器的模式，就是可以输入任何你想输入的内容。进入这个模式有几种方法，最常用的方法是按字母键  <code>i</code>  （  <code>i、I、a、A、o、O</code>  都可以进入插入模式，只是所处的位置不同），退出这种模式，只需要按下  <code>Esc</code>  键。</p>\n<ul>\n<li><code>i, I</code>  进入输入模式  <code>Insert mode</code>  ：  <code>i</code>  为 “从目前光标所在处输入”，  <code>I</code>  为 “在目前所在行的第一个非空格符处开始输入”；</li>\n<li><code>a, A</code>  进入输入模式  <code>Insert mode</code>  ：  <code>a</code>  为 “从目前光标所在的下一个字符处开始输入”，  <code>A</code>  为 “从光标所在行的最后一个字符处开始输入”；</li>\n<li><code>o, O</code>  进入输入模式  <code>Insert mode</code>  ：  <code>o</code>  为 “在目前光标所在的下一行处输入新的一行”；  <code>O</code>  为在目前光标所在处的上一行输入新的一行。</li>\n</ul>\n<h3 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<blockquote>\n<p>命令模式也称为底线命令模式，这个模式下可以运行一些命令例如 “退出”，“保存”，等动作。<br />\n也可以用这个模式来激活一些  <code>Vim</code>  配置，例如语法高亮，显示行号，等。甚至还可以发送一些命令给终端命令行，例如  <code>ls、cp</code>  。</p>\n</blockquote>\n<p>为了进入命令模式，首先要进入交互模式，再按下冒号键。<br />\n用一张图表示三种模式如何切换：</p>\n<p><img data-src=\"/assets/2022-8/15.png\" alt=\"image.png\" /></p>\n<h2 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h2>\n<h3 id=\"打开-vim\"><a class=\"anchor\" href=\"#打开-vim\">#</a> 打开 Vim</h3>\n<p>在终端命令行中输入  <code>vim</code>  回车后  <code>Vim</code>  就会被运行起来，也可以用  <code>Vim</code>  来打开一个文件，只需要在  <code>vim</code>  后面再加文件名。如  <code>vim file.name</code>  ，如果文件不存在，那么会被创建。</p>\n<h3 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h3>\n<p>进入文件之后，此时处于交互模式，可以通过输入  <code>i</code>  进入插入模式。</p>\n<h3 id=\"移动\"><a class=\"anchor\" href=\"#移动\">#</a> 移动</h3>\n<p>在  <code>Vim</code>  的交互模式下，我们可以在文本中移动光标。</p>\n<ul>\n<li><code>h</code>  向左移动一个字符</li>\n<li><code>j</code>  向下移动一个字符</li>\n<li><code>k</code>  向上移动一个字符</li>\n<li><code>i</code>  向右移动一个字符</li>\n</ul>\n<blockquote>\n<p>当然也可以使用四个方向键进行移动，效果是一样的。</p>\n</blockquote>\n<h3 id=\"跳至行首和行末\"><a class=\"anchor\" href=\"#跳至行首和行末\">#</a> 跳至行首和行末</h3>\n<ul>\n<li>行首：在交互模式下，为了将光标定位到一行的开始位置，只需要按下数字键  <code>0</code>  即可，键盘上的  <code>Home</code>  键也有相同效果。</li>\n<li>行末：在交互模式下，为了将光标定位到一行的末尾，只需要按下美元符号键  <code>$</code>  即可，键盘上的  <code>End</code>  键也有相同效果。</li>\n</ul>\n<h3 id=\"按单词移动\"><a class=\"anchor\" href=\"#按单词移动\">#</a> 按单词移动</h3>\n<p>在交互模式下，按字母键  <code>w</code>  可以一个单词一个单词的移动。</p>\n<h3 id=\"退出文件\"><a class=\"anchor\" href=\"#退出文件\">#</a> 退出文件</h3>\n<p>在交互模式下，按下冒号键  <code>:</code>  进入命令模式，再按下  <code>q</code>  键，就可以退出了。</p>\n<p>如果在退出之前又修改了文件，就直接想用  <code>:q</code>  退出  <code>Vim</code>  ，那么  <code>Vim</code>  会显示一个红字标明错误信息。此时我们有两个选择：</p>\n<ol>\n<li>保存并退出  <code>:wq</code>  或  <code>:x</code>  ；</li>\n<li>不保存且退出  <code>:q!</code>  。</li>\n</ol>\n<h2 id=\"标准操作\"><a class=\"anchor\" href=\"#标准操作\">#</a> 标准操作</h2>\n<h3 id=\"删除字符\"><a class=\"anchor\" href=\"#删除字符\">#</a> 删除字符</h3>\n<p>在交互模式下，将光标定位到一个你想要删除的字符上，按下字母键  <code>x</code>  你会发现这个字符被删除了。<br />\n也可以一次性删除多个字符，只需要在按  <code>x</code>  键之前输入数字即可。</p>\n<h3 id=\"删除剪切单词行\"><a class=\"anchor\" href=\"#删除剪切单词行\">#</a> 删除（剪切）单词，行</h3>\n<ul>\n<li>删除一行：连按两次  <code>d</code>  来删除光标所在的那一行。</li>\n<li>删除多行：例如先输入数字  <code>2</code>  ，再按下  <code>dd</code>  ，就会删除从光标所在行开始的两行。</li>\n<li>删除一个单词：将光标置于一个单词的首字母处，然后按下  <code>dw</code>  。</li>\n<li>删除多个单词：例如先按数字键  <code>2</code>  再按  <code>dw</code>  就可以删除两个单词了。</li>\n<li>从光标所在位置删除至行首：  <code>d0</code>  。</li>\n<li>从光标所在位置删除至行末：  <code>d$</code>  。</li>\n</ul>\n<h3 id=\"复制单词行\"><a class=\"anchor\" href=\"#复制单词行\">#</a> 复制单词，行</h3>\n<ul>\n<li>复制行：按两次  <code>y</code>  会把光标所在行复制到内存中，和  <code>dd</code>  类似，  <code>dd</code>  用于 “剪切” 光标所在行。</li>\n<li>复制单词：  <code>yw</code>  会复制一个单词。</li>\n<li>复制到行末：  <code>y$</code>  是复制从光标所在处到行末的所有字符。</li>\n<li>复制到行首：  <code>y0</code>  是复制光标所在处到行首的所有字符。</li>\n</ul>\n<h3 id=\"粘贴\"><a class=\"anchor\" href=\"#粘贴\">#</a> 粘贴</h3>\n<p>如果之前用  <code>dd</code>  或者  <code>yy</code>  剪切复制过来的，可以使用  <code>p</code>  来粘贴。同样也可以使用  <code>数字+p</code>  来表示复制多次。</p>\n<h3 id=\"替换一个字符\"><a class=\"anchor\" href=\"#替换一个字符\">#</a> 替换一个字符</h3>\n<p>在交互模式下，将光标置于想要替换的字符上。按下  <code>r</code>  键，接着输入你要替换的字符即可。</p>\n<h3 id=\"撤销操作\"><a class=\"anchor\" href=\"#撤销操作\">#</a> 撤销操作</h3>\n<p>如果要撤销最近的修改，只需要按下  <code>u</code>  键，如果想要撤销最近四次修改，可以按下 4，再按下  <code>u</code>  。</p>\n<h3 id=\"重做\"><a class=\"anchor\" href=\"#重做\">#</a> 重做</h3>\n<p>取消撤销，也就是重做之前的修改使用  <code>ctrl + r</code>  。</p>\n<h3 id=\"跳转到指定行\"><a class=\"anchor\" href=\"#跳转到指定行\">#</a> 跳转到指定行</h3>\n<p><code>Vim</code>  编辑的文件中，每一行都有一个行号，行号从 1 开始，逐一递增。</p>\n<p>行号默认是不显示，如果需要它显示的话，可以进入命令模式，然后输入  <code>set nu</code>  ，如果要隐藏行号的话，使用  <code>set nonu</code>  。</p>\n<ul>\n<li>跳转到指定行：  <code>数字+gg</code>  ，例如  <code>7gg</code>  ，表示跳转到第 7 行。</li>\n<li>要跳转到最后一行，按下  <code>G</code>  。</li>\n<li>要跳转到第一行，按下  <code>gg</code>  。</li>\n</ul>\n<h2 id=\"高级操作\"><a class=\"anchor\" href=\"#高级操作\">#</a> 高级操作</h2>\n<h3 id=\"查找\"><a class=\"anchor\" href=\"#查找\">#</a> 查找</h3>\n<p>处于交互模式下，按下  <code>/</code>  键，那么就进入查找模式，输入你要查找的字符串，然后按下回车。光标就会跳转到文件中下一个查找到的匹配处。如果字符串不存在，那么会显示  <code>&quot;pattern not found&quot;</code>  。</p>\n<ul>\n<li><code>n</code>  跳转到下一个匹配项；</li>\n<li><code>N</code>  跳转到上一个匹配项。</li>\n</ul>\n<blockquote>\n<p>用斜杠来进行的查找是从当前光标处开始向文件尾搜索，如果你要从当前光标处开始，向文件头搜索则使用  <code>?</code>  ，当然也可以先按下  <code>gg</code>  跳转到第一行在进行全文搜索。</p>\n</blockquote>\n<h3 id=\"查找并替换\"><a class=\"anchor\" href=\"#查找并替换\">#</a> 查找并替换</h3>\n<p>替换光标所在行第一个匹配的字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:s/旧字符串/新字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 实例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:s/one/two</pre></td></tr></table></figure><p>替换光标所在行所有旧字符串为新字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:s/旧字符串/新字符串/g</pre></td></tr></table></figure><p>替换第几行到第几行中所有字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:n,m s/旧字符串/新字符串/g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 实例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:2,4 s/one/two/g</pre></td></tr></table></figure><p>最常用的就是全文替换了：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:%s/旧字符串/新字符串/g</pre></td></tr></table></figure><h3 id=\"合并文件\"><a class=\"anchor\" href=\"#合并文件\">#</a> 合并文件</h3>\n<p>可以用冒号  <code>+r</code>  (  <code>:r</code>  ) 实现在光标处插入一个文件的内容。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:r filename <span class=\"token comment\"># 可以用 Tab 键来自动补全另外一个文件的路径</span></pre></td></tr></table></figure><h3 id=\"分屏\"><a class=\"anchor\" href=\"#分屏\">#</a> 分屏</h3>\n<p><code>Vim</code>  有一个特别便捷的功能那就是分屏，可以同时打开好几个文件，分屏之后，屏幕每一块被称为一个  <code>viewport</code>  ，表示 “视口”。</p>\n<ul>\n<li>横向分屏  <code>:sp 文件名</code></li>\n<li>垂直分屏  <code>:vsp 文件名</code></li>\n</ul>\n<h4 id=\"分屏模式下的快捷键\"><a class=\"anchor\" href=\"#分屏模式下的快捷键\">#</a> 分屏模式下的快捷键</h4>\n<ul>\n<li><code>Ctrl + w</code>  再加  <code>Ctrl + w</code>  ，表示从一个  <code>viewport</code>  移动光标到另外一个  <code>viewport</code>  ；</li>\n<li><code>Ctrl + w</code>  再加 “方向键”，就可以移动到这个方向所处的下一个视口了；</li>\n<li><code>Ctrl + w</code>  再加  <code>+</code>  号，表示扩大当前视口；</li>\n<li><code>Ctrl + w</code>  再加  <code>-</code>  号，表示缩小当前视口；</li>\n<li><code>Ctrl + w</code>  再加  <code>=</code>  号，表示平均当前视口；</li>\n<li><code>Ctrl + w</code>  再加  <code>r</code>  键，会反向调换视口位置；</li>\n<li><code>Ctrl + w</code>  再加  <code>q</code>  键，会关闭当前视口；</li>\n<li><code>Ctrl + w</code>  再加  <code>o</code>  键，会关闭除当前视口以外的所有视口；</li>\n</ul>\n<h3 id=\"运行外部命令\"><a class=\"anchor\" href=\"#运行外部命令\">#</a> 运行外部命令  <code>:!</code></h3>\n<p>在  <code>Vim</code>  中可以运行一些终端命令，只要先输入  <code>:!</code>  ，然后接命令名称。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">:</span><span class=\"token operator\">!</span>ls # 在Vim中打开的文件所在的目录运行ls命令</pre></td></tr></table></figure><h3 id=\"可视模式\"><a class=\"anchor\" href=\"#可视模式\">#</a> 可视模式</h3>\n<p>前面只讲了  <code>Vim</code>  的三种模式，其实还有一种模式叫做可视模式。</p>\n<p>进入它的三种方式（都是从交互模式开始）：</p>\n<ul>\n<li><code>v</code>  字符可视模式，进入后配合方向键选中字符后，然后再按  <code>d</code>  键可以删除选中。</li>\n<li><code>V</code>  行可视模式，进入后光标所在行默认被选中，然后再按  <code>d</code>  键可以删除所在行。</li>\n<li><code>Ctrl + v</code>  块可视模式，它是可视模式最有用的功能了，配合  <code>d</code>  和  <code>I</code>  键可以实现删除选中的内容和插入内容。</li>\n</ul>\n<p>同时选中多行，并在选中行头部插入内容的具体操作步骤：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. ctrl + <span class=\"token function\">v</span> 进入块可视模式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>. 使用方向键进行选中（上下左右）假设选中5行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>. 输入 I 键进行多行同时插入操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>. 插入完成后连续按两下 esc 键，实现多行同时插入相同字符</pre></td></tr></table></figure><p>进入可视模式之后的操作键：</p>\n<ul>\n<li><code>d</code>  键，表示删除选中；</li>\n<li><code>I</code>  键，表示在选中之前插入；</li>\n<li><code>u</code>  键，表示选中变为小写；</li>\n<li><code>U</code>  键，表示选中变为大写；</li>\n</ul>\n<h2 id=\"vim-配置\"><a class=\"anchor\" href=\"#vim-配置\">#</a> Vim 配置</h2>\n<h3 id=\"选项参数\"><a class=\"anchor\" href=\"#选项参数\">#</a> 选项参数</h3>\n<p>在  <code>Vim</code>  被启动后，可以运行一些指令来激活一些选项参数，但是这些选项参数的配置在退出  <code>Vim</code>  时会被忘记，例如前面讲解的激活行号。如果希望所在的配置是永久性的，那么需要在家目录（  <code>cd ~</code>  ）创建一个  <code>Vim</code>  的配置文件  <code>.vimrc</code>  。</p>\n<h3 id=\"vimrc\"><a class=\"anchor\" href=\"#vimrc\">#</a> .vimrc</h3>\n<pre><code class=\"language-复制代码\">set number &quot; 显示行号\nsyntax on &quot; 激活语法高亮\nset showcmd &quot; 实时看到输入的命令\nset ignorecase &quot; 搜索时不区分大小写\nset mouse=a &quot; 激活鼠标，用鼠标选中时相当于进入可视模式\n</code></pre>\n<p><code>Vim</code>  配置非常丰富，我们可以通过个性化配置把  <code>Vim</code>  打造成属于自己的  <code>IDE</code>  等等。在  <code>github</code>  上也可以搜索到一些强大的  <code>Vim</code>  配置文件。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>相信通过本文的学习，大家应该会对  <code>Linux</code>  有一个更加全面的认识。</p>\n",
            "tags": [
                "Java",
                "技术实践",
                "面试",
                "笔记",
                "Linux"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/4/7889e7e4c198/",
            "url": "https://shaogezhu.cn/2022/4/7889e7e4c198/",
            "title": "Mybatis-Plus常用方法总结",
            "date_published": "2022-04-10T12:02:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>✨mybatis-plus 是现在我们经常使用的插件，极大的提高了我们开发的效率。这篇文章就总结一下，mybatis-plus 的基础操作。</p>\n</div>\n<br>\n<h2 id=\"常用注解\"><a class=\"anchor\" href=\"#常用注解\">#</a> 常用注解</h2>\n<h3 id=\"tablename\"><a class=\"anchor\" href=\"#tablename\">#</a> @TableName</h3>\n<p>这个注解用在类上，声明当前类关联的表名称，可以配置下列属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必须指定</th>\n<th style=\"text-align:center\">默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td>表名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">schema</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td>schema</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">keepGlobalPrefix</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">false</td>\n<td>是否保持使用全局的 tablePrefix 的值 (如果设置了全局 tablePrefix 且自行设置了 value 的值)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">resultMap</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td>xml 中 resultMap 的 id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">autoResultMap</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">false</td>\n<td>是否自动构建 resultMap 并使用 (如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"tableid\"><a class=\"anchor\" href=\"#tableid\">#</a> @TableId</h3>\n<ul>\n<li>描述：主键注解</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必须指定</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td style=\"text-align:center\">主键字段名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:center\">Enum</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">IdType.NONE</td>\n<td style=\"text-align:center\">主键类型，通过 IdType 枚举指定</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>IdType 的枚举项：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">AUTO</td>\n<td style=\"text-align:center\">数据库 ID 自增</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NONE</td>\n<td style=\"text-align:center\">无状态，该类型为未设置主键类型 (注解里等于跟随全局，全局里约等于 INPUT)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INPUT</td>\n<td style=\"text-align:center\">insert 前自行 set 主键值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ASSIGN_ID</td>\n<td style=\"text-align:center\">分配 ID (主键类型为 Number (Long 和 Integer) 或 String)(since 3.3.0), 使用接口 <code>IdentifierGenerator</code>  的方法 <code>nextId</code>  (默认实现类为 <code>DefaultIdentifierGenerator</code>  雪花算法)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ASSIGN_UUID</td>\n<td style=\"text-align:center\">分配 UUID, 主键类型为 String (since 3.3.0), 使用接口 <code>IdentifierGenerator</code>  的方法 <code>nextUUID</code>  (默认 default 方法)</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"tablefield\"><a class=\"anchor\" href=\"#tablefield\">#</a> @TableField</h3>\n<ul>\n<li>描述：字段注解 (非主键)</li>\n<li>属性：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">必须指定</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td style=\"text-align:center\">字段名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">el</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td style=\"text-align:center\">映射为原生  <code>#&#123; ... &#125;</code>  逻辑，相当于写在 xml 里的  <code>#&#123; ... &#125;</code>  部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exist</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否为数据库表字段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">condition</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td style=\"text-align:center\">字段  <code>where</code>  实体查询比较条件，有值设置则按设置的值为准，没有则为默认全局的  <code>%s=#&#123;%s&#125;</code> ,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cy9ibG9iLzMuMC9teWJhdGlzLXBsdXMtYW5ub3RhdGlvbi9zcmMvbWFpbi9qYXZhL2NvbS9iYW9taWRvdS9teWJhdGlzcGx1cy9hbm5vdGF0aW9uL1NxbENvbmRpdGlvbi5qYXZh\"> 参考</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">update</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td style=\"text-align:center\">字段  <code>update set</code>  部分注入，例如：update=&quot;% s+1&quot;：表示更新时会 set version=version+1 (该属性优先级高于  <code>el</code>  属性)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertStrategy</td>\n<td style=\"text-align:center\">Enum</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">DEFAULT</td>\n<td style=\"text-align:center\">举例：NOT_NULL:  <code>insert into table_a(column) values (#&#123;columnProperty&#125;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updateStrategy</td>\n<td style=\"text-align:center\">Enum</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">DEFAULT</td>\n<td style=\"text-align:center\">举例：IGNORED:  <code>update table_a set column=#&#123;columnProperty&#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">whereStrategy</td>\n<td style=\"text-align:center\">Enum</td>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">DEFAULT</td>\n<td style=\"text-align:center\">举例：NOT_EMPTY:  <code>where column=#&#123;columnProperty&#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fill</td>\n<td style=\"text-align:center\">Enum</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">FieldFill.DEFAULT</td>\n<td style=\"text-align:center\">字段自动填充策略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">select</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">是否进行 select 查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">keepGlobalFormat</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">是否保持使用全局的 format 进行处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jdbcType</td>\n<td style=\"text-align:center\">JdbcType</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">JdbcType.UNDEFINED</td>\n<td style=\"text-align:center\">JDBC 类型 (该默认值不代表会按照该值生效)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">typeHandler</td>\n<td style=\"text-align:center\">Class&lt;? extends TypeHandler&gt;</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">UnknownTypeHandler.class</td>\n<td style=\"text-align:center\">类型处理器 (该默认值不代表会按照该值生效)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">numericScale</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">&quot;&quot;</td>\n<td style=\"text-align:center\">指定小数点后保留的位数</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2 id=\"basemapper的crud\"><a class=\"anchor\" href=\"#basemapper的crud\">#</a> BaseMapper 的 CRUD</h2>\n<p>在 MybatisPlus 中，BaseMapper 中定义了一些常用的 CRUD 方法，当我们自定义的 Mapper 接口继承 BaseMapper 后即可拥有了这些方法。</p>\n<br>\n<h3 id=\"新增\"><a class=\"anchor\" href=\"#新增\">#</a> 新增</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入一条记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明\"><a class=\"anchor\" href=\"#参数说明\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">entity</td>\n<td style=\"text-align:center\">实体对象</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h3>\n<h4 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 entity 条件，删除记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 删除（根据 ID 批量删除）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deleteBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>COLLECTION<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据 ID 删除</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 根据 columnMap 条件，删除记录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deleteByMap</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>COLUMN_MAP<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> columnMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"\"><a class=\"anchor\" href=\"#\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC5iYW9taWRvdS5jb20vZ3VpZGUvY3J1ZC1pbnRlcmZhY2UuaHRtbCMlRTUlOEYlODIlRTYlOTUlQjAlRTglQUYlQjQlRTYlOTglOEUtMTA=\">#</span>参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">wrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类（可以为 null）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Collection&lt;? extends Serializable&gt;</td>\n<td style=\"text-align:center\">idList</td>\n<td style=\"text-align:center\">主键 ID 列表 (不能为 null 以及 empty)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Serializable</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Map&lt;String, Object&gt;</td>\n<td style=\"text-align:center\">columnMap</td>\n<td style=\"text-align:center\">表字段 map 对象</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h3>\n<h4 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 whereEntity 条件，更新记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>ENTITY<span class=\"token punctuation\">)</span> <span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> updateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 ID 修改</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>ENTITY<span class=\"token punctuation\">)</span> <span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数：</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">entity</td>\n<td style=\"text-align:center\">实体对象 (set 条件值，可为 null)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">updateWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类（可以为 null, 里面的 entity 用于生成 where 语句）</td>\n</tr>\n</tbody>\n</table>\n<br>\n<br>\n<h3 id=\"查询单个\"><a class=\"anchor\" href=\"#查询单个\">#</a> 查询单个</h3>\n<h4 id=\"方法列表\"><a class=\"anchor\" href=\"#方法列表\">#</a> 方法列表:</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 ID 查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">T</span> <span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 entity 条件，查询一条记录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">T</span> <span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-2\"><a class=\"anchor\" href=\"#参数说明-2\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Serializable</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">queryWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类（可以为 null）</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"查询集合\"><a class=\"anchor\" href=\"#查询集合\">#</a> 查询集合</h3>\n<h4 id=\"方法列表-2\"><a class=\"anchor\" href=\"#方法列表-2\">#</a> 方法列表：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询（根据 ID 批量查询）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>COLLECTION<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 entity 条件，查询全部记录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查询（根据 columnMap 条件）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectByMap</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>COLUMN_MAP<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> columnMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询全部记录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectObjs</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例：</h4>\n<p>1）根据 id 集合查询：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testQueryByIdList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 根据 ID 查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectBatchIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2）根据 wrapper 查询：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testQueryByWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义 wrapper</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 模糊</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 范围</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">le</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">orderByAsc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 查询</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>生成的 sql：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>email<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">LIKE</span> ? <span class=\"token operator\">AND</span> age <span class=\"token operator\">&lt;=</span> ?<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> age <span class=\"token keyword\">ASC</span></pre></td></tr></table></figure><br>\n<h3 id=\"分页查询\"><a class=\"anchor\" href=\"#分页查询\">#</a> 分页查询</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 entity 条件，查询全部记录（并翻页）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectMapsPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询总记录数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Integer</span> <span class=\"token function\">selectCount</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>WRAPPER<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>分页查询需要引入额外的插件才能生效。</p>\n</div>\n<h4 id=\"引入分页插件\"><a class=\"anchor\" href=\"#引入分页插件\">#</a> 引入分页插件</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 注册 mybatis plus 的分页插件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">paginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">MybatisPlusInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 数据库类型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        paginationInnerInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setDbType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span>MYSQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 溢出总页数后是进行处理 (默认是否)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        paginationInnerInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setOverflow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        paginationInnerInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">500L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span>paginationInnerInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试分页\"><a class=\"anchor\" href=\"#测试分页\">#</a> 测试分页</h4>\n<p>代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testPageQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 分页条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 当前页</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    page<span class=\"token punctuation\">.</span><span class=\"token function\">setCurrent</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 每页大小</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    page<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 分页查询，结果会放到 Page&lt;User > 中，因此无需返回</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 总条数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">long</span> total <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total = \"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 总页数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">long</span> pages <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pages = \"</span> <span class=\"token operator\">+</span> pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 当前页结果</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><br><br></p>\n<h2 id=\"iservice的crud\"><a class=\"anchor\" href=\"#iservice的crud\">#</a> IService 的 CRUD</h2>\n<blockquote>\n<p>MybatisPlus 除了提供 BaseMapper，还提供了通用的 Service 接口： <code>IService</code></p>\n</blockquote>\n<br>\n<h3 id=\"新增-2\"><a class=\"anchor\" href=\"#新增-2\">#</a> 新增</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入一条记录（选择字段，策略插入）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 插入（批量）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 插入（批量）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-3\"><a class=\"anchor\" href=\"#参数说明-3\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">entity</td>\n<td style=\"text-align:center\">实体对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Collection<T></td>\n<td style=\"text-align:center\">entityList</td>\n<td style=\"text-align:center\">实体对象集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">batchSize</td>\n<td style=\"text-align:center\">插入批次数量</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"saveorupdate\"><a class=\"anchor\" href=\"#saveorupdate\">#</a> SaveOrUpdate</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TableId 注解存在更新记录，否插入一条记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveOrUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 updateWrapper 尝试更新，否继续执行 saveOrUpdate (T) 方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveOrUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> updateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 批量修改插入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveOrUpdateBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 批量修改插入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveOrUpdateBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-4\"><a class=\"anchor\" href=\"#参数说明-4\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">entity</td>\n<td style=\"text-align:center\">实体对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">updateWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类 UpdateWrapper</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Collection<T></td>\n<td style=\"text-align:center\">entityList</td>\n<td style=\"text-align:center\">实体对象集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">batchSize</td>\n<td style=\"text-align:center\">插入批次数量</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"删除-2\"><a class=\"anchor\" href=\"#删除-2\">#</a> 删除</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 entity 条件，删除记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 ID 删除</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据 columnMap 条件，删除记录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> columnMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 删除（根据 ID 批量删除）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-5\"><a class=\"anchor\" href=\"#参数说明-5\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">queryWrapper</td>\n<td style=\"text-align:center\">实体包装类 QueryWrapper</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Serializable</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Map&lt;String, Object&gt;</td>\n<td style=\"text-align:center\">columnMap</td>\n<td style=\"text-align:center\">表字段 map 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Collection&lt;? extends Serializable&gt;</td>\n<td style=\"text-align:center\">idList</td>\n<td style=\"text-align:center\">主键 ID 列表</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"修改-2\"><a class=\"anchor\" href=\"#修改-2\">#</a> 修改</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 UpdateWrapper 条件，更新记录 需要设置 sqlset</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> updateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 whereEntity 条件，更新记录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> updateWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据 ID 选择修改</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 根据 ID 批量更新</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">updateBatchById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 根据 ID 批量更新</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">updateBatchById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-6\"><a class=\"anchor\" href=\"#参数说明-6\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">updateWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类 UpdateWrapper</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">entity</td>\n<td style=\"text-align:center\">实体对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Collection<T></td>\n<td style=\"text-align:center\">entityList</td>\n<td style=\"text-align:center\">实体对象集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">batchSize</td>\n<td style=\"text-align:center\">更新批次数量</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"查询单个-2\"><a class=\"anchor\" href=\"#查询单个-2\">#</a> 查询单个</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 ID 查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">T</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last (\"LIMIT 1\")</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">T</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper，查询一条记录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">T</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> throwEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper，查询一条记录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper，查询一条记录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">V</span> <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-7\"><a class=\"anchor\" href=\"#参数说明-7\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Serializable</td>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">主键 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">queryWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类 QueryWrapper</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">throwEx</td>\n<td style=\"text-align:center\">有多个 result 是否抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">entity</td>\n<td style=\"text-align:center\">实体对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function&lt;? super Object, V&gt;</td>\n<td style=\"text-align:center\">mapper</td>\n<td style=\"text-align:center\">转换函数</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"查询多个\"><a class=\"anchor\" href=\"#查询多个\">#</a> 查询多个</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询所有</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 查询列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查询（根据 ID 批量查询）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listByIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 查询（根据 columnMap 条件）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listByMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> columnMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 查询所有列表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 查询列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 查询全部记录</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listObjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 查询全部记录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listObjs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询全部记录</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listObjs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询全部记录</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listObjs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-8\"><a class=\"anchor\" href=\"#参数说明-8\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">queryWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类 QueryWrapper</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Collection&lt;? extends Serializable&gt;</td>\n<td style=\"text-align:center\">idList</td>\n<td style=\"text-align:center\">主键 ID 列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Map&lt;?String, Object&gt;</td>\n<td style=\"text-align:center\">columnMap</td>\n<td style=\"text-align:center\">表字段 map 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function&lt;? super Object, V&gt;</td>\n<td style=\"text-align:center\">mapper</td>\n<td style=\"text-align:center\">转换函数</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"分页查询-2\"><a class=\"anchor\" href=\"#分页查询-2\">#</a> 分页查询</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无条件翻页查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 翻页查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 无条件翻页查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 翻页查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-9\"><a class=\"anchor\" href=\"#参数说明-9\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IPage<T></td>\n<td style=\"text-align:center\">page</td>\n<td style=\"text-align:center\">翻页对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">queryWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类 QueryWrapper</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"查询数量\"><a class=\"anchor\" href=\"#查询数量\">#</a> 查询数量</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询总记录数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 Wrapper 条件，查询总记录数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"参数说明-10\"><a class=\"anchor\" href=\"#参数说明-10\">#</a> 参数说明</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">参数名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Wrapper<T></td>\n<td style=\"text-align:center\">queryWrapper</td>\n<td style=\"text-align:center\">实体对象封装操作类 QueryWrapper</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"链式查询\"><a class=\"anchor\" href=\"#链式查询\">#</a> 链式查询</h3>\n<h4 id=\"query\"><a class=\"anchor\" href=\"#query\">#</a> query</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 链式查询 普通</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 链式查询 lambda 式。注意：不支持 Kotlin</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">LambdaQueryChainWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 示例：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"column\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entity</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><br>\n<br>\n<h2 id=\"引入mybatis-plus\"><a class=\"anchor\" href=\"#引入mybatis-plus\">#</a> 引入 mybatis-plus</h2>\n<br>\n<h3 id=\"依赖\"><a class=\"anchor\" href=\"#依赖\">#</a> 依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--mybatis plus--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><br>\n<h3 id=\"增加扫描路径\"><a class=\"anchor\" href=\"#增加扫描路径\">#</a> 增加扫描路径</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.lemon.goods\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodsApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GoodsApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><br>\n<h3 id=\"全局配置\"><a class=\"anchor\" href=\"#全局配置\">#</a> 全局配置</h3>\n<p>然后在 <code>ly-item-service</code>  的 <code>application.yml</code>  文件中添加配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">type-aliases-package</span><span class=\"token punctuation\">:</span> com.leyou.item.entity <span class=\"token comment\"># 别名扫描包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> <span class=\"token key atrule\">classpath*</span><span class=\"token punctuation\">:</span> mappers/<span class=\"token important\">*.xml</span> <span class=\"token comment\"># mapper 的 xml 文件地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">db-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">id-type</span><span class=\"token punctuation\">:</span> auto <span class=\"token comment\"># id 默认为自增长</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">update-strategy</span><span class=\"token punctuation\">:</span> NOT_EMPTY <span class=\"token comment\"># 更新时，只更新非空字段</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">insert-strategy</span><span class=\"token punctuation\">:</span> NOT_EMPTY <span class=\"token comment\"># 新增时，只新增非空字段</span></pre></td></tr></table></figure><br>\n<h3 id=\"引入分页插件-2\"><a class=\"anchor\" href=\"#引入分页插件-2\">#</a> 引入分页插件</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 注册 mybatis plus 的分页插件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">paginationInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">MybatisPlusInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 数据库类型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        paginationInnerInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setDbType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span>MYSQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 溢出总页数后是进行处理 (默认是否)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        paginationInnerInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setOverflow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        paginationInnerInterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">500L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span>paginationInnerInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><br>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<h4 id=\"service\"><a class=\"anchor\" href=\"#service\">#</a> Service</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CategoryService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Category</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"serviceimpl\"><a class=\"anchor\" href=\"#serviceimpl\">#</a> ServiceImpl</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CategoryServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Category</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CategoryService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"mapper\"><a class=\"anchor\" href=\"#mapper\">#</a> Mapper</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CategoryMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Category</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "MySQL",
                "数据库",
                "mybatis-plus"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/3/ead1dab4ce75/",
            "url": "https://shaogezhu.cn/2022/3/ead1dab4ce75/",
            "title": "JVM垃圾收集-ZGC的染色指针",
            "date_published": "2022-03-19T17:25:23.000Z",
            "content_html": "<div class=\"note info\">\n<p>JVM 垃圾回收系列（三）：染色指针</p>\n</div>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言：</h2>\n<p>🥂介绍染色指针之前，大家先回顾以下上一篇文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hhb2dlemh1LmNuLzIwMjIvMy8zYTY4MTg5MmY5MGMv\">《JVM 垃圾收集 - 三色标记》</span> ，大部分追踪式垃圾收集器在并发标记阶段都采用了三色标记技术。但也有例外，比如：ZGC 收集器有一个标志性的设计，就是采用了<font color=\"blue\"><strong>染色指针技术</strong></font>(Colored Pointer，其他类似的技术中可能将它称为 Tag Pointer 或者 Version Pointer)。下面就来介绍一下染色指针。</p>\n<h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<p>🌴🌴之前，如果我们要<strong>在对象上存储一些额外的、只供收集器或者虚拟机本身使用的数据</strong>，通常会在对象头中增加额外的存储字段，如对象的哈希码、分代年龄、锁记录等就是这样存储的。比如 64 位的 JVM，对象头的 Mark Word 中保存的信息如下图：</p>\n<p><img data-src=\"/assets/2022-3/jm1.png\" alt=\"image.png\" /></p>\n<p>🎈这种记录方式在<font color=\"purple\"><strong>有对象访问的场景下</strong></font>是很自然流畅的，不会有什么额外负担。但如果有一些对象根本就不会去访问它，但又希望得知该对象的某些信息的场景呢？</p>\n<p>我们就有这样的场景 —— 追踪式收集算法的标记阶段就可能存在<font color=\"green\"><strong>只跟指针打交道而不必涉及指针所引用的对象本身</strong></font>的场景。</p>\n<p>🌰例如 对象标记的过程中需要给对象打上三色标记，这些标记本质上就<strong>只和对象的引用有关，而与对象本身无关</strong> —— 某个对象只有它的引用关系能决定它存活与否，对象上其他所有的属性都不能够影响它的存活判定结果。</p>\n<p>👩HotSpot 虚拟机的几种收集器有不同的标记实现方案：</p>\n<ul>\n<li>📍 把标记直接记录在对象头上 (Serial 收集器）</li>\n<li>📍 把标记记录在与对象相互独立的数据结构上 (G1、Shenandoah 使用了一种相当于堆内存的 1/64 大小的，称为 BitMap 的结构来记录标记信息）</li>\n<li>📍 ZGC 的染色指针<strong>直接把标记信息记在引用对象的指针上</strong>（这个时候，与其说可达性分析是遍历对象图来标记对象，还不如说是遍历 “引用图” 来标记 “引用” 了。）</li>\n</ul>\n<br>\n<h2 id=\"染色指针\"><a class=\"anchor\" href=\"#染色指针\">#</a> 染色指针</h2>\n<p>✨<font color=\"purple\"><strong>染色指针是一种直接将少量额外的信息存储在指针上的技术</strong></font>。在 64 位 Linux 中，对象指针是 64 位，如下图：</p>\n<p><img data-src=\"/assets/2022-3/jm2.png\" alt=\"image.png\" /></p>\n<p>👉🏻在这个 64 位的指针上，高 18 位都是 0，暂时不用来寻址。剩余的 46 位指针所能支持内存可以达到 64TB , 这可以满足多数大型服务器的需要了。不过 ZGC 并没有把 46 位都用来保存对象信息，而是用高 4 位保存了四个标志位，导致 ZGC 可以管理的最大内存不超过 4 TB 。</p>\n<p>⭐⭐通过这四个标志位，JVM 可以<strong>从指针上直接看到</strong>对象的三色标记状态（Marked0、Marked1）、是否进入了重分配集（Remapped）、是否需要通过 finalize 方法来访问到（Finalizable）等信息。</p>\n<p><strong>无需进行对象访问就可以获得 GC 信息，这大大提高了 GC 效率。</strong> 🚀🚀🚀</p>\n<p>🍺可以看到染色指针的优点已经很明显了。不过，要使用染色指针有一个必须解决的<font color=\"orange\"><strong>前置问题</strong></font>：Java 虚拟机作为一个普普通通的进程，这样随意重新定义内存中某些指针的其中几位，操作系统是否支持？处理器是否支持？🤷‍</p>\n<p>👩🏻‍程序代码最终都要转换为机器指令流交付给处理器去执行，处理器可不会管指令流中的指针哪部分存的是标志位，哪部分才是真正的寻址地址，只会把整个指针都视作一个内存地址来对待。</p>\n<p>🎈在我们常用的 x86-64 平台上是不支持重新定义机器指令的，ZGC 设计者们就采用了<strong>虚拟内存映射技术</strong>来解决这个问题。</p>\n<br>\n<h2 id=\"虚拟内存映射\"><a class=\"anchor\" href=\"#虚拟内存映射\">#</a> 虚拟内存映射</h2>\n<p>🍬在 x86 平台上，处理器会使用分页管理机制把<font color=\"blue\"><strong>线性地址空间</strong></font>和<font color=\"orange\"><strong>物理地址空间</strong></font>分别划分为大小相同的块，这样的内存块被称为 **“页”(Page)**。通过在线性虚拟空间的页与物理地址空间的页之间建立的映射表，分页管理机制会进行线性地址到物理地址空间的映射，完成线性地址到物理地址的转换。<br />\n<br><br />\n✨简单的理解为：<strong>用 mmap 把不同的虚拟内存地址映射到同一个物理内存地址上。</strong> 如下图所示：</p>\n<p><img data-src=\"/assets/2022-3/jm3.png\" alt=\"image.png\" /></p>\n<p>🍋ZGC 为了解决上面的寻址地址问题，使用了虚拟内存映射技术，<strong>把同一块儿物理内存映射为 Marked0、Marked1 和 Remapped 三个虚拟内存</strong>。</p>\n<p>🍹当应用程序创建对象时，会在堆上申请一个虚拟地址，这时 ZGC 会为这个对象在 Marked0、Marked1 和 Remapped 这三个视图空间分别申请一个虚拟地址，这三个虚拟地址映射到同一个物理地址。</p>\n<p>🍦<font color=\"green\"><strong>Marked0、Marked1 和 Remapped 这三个虚拟内存作为 ZGC 的三个视图空间</strong></font>，在同一个时间点内只能有一个有效。ZGC 就是通过这三个视图空间的切换，来完成并发的垃圾回收。</p>\n<p>🙇好了关于染色指针的就介绍到这里，大家有什么疑问欢迎评论区讨论。<br />\n<br></p>\n<p><strong>PS：</strong> 在 JDK 15 中 ，已经可以通过指令 –XX:+UseZGC 来启用采用染色指针技术的 ZGC 收集器了。<br />\n🚀🚀🚀</p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "JVM",
                "java",
                "垃圾回收"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/3/24dc16aab990/",
            "url": "https://shaogezhu.cn/2022/3/24dc16aab990/",
            "title": "JVM垃圾回收-三色标记",
            "date_published": "2022-03-11T17:25:23.000Z",
            "content_html": "<div class=\"note info\">\n<p>JVM 垃圾回收系列（二）：三色标记</p>\n</div>\n<p>🍋 这次给大家介绍一下 JVM 垃圾回收<strong>可达性分析算法</strong>的实现原理。</p>\n<p>🎈🎈🎈上篇文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hhb2dlemh1LmNuLzIwMjIvMy9jOGQ2ZmNkYjZmMDcv\">《JVM 垃圾回收 - 记忆集和卡表》</span> 已经和大家介绍了 JVM 是如何快速的扫描和标记 GC Roots 的。标记\t完 GC Roots 之后，JVM 就需要从 GC Roots 开始遍历整个对象图了（即并发标记的过程）。<br />\n<br></p>\n<p><strong>那么 JVM 又是如何遍历对象图的呢？</strong></p>\n<p>☕现代大多数跟踪垃圾收集器 (如 CMS、G1、Shenandoah) 都实现<span class=\"blue\"><strong>三色标记</strong></span>抽象的一些变体来对 “垃圾” 进行标记的。之所以都选择三色标记是因为它能够<strong>解决或者降低用户线程的停顿时间。</strong> 🚀🚀🚀</p>\n<p>下面就进入本文正题：</p>\n<h2 id=\"三色标记\"><a class=\"anchor\" href=\"#三色标记\">#</a> 三色标记</h2>\n<p>☘三色标记算法把遍历对象图过程中遇到的对象，按照 “是否被访问过” 分为以下三种颜色：</p>\n<ul>\n<li><strong>白色✨：</strong> 表示对象尚未被垃圾收集器访问过。 <span class=\"grey\">（显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达）</span></li>\n<li><strong>灰色✨：</strong> 表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。</li>\n<li><strong>黑色✨：</strong> 表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。 <span class=\"grey\">（黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接 (不经过灰色对象) 指向某个白色对象）</span></li>\n</ul>\n<p>🌴🌴下面来看一下三色标记遍历对象图的大致过程：<br />\n<img data-src=\"/assets/2022-3/jjm.gif\" alt=\"image.png\" /></p>\n<p><strong>⭐初始状态</strong>只有 GC Roots 是黑色的。被 GC Roots 直接引用的对象会变成灰色</p>\n<p><strong>⭐扫描过程中</strong>，按照以下两点扫描整个引用链</p>\n<ul>\n<li>当前灰色节点没有子节点的话，将当前节点变为黑色。</li>\n<li>当前灰色节点有子节点的话，当前节点变为黑色，且子节点变为灰色。</li>\n</ul>\n<p><strong>⭐扫描完成时</strong>，黑色对象就是存活的对象，白色对象就是已消亡可回收的对象</p>\n<p>扫描完成之后，垃圾收集器只需要回收仍然是白色的对象所占用的内存即可。乍一看上面的过程好像没有什么问题，但是不要忘了我们的<span class=\"green\"><strong>收集线程是和用户线程并发执行的</strong></span>。🚀🚀🚀</p>\n<p>🌻🌻那么就会遇到一些问题了，我们的收集器在对象图上标记颜色的同时，用户线程在修改引用关系 —— 即修改对象图的结构，这样可能会出现下面两种后果：</p>\n<p>📍一种是<font color=\"red\"><strong>把原本消亡的对象错误标记为存活</strong></font>，这不是好事，但其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。</p>\n<p>📍另一种是<font color=\"red\"><strong>把原本存活的对象错误标记为已消亡</strong></font>，这就是非常致命的后果了，程序肯定会因此发生错误。</p>\n<p>下面来演示一下上面的错误具体是如何产生的。</p>\n<h3 id=\"第一种浮动垃圾\"><a class=\"anchor\" href=\"#第一种浮动垃圾\">#</a> 第一种：浮动垃圾</h3>\n<p>🍺假设 GC 线程已经遍历到 E（变为灰色了），此时 D &gt; E 的引用断开：</p>\n<p><img data-src=\"/assets/2022-3/jjm1.png\" alt=\"image.png\" /></p>\n<p>D &gt; E 的引用断开之后，E、H、G 三个对象不可达，应该要被回收的。然而因为 E 已经变为灰色了，其仍会被当作存活对象继续遍历下去。最终的结果是：这部分对象仍会被标记为存活，即本轮 GC 不会回收这部分内存。</p>\n<p>👩这部分本应该回收但是没有回收到的内存，被称之为浮动垃圾。浮动垃圾并不会影响应用程序的正确性，下次收集时清理掉就好。</p>\n<br>\n<h3 id=\"第二种对象消失\"><a class=\"anchor\" href=\"#第二种对象消失\">#</a> 第二种：“对象消失”</h3>\n<p>🍬假设 GC 线程已经遍历到 E（变为灰色了），此时 E &gt; G 的引用断开，新增 D &gt; G 的引用：</p>\n<p><img data-src=\"/assets/2022-3/jjm2.png\" alt=\"image.png\" /></p>\n<p>👀此时因为 E 已经没有对 G 的引用了，所以不会将 G 置为灰色；尽管因为 D 重新引用了 G，但因为 D 已经是黑色了，不会再重新做遍历处理。</p>\n<p>🍑最终导致的结果是：G 会一直是白色，最后被当作垃圾进行清除。这就是非常致命的后果了，程序肯定会因此发生错误，是不可以接受的。</p>\n<br>\n<p>🥇我们很容易看到发生这种错误是需要同时满足以下两个条件才可以成立的：</p>\n<p><strong>第一个条件：</strong> 赋值器插入了一条或多条从黑色对象到白色对象的新引用。(即新增 D&gt; G 的引用)</p>\n<p><strong>第二个条件：</strong> 赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。(即断开 E&gt; G 的引用)</p>\n<p>🍹我们要解决这个问题，只需破坏这两个条件中的任意一个条件 即可避免发生并发扫描时的对象消失问题。</p>\n<br>\n<p>🍍🍍先来破坏第一个条件，当黑色对象插入新的指向白色对象的引用关系时，我们就可以将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，<strong>黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。</strong> 这种解决方案称为<font color=\"blue\"><strong>增量更新</strong></font>。</p>\n<p>🍉🍉也可以破坏第二个条件，当灰色对象要删除指向白色对象的引用关系时，我们就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，<strong>无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。</strong> 这种解决方案称为<font color=\"green\"><strong>原始快照</strong></font>。</p>\n<br>\n<p>😎无论采用哪一种方案，都可以解决上面的问题。在 HotSpot 虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS 就是基于增量更新来做并发标记的，G1、Shenandoah 则是用原始快照方式来实现。</p>\n<p>🙇读完上面的内容，相信大家已经对 JVM 并发标记的过程有了一定的了解。JVM 虚拟机标记完不可达对象之后还需要对这些对象所占用的内存进行回收，具体的回收动作是由虚拟机采用哪款垃圾回收器所决定的。</p>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "JVM",
                "java",
                "垃圾回收"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2022/3/53fe22309155/",
            "url": "https://shaogezhu.cn/2022/3/53fe22309155/",
            "title": "JVM垃圾回收-记忆集和卡表",
            "date_published": "2022-03-05T16:23:23.000Z",
            "content_html": "<div class=\"note info\">\n<p>JVM 垃圾回收系列（一）：记忆集和卡表</p>\n</div>\n<p>🥂在说记忆集和卡表之前，先给大家介绍一下<strong>跨代引用</strong>的问题。</p>\n<p><img data-src=\"/assets/2022-3/jvm1.png\" alt=\"image\" /></p>\n<p>🏫假如要现在进行一次只局限于新生代区域内的收集 (Minor GC)，但新生代的实例对象 1 在老年代中被引用，为了找出该区域 (新生代) 中所有的存活对象，不得不在固定的 GC Roots 之外，再<strong>额外遍历整个老年代</strong>中所有对象来确保可达性分析结果的正确性，反过来也是一样。遍历整个老年代所有对象的方案虽然理论上可行，但无疑会为内存回收带来很大的性能负担。</p>\n<p>👉🏻事实上并不只是新生代、老年代之间才有<strong>跨代引用</strong>的问题，所有涉及部分区域收集（Partial GC) 行为的垃圾收集器，典型的如<span class=\"blue\"><strong> G1</strong></span>、<span class=\"blue\"><strong>ZGC</strong></span> 和<span class=\"blue\"><strong> Shenandoah</strong></span> 收集器，都会面临相同的问题。</p>\n<h2 id=\"那么如何才能解决跨代引用呢\"><a class=\"anchor\" href=\"#那么如何才能解决跨代引用呢\">#</a> 那么如何才能解决跨代引用呢？</h2>\n<p>首先，<strong>跨代引用相对于同代引用来说仅占极少数</strong>。原因是跨代引用的对象应该倾向于同时生存或者同时死亡的（举个🌰：如果某个新生代对象存在跨代引用，由于老年代对象难以消亡，该引用会使得新生代对象在收集时同样得以存活，进而在年龄增长之后晋升到老年代中，这时跨代引用也随即被消除了）。</p>\n<p>🌴🌴依据上面说所，就不应再为了少量的跨代引用去扫描整个老年代，也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用，只需在新生代上建立一个全局的数据结构（该结构被称为 <strong>“记忆集”</strong> ，Remembered Set)， <strong>这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。</strong> 此后当发生 Minor GC 时，只有包含了跨代引用的小块内存里的对象才会被加入到 GCRoots 进行扫描。虽然这种方法需要在对象改变引用关系 (如将自己或者某个属性赋值) 时维护记录数据的正确性，会增加一些运行时的开销，但比起收集时扫描整个老年代来说仍然是划算的。</p>\n<p>下面就来介绍一下这个全局的数据结构记忆集。</p>\n<h2 id=\"记忆集\"><a class=\"anchor\" href=\"#记忆集\">#</a> 记忆集</h2>\n<p>✨记忆集是一种用于记录从<span class=\"blue\"><strong>非收集区域</strong></span>指向<span class=\"pink\"><strong>收集区域</strong></span>的指针集合的<span class=\"red\"><strong>抽象</strong></span>数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构，如下面代码所示:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以对象指针来实现记忆集的伪代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Class</span> <span class=\"token class-name\">RememberedSet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> set<span class=\"token punctuation\">[</span>OBJECT_INTERGENERATIONAL_REFERENCE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>🎈这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，<strong>收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了</strong>，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本。下面列举了一些可供选择（当然也可以选择这个范围以外的）的记录精度：</p>\n<ul>\n<li><strong>字长精度：</strong> 每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的 32 位或 64 位，这个 精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。</li>\n<li><strong>对象精度：</strong> 每个记录精确到一个对象，该对象里有字段含有跨代指针。</li>\n<li><strong>卡精度：</strong> 每个记录精确到一块内存区域，该区域内有对象含有跨代指针。</li>\n</ul>\n<p>🍍🍍上面的，第三种 “卡精度” 所指的是用一种称为 <strong>“卡表”(Card Table)</strong> 的方式去实现记忆集，这也是目前最常用的记忆集的实现形式。</p>\n<h3 id=\"卡表和记忆集又有什么关系呢\"><a class=\"anchor\" href=\"#卡表和记忆集又有什么关系呢\">#</a> 卡表和记忆集又有什么关系呢？</h3>\n<p>👀前面介绍记忆集的时候提到 记忆集其实是一种<span class=\"red\"><strong> &quot; 抽象”</strong></span> 的数据结构，抽象的意思是<span class=\"orange\">只定义了记忆集的行为意图，并没有定义其行为的具体实现</span>。<strong><span class=\"blue\">卡表</span>就是记忆集的一种具体实现</strong>，它定义了记忆集的记录精度、与堆内存的映射关系等。关于记忆集与卡表的关系，可以按照 Java 中 Map 与 HashMap 的关系来类比理解（即接口和实现类来的关系）。</p>\n<p>🍋下面来详细说一下记忆集的具体实现卡表</p>\n<h2 id=\"卡表\"><a class=\"anchor\" href=\"#卡表\">#</a> 卡表</h2>\n<p>✨卡表是使用一个 ** 字节数组 CARD_TABLE [] ** 实现，每个元素对应其标识的内存区域一块特定大小的内存块，每个内存块称为卡页，hotspot 使用的卡页是 2^9 大小 即 512 字节。如下图所示</p>\n<p><img data-src=\"/assets/2022-3/jvm2.png\" alt=\"image\" /></p>\n<p>🍦这样我们就可以把某个区域按照卡页进行划分，假如我们现在要对新生代区域进行垃圾回收，那么就可以把老年代区域看成是一个卡页一个卡页划分好的，如下图所示。</p>\n<p><img data-src=\"/assets/2022-3/jvm3.png\" alt=\"image\" /></p>\n<p>如图所示🍹，因为 cardpage1 中存在指向新生代的跨代引用，所以对应卡表的第一个位置为 1，表明该 page 区域存在跨代应用的对象。</p>\n<p><strong>📍卡表角度：</strong> 因为 page1 中存在跨代饮用的对象，所以卡表对应的第一个位置记为 1，表明 page1 这个元素变脏。</p>\n<p><strong>📍内存回收角度：</strong> 因为卡表的第一个位置为 1，表明该 page 区域存在跨代应用的对象，垃圾回收的时候需要扫描该区域。</p>\n<p>😎一个卡页的内存中通常包含不止一个对象，只要卡页内有一个 (或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为 1，称为这个<span class=\"purple\">元素变脏（Dirty)</span>，没有则标识为 0。在垃圾收集发生时， <strong>只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入 GC Roots 中一并扫描。</strong> 这样就不需要扫描整个老年代大大减少 GC Roots 的扫描范围。</p>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "JVM",
                "java",
                "垃圾回收"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/11/275d4281e1a0/",
            "url": "https://shaogezhu.cn/2021/11/275d4281e1a0/",
            "title": "MySQL中：一条update语句是怎样执行的",
            "date_published": "2021-11-30T15:29:53.000Z",
            "content_html": "<div class=\"note info\">\n<p>🥂上一篇文章说完 MySQL 的事务和锁了，这次来详细介绍一下在 MySQL 中一条更新语句的详细执行流程 (本文无特殊说明均是采用 Innodb 存储引擎)。</p>\n</div>\n<h2 id=\"前期准备\"><a class=\"anchor\" href=\"#前期准备\">#</a> 前期准备</h2>\n<p>⭐⭐首先创建一张表，然后插入三条数据：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> T<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tID <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tc <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'测试表'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> T<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>让后执行更新操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">update</span> T <span class=\"token keyword\">set</span> c<span class=\"token operator\">=</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">where</span> ID<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在说更新操作前，大家先来看一下 sql 语句在 MySQL 中的执行流程🍬~</p>\n<h2 id=\"sql语句的执行过程\"><a class=\"anchor\" href=\"#sql语句的执行过程\">#</a> SQL 语句的执行过程</h2>\n<p><img data-src=\"/assets/2021-11/sql1.png\" alt=\"image.png\" /></p>\n<p>👩如图所示：MySQL 数据库主要分为两个层级：<strong>服务层</strong>和<strong>存储引擎层服务层</strong>：<span class=\"blue\"><strong>server 层包括</strong></span>：连接器、查询缓存、分析器、优化器、执行器，包括大多数 MySQL 中的核心功能所有跨存储引擎的功能也在这一层实现，包括 存储过程、触发器、视图等。 <span class=\"purple\"><strong>存储引擎层</strong></span>：存储引擎层包括 MySQL 常见的存储引擎，包括 MyISAM、InnoDB 和 Memory 等，最常用的是 InnoDB，也是现在 MySQL 的默认存储引擎。</p>\n<h3 id=\"server层中的组件介绍\"><a class=\"anchor\" href=\"#server层中的组件介绍\">#</a> server 层中的组件介绍</h3>\n<ol>\n<li><strong>连接器✨：</strong> 需要 MySQL 客户端登录，需要一个 连接器 来连接用户和 MySQL 数据库，“mysql -u 用户名 -p 密码” 进行 MySQL 登录，在完成 TCP 握手 后，连接器会根据输入的用户名和密码验证登录身份。</li>\n<li><strong>查询缓存✨：</strong> MySQL 在得到一个执行请求后，会首先去 查询缓存 中查找，是否执行过这条 SQL 语句，之前执行过得语句以及结果会以 key-value 对的形式，放在内存中。key 是查询语句，value 是查询的结果。如果通过 key 能够查找到这条 SQL 语句，直接返回 SQL 的执行结果。若不存在缓存中，就会继续后面的执行阶段。执行完成后，执行结果就会被放入查询缓存中。优点是效率高。但是查询缓存不建议使用， 因为在 MySQL 中对某张表进行了更新操作，那么所有的查询缓存就会失效，对于更新频繁的数据库来说，查询缓存的命中率很低。需要注意：在 MySQL8.0 版本，查询缓存功能就删除了，不存在查询缓存的功能了</li>\n<li><strong>分析器✨:</strong> 分为词法分析和语法分析\n<ul>\n<li><strong>词法分析：</strong> 首先，MySQL 会根据 SQL 语句进行解析，分析器会先做 词法分析，你写的 SQL 就是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串是什么，代表什么。</li>\n<li><strong>语法分析：</strong> 然后进行 语法分析， 根据词法分析的结果，语法分析器会根据语法规则，判断输入的这个 SQL 语句是否满足 MySQL 语法。如果 SQL 语句不正确，就提示：You have an error in your SQL suntax</li>\n</ul>\n</li>\n<li><strong>优化器✨：</strong> 经过分析器分析后，SQL 就合法了，但在执行之前，还需要进行优化器的处理，<font color=\"blue\">优化器会判断使用了哪种索引，使用哪种连接</font>，优化器的作用 就是确定效率最高的执行方案。</li>\n<li><strong>执行器✨：</strong> 在执行阶段，MySQL 首先会判断有没有执行语句的权限，若无权限，返回没有权限的错误；若有权限，就打开表继续执行。打开表时，执行器会根据标的引擎定义，去使用该引擎提供的接口，对于有索引的表，执行的逻辑类似。</li>\n</ol>\n<p>了解完 SQL 语句的执行流程我们接下来详细分析一下上面 <code>update T set c=c+1 where ID=2;</code>  是如何执行的。</p>\n<h2 id=\"update语句分析\"><a class=\"anchor\" href=\"#update语句分析\">#</a> Update 语句分析</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">update</span> T <span class=\"token keyword\">set</span> c<span class=\"token operator\">=</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">where</span> ID<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>🏅在执行<strong> update 更新</strong>操作的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。接下来，分析器会经过语法分析和词法分析，知道了这是一条更新语句后，优化器决定要使用哪一个索引，然后执行器负责具体的执行，先找到这一行，然后做更新。</p>\n</blockquote>\n<p>按照我们平常的思路，就是 <strong>找出这条记录，把它的值改好，保存就 OK 了</strong> 。但我们追究一下细节，由于涉及到修改数据，所以涉及到日志了。更新操作涉及到两个重要的日志模块。 <code>redo log(重做日志)</code> ， <code>bin log(归档日志)</code> 。MySQL 中的这两个日志也是必学的。</p>\n<h3 id=\"redo-log重做日志\"><a class=\"anchor\" href=\"#redo-log重做日志\">#</a> redo log (重做日志)</h3>\n<ul>\n<li>在 MySQL 里，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。<br />\nMySQL 里使用 WAL (预写式日志) 技术，WAL 的全称是  <code>Write-Ahead Logging</code> ，它的关键点就是 <strong><font color=\"red\">先写日志，再写磁盘</font></strong>。</li>\n<li>具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log 里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</li>\n<li>InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写。</li>\n</ul>\n<p>听完上面对 redo log 日志的介绍后，小伙伴们可能会问： <code>redo log日志存储在哪？</code> ，   <code>数据库信息保存在磁盘上，redo log日志也保存在磁盘上，为什么要先写到redo log中再写到数据库中呢？</code> ， <code>redo log日志如果存满数据了怎么办？</code> 等等。接下来就解答一下这些疑问。</p>\n<h4 id=\"redo-log存储在哪里\"><a class=\"anchor\" href=\"#redo-log存储在哪里\">#</a> redo log 存储在哪里？</h4>\n<p>🍦InnoDB 引擎先把记录写到 redo log 中，redo log 在哪，它也是在磁盘上，这也是一个写磁盘的过程， 但是与更新过程不一样的是，更新过程是在磁盘上随机 IO，费时。 而写 redo log 是在磁盘上顺序 IO。效率要高。</p>\n<h4 id=\"redo-log-空间是固定那它会不会用完呢\"><a class=\"anchor\" href=\"#redo-log-空间是固定那它会不会用完呢\">#</a> redo log 空间是固定，那它会不会用完呢？</h4>\n<p>🍹首先不用担心 redo log 会用完空间，因为它是<strong>循环利用</strong>的。例如 redo log 日志配置为一组 4 个文件，每个文件分别为 1G。它写的流程如下图：<br />\n<img data-src=\"/assets/2021-11/sql2.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p><strong>简单总结一下:</strong> redo log 日志是 Innodb 存储引擎特有的机制，可以用来应对<strong>异常恢复</strong>，<strong>Crash-safe</strong>，redo 可以保证 mysql 异常重启时，将未提交的事务回滚，已提交的事务安全落库。</p>\n</blockquote>\n<p><strong>crash-safe:</strong> 有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p>\n<h3 id=\"binlog归档日志\"><a class=\"anchor\" href=\"#binlog归档日志\">#</a> binlog (归档日志)</h3>\n<p>🙇redo log 是 innoDB 引擎特有的日志。而 binlog 是 mysql server 层的日志。</p>\n<blockquote>\n<p>其实 bin log 日志出现的时间比 redo log 早，因为最开始 MySQL 是没有 InnoDB 存储引擎的，5.5 之前是 MyISAM。但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统 —— 也就是 redo log 来实现 crash-safe 能力。</p>\n</blockquote>\n<h4 id=\"redo-log和bin-log的总结\"><a class=\"anchor\" href=\"#redo-log和bin-log的总结\">#</a>  <code>redo log</code>  和 <code>bin log</code>  的总结📍:</h4>\n<ul>\n<li>redo log 是为了保证 innoDB 引擎的 crash-safe 能力，也就是说在 mysql 异常宕机重启的时候，之前提交的事务可以保证不丢失；(因为成功提交的事务肯定是写入了 redo log, 可以从 redo log 恢复)</li>\n<li>bin log 是归档日志，将每个更新操作都追加到日志中。这样当需要将日志恢复到某个时间点的时候，就可以根据全量备份 + bin log 重放实现。 如果没有开启 binlog, 那么数据只能恢复到全量备份的时间点，而不能恢复到任意时间点。如果连全量备份也没做，mysql 宕机，磁盘也坏了，那就很尴尬了。。</li>\n</ul>\n<h4 id=\"redo-log和bin-log的区别\"><a class=\"anchor\" href=\"#redo-log和bin-log的区别\">#</a>  <code>redo log</code>  和 <code>bin log</code>  的区别📍:</h4>\n<ul>\n<li>redo log 是 InnoDB 引擎特有的；bin log 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li>\n<li><strong>redo log 是物理日志</strong>，记录的是 “在某个数据页上做了什么修改”；<strong>bin log 是逻辑日志</strong>，记录的是这个语句的原始逻辑，比如 “给 ID=2 这一行的 c 字段加 1”。</li>\n<li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写” 是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>\n</ul>\n<h2 id=\"innodb引擎部分在执行这个简单的update语句的时候的内部流程\"><a class=\"anchor\" href=\"#innodb引擎部分在执行这个简单的update语句的时候的内部流程\">#</a> InnoDB 引擎部分在执行这个简单的 update 语句的时候的内部流程</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">update</span> T <span class=\"token keyword\">set</span> c<span class=\"token operator\">=</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">where</span> ID<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/2021-11/sql3.png\" alt=\"image.png\" /></p>\n<p><strong>👀手动用 begin 开启事务，然后执行 update 语句，再然后执行 commit 语句，那上面的 update 更新流程之前 哪些是 update 语句执行之后做的，哪些是 commit 语句执行之后做的？</strong></p>\n<blockquote>\n<p>事实上🍋，redo log 在内存中有一个 <code>redo log buffer</code> ,binlog 也有一个 <code>binlog cache</code> . 所以在手动开启的事务中，你执行 sql 语句，其实是写到 <code>redo log buffer</code>  和 <code>binlog cache</code>  中去的 (肯定不可能是直接写磁盘日志，一个是性能差一个是回滚的时候不可能去回滚磁盘日志吧)，然后当你执行 commit 的时候，首先要将 redo log 的提交状态游 prepare 改为 commit 状态，然后就要把 <code>binlog cache</code>  刷新到 binlog 日志 (可能也只是 flush 到操作系统的 page cache，这个就看你的 mysql 配置)， <code>redo log buffer</code>  刷新到 redo log 日志 (刷新时机也是可以配置的)。 如果你回滚的话，就只用把 <code>binlog cache</code>  和 <code>redo log buffer</code>  中的数据清除就行了。</p>\n</blockquote>\n <br>\n<p><strong>🎈在 update 过程中，mysql 突然宕机，会发生什么情况？</strong></p>\n<ol>\n<li>如果 redolog 写入了，处于 prepare 状态，binlog 还没写入，那么宕机重启后，redolog 中的这个事务就直接回滚了。</li>\n<li>如果 redolog 写入了，binlog 也写入了，但 redolog 还没有更新为 commit 状态，那么宕机重启以后，mysql 会去检查对应事务在 binlog 中是否完整。如果是，就提交事务；如果不是，就回滚事务。 (redolog 处于 prepare 状态，binlog 完整启动时就提交事务，为啥要这么设计？主要是因为 binlog 写入了，那么就会被从库或者用这个 binlog 恢复出来的库使用，为了数据一致性就采用了这个策略)<br />\n redo log 和 binlog 是通过 xid 这个字段关联起来的。</li>\n</ol>\n<p>🚀🚀🚀</p>\n<br>",
            "tags": [
                "Java",
                "学习笔记",
                "MySQL",
                "笔记"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/11/2a1449b2531c/",
            "url": "https://shaogezhu.cn/2021/11/2a1449b2531c/",
            "title": "MySQL常见的锁分析",
            "date_published": "2021-11-21T08:43:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>🌴🌴数据库锁定机制简单来说，就是数据库<strong>为了保证数据的一致性</strong>，而使各种共享资源在被并发访问变得有序所设计的一种规则。对于任何一种数据库来说都需要有相应的锁定机制，所以 MySQL 自然也不能例外。下面就给大家详细介绍一下</p>\n</div>\n<h2 id=\"mysql的锁\"><a class=\"anchor\" href=\"#mysql的锁\">#</a> MySQL 的锁</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>🌻🌻MySQL 数据库由于其自身架构的特点，存在多种数据存储引擎，每种存储引擎所针对的应用场景特点都不太一样，为了满足各自特定应用场景的需求，每种存储引擎的锁定机制都是为各自所面对的特定场景而优化设计，所以各存储引擎的锁定机制也有较大区别。本文没有说明的情况下默认使用的是 Innodb 引擎。</p>\n<h4 id=\"innodb原理简单说一下\"><a class=\"anchor\" href=\"#innodb原理简单说一下\">#</a> Innodb 原理 (简单说一下)：</h4>\n<ul>\n<li>innodb 一定存在聚簇索引，默认以主键作为聚簇索引🚀</li>\n<li>有几个索引，就有几棵 B + 树 (不考虑 hash 索引的情形)🚀</li>\n<li>聚簇索引的叶子节点为磁盘上的真实数据。非聚簇索引的叶子节点还是索引，指向聚簇索引 B + 树。🚀</li>\n</ul>\n<h2 id=\"锁的分类\"><a class=\"anchor\" href=\"#锁的分类\">#</a> 锁的分类</h2>\n<ul>\n<li><strong>共享锁 (S 锁)🔒:</strong> 假设事务 T1 对数据 A 加上共享锁，那么事务 T2 可以读数据 A，不能修改数据 A。</li>\n<li><strong>排他锁 (X 锁)🔒:</strong> 假设事务 T1 对数据 A 加上排他锁，那么事务 T2 不能读数据 A，不能修改数据 A。<br />\n我们通过 <code>update</code> 、 <code>delete</code>  等语句加上的锁都是行级别的锁。只有 <code>LOCK TABLE … READ</code>  和 <code>LOCK TABLE … WRITE</code>  才能申请表级别的锁。</li>\n<li><strong>意向共享锁 (IS 锁)🔒:</strong> 一个事务在获取（任何一行 / 或者全表）S 锁之前，一定会先在所在的表上加 IS 锁。</li>\n<li><strong>意向排他锁 (IX 锁)🔒:</strong> 一个事务在获取（任何一行 / 或者全表）X 锁之前，一定会先在所在的表上加 IX 锁。</li>\n</ul>\n<h3 id=\"意向锁存在的目的\"><a class=\"anchor\" href=\"#意向锁存在的目的\">#</a> 意向锁存在的目的</h3>\n<blockquote>\n<p>这里说一下意向锁存在的目的。假设事务 T1，用 X 锁来锁住了表上的几条记录，那么此时表上存在 IX 锁，即意向排他锁。那么此时事务 T2 要进行 <code>LOCK TABLE … WRITE</code>  的表级别锁的请求，可以直接根据意向锁是否存在而判断是否有锁冲突。🎈</p>\n</blockquote>\n<h3 id=\"加锁算法\"><a class=\"anchor\" href=\"#加锁算法\">#</a> 加锁算法</h3>\n<ul>\n<li><strong>Record Locks：</strong> 简单翻译为<strong>行锁</strong>。注意了，该锁是对索引记录进行加锁！锁是加在索引上而不是行上的。注意了，innodb 一定存在聚簇索引，因此行锁最终都会落到聚簇索引上！</li>\n<li><strong>Gap Locks：</strong> 简单翻译为<strong>间隙锁</strong>，是对索引的间隙加锁，其目的只有一个，防止其他事物插入数据。在 <code>Read Committed</code>  隔离级别下，不会使用间隙锁。这里我对官网补充一下，隔离级别比 <code>Read Committed</code>  低的情况下，也不会使用间隙锁，如隔离级别为 <code>Read Uncommited</code>  时，也不存在间隙锁。当隔离级别为 <code>Repeatable Read</code>  和 <code>Serializable</code>  时，就会存在间隙锁。</li>\n<li><strong>Next-Key Locks：</strong> 这个理解为 Record Lock + 索引前面的 Gap Lock。记住了，锁住的是索引前面的间隙！比如一个索引包含值，10，11，13 和 20。那么，间隙锁的范围如下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>negative infinity<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> positive infinity<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>还有不懂的地方可以看一下 MySQL 的官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2lubm9kYi1sb2NraW5nLmh0bWw=\">https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html</span></p>\n<h3 id=\"快照读和当前读\"><a class=\"anchor\" href=\"#快照读和当前读\">#</a> 快照读和当前读</h3>\n<blockquote>\n<p>在 mysql 中 select 分为快照读和当前读，执行下面的语句<br />\n <code>select * from table where id = ?; </code> <br />\n执行的是快照读，读的是数据库记录的快照版本，是不加锁的。（这种说法在隔离级别为 Serializable 中不成立，后面会再补充。）</p>\n</blockquote>\n<blockquote>\n<p>那么，执行<br />\n <code>select * from table where id = ? lock in share mode; </code> <br />\n会对读取记录加 S 锁 (共享锁)，执行\t<br />\n <code>select * from table where id = ? for update</code> <br />\n 会对读取记录加 X 锁 (排他锁)，那么加的是表锁还是行锁呢？</p>\n</blockquote>\n<h3 id=\"表锁or行锁\"><a class=\"anchor\" href=\"#表锁or行锁\">#</a> 表锁 or 行锁</h3>\n<p>🍦针对这点，我们先回忆一下事务的四个隔离级别，他们由弱到强如下所示:</p>\n<ul>\n<li><strong>Read Uncommited(RU)：</strong> 读未提交，一个事务可以读到另一个事务未提交的数据！</li>\n<li><strong>Read Committed (RC)：</strong> 读已提交，一个事务可以读到另一个事务已提交的数据！</li>\n<li><strong>Repeatable Read (RR):</strong> 可重复读，加入间隙锁，一定程度上避免了幻读的产生！注意了，只是一定程度上，并没有完全避免！我会在下一篇文章说明！另外就是记住从该级别才开始加入间隙锁 (这句话记下来，后面有用到)!</li>\n<li><strong>Serializable：</strong> 串行化，该级别下读写串行化，且所有的 <code>select</code>  语句后都自动加上 <code>lock in share mode</code> ，即使用了共享锁。因此在该隔离级别下，使用的是当前读，而不是快照读。</li>\n</ul>\n<p>那么关于是表锁还是行锁，大家可以看到网上最流传的一个说法是这样的</p>\n<blockquote>\n<p>InnoDB 行锁是通过给索引上的索引项加锁来实现的，这一点 MySQL 与 Oracle 不同，后者是通过在数据块中对相应数据行加锁来实现的。 InnoDB 这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB 才使用行级锁，否则，InnoDB 将使用表锁！</p>\n</blockquote>\n<p>🍋这句话大家可以搜一下，都是你抄我的，我抄你的。那么，这句话本身有两处错误！<br />\n<strong>错误一:</strong> 并不是用表锁来实现锁表的操作，而是利用了 <code>Next-Key Locks</code> ，也可以理解为是用了行锁 + 间隙锁来实现锁表的操作！</p>\n<p>为了便于说明，我来个例子，假设有表数据如下，pId 为主键索引</p>\n<table>\n<thead>\n<tr>\n<th>pId(int)</th>\n<th>name(varchar)</th>\n<th>num(int)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>aaa</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2</td>\n<td>bbb</td>\n<td>200</td>\n</tr>\n<tr>\n<td>7</td>\n<td>ccc</td>\n<td>200</td>\n</tr>\n</tbody>\n</table>\n<p>执行语句 (name 列无索引)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>aaa<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span></pre></td></tr></table></figure><p>那么此时在 pId=1,2,7 这三条记录上存在行锁 (把行锁住了)。另外，在 (-∞,1)(1,2)(2,7)(7,+∞) 上存在间隙锁 (把间隙锁住了)。因此，给人一种整个表锁住的错觉！</p>\n<p><strong>ps:</strong> 对该结论有疑问的，可自行执行 <code>show engine innodb status</code> ; 语句进行分析。</p>\n<p><strong>错误二:</strong> 所有文章都不提隔离级别！<br />\n注意上面说的，之所以能够锁表，是通过<strong>行锁 + 间隙锁</strong>来实现的。那么，RU 和 RC 都不存在间隙锁，这种说法在 RU 和 RC 中还能成立么？<br />\n因此，该说法只在 RR 和 Serializable 中是成立的。如果隔离级别为 RU 和 RC，无论条件列上是否有索引，都不会锁表，只锁行！</p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>🍹下面来对开始的问题作出解答，假设有表如下，pId 为主键索引</p>\n<table>\n<thead>\n<tr>\n<th>pId(int)</th>\n<th>name(varchar)</th>\n<th>num(int)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>aaa</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2</td>\n<td>bbb</td>\n<td>200</td>\n</tr>\n<tr>\n<td>3</td>\n<td>bbb</td>\n<td>300</td>\n</tr>\n<tr>\n<td>7</td>\n<td>ccc</td>\n<td>200</td>\n</tr>\n</tbody>\n</table>\n<p><strong>🍍🍍RC/RU + 条件列非索引</strong></p>\n<ol>\n<li><code>select * from table where num = 200</code> <br />\n 不加任何锁，是快照读。</li>\n<li><code>select * from table where num &gt; 200</code> <br />\n 不加任何锁，是快照读。</li>\n<li><code>select * from table where num = 200 lock in share mode</code> <br />\n 当 num = 200，有两条记录。这两条记录对应的 pId=2，7，因此在 pId=2，7 的聚簇索引上加行级 S 锁，采用当前读。</li>\n<li><code>select * from table where num &gt; 200 lock in share mode</code> <br />\n 当 num &gt; 200，有一条记录。这条记录对应的 pId=3，因此在 pId=3 的聚簇索引上加上行级 S 锁，采用当前读。</li>\n<li><code>select * from table where num = 200 for update</code> <br />\n 当 num = 200，有两条记录。这两条记录对应的 pId=2，7，因此在 pId=2，7 的聚簇索引上加行级 X 锁，采用当前读。</li>\n<li><code>select * from table where num &gt; 200 for update</code> <br />\n 当 num &gt; 200，有一条记录。这条记录对应的 pId=3，因此在 pId=3 的聚簇索引上加上行级 X 锁，采用当前读。</li>\n</ol>\n<p><strong>🍉🍉RC/RU + 条件列是聚簇索引</strong><br />\n恩，大家应该知道 pId 是主键列，因此 pId 用的就是聚簇索引。此情况其实和 RC/RU + 条件列非索引情况是类似的。</p>\n<ol>\n<li><code>select * from table where pId = 2</code> <br />\n 不加任何锁，是快照读。</li>\n<li><code>select * from table where pId &gt; 2</code> <br />\n 不加任何锁，是快照读。</li>\n<li><code>select * from table where pId = 2 lock in share mode</code> <br />\n 在 pId=2 的聚簇索引上，加 S 锁，为当前读。</li>\n<li><code>select * from table where pId &gt; 2 lock in share mode</code> <br />\n 在 pId=3，7 的聚簇索引上，加 S 锁，为当前读。</li>\n<li><code>select * from table where pId = 2 for update</code> <br />\n 在 pId=2 的聚簇索引上，加 X 锁，为当前读。</li>\n<li><code>select * from table where pId &gt; 2 for update</code> <br />\n 在 pId=3，7 的聚簇索引上，加 X 锁，为当前读。</li>\n</ol>\n<h3 id=\"为什么条件列加不加索引加锁情况是一样的\"><a class=\"anchor\" href=\"#为什么条件列加不加索引加锁情况是一样的\">#</a> 为什么条件列加不加索引，加锁情况是一样的？</h3>\n<blockquote>\n<p>其实是不一样的。在 RC/RU 隔离级别中，MySQL Server 做了优化。在条件列没有索引的情况下，尽管通过聚簇索引来扫描全表，进行全表加锁。但是，MySQL Server 层会进行过滤并把不符合条件的锁当即释放掉，因此你看起来最终结果是一样的。但是 RC/RU + 条件列非索引比本例多了一个释放不符合条件的锁的过程！</p>\n</blockquote>\n<p><strong>🍍🍍RC/RU + 条件列是非聚簇索引</strong><br />\n👉🏻我们在 num 列上建上非唯一索引。此时有一棵聚簇索引 (主键索引，pId) 形成的 B + 索引树，其叶子节点为硬盘上的真实数据。以及另一棵非聚簇索引 (非唯一索引，num) 形成的 B + 索引树，其叶子节点依然为索引节点，保存了 num 列的字段值，和对应的聚簇索引。</p>\n<p>接下来分析开始👀</p>\n<ol>\n<li><code>select * from table where num = 200</code> <br />\n 不加任何锁，是快照读。</li>\n<li><code>select * from table where num &gt; 200</code> <br />\n 不加任何锁，是快照读。</li>\n<li><code>select * from table where num = 200 lock in share mode</code> <br />\n 当 num = 200，由于 num 列上有索引，因此先在 num = 200 的两条索引记录上加行级 S 锁。接着，去聚簇索引树上查询，这两条记录对应的 pId=2，7，因此在 pId=2，7 的聚簇索引上加行级 S 锁，采用当前读。</li>\n<li><code>select * from table where num &gt; 200 lock in share mode</code> <br />\n 当 num &gt; 200，由于 num 列上有索引，因此先在符合条件的 num = 300 的一条索引记录上加行级 S 锁。接着，去聚簇索引树上查询，这条记录对应的 pId=3，因此在 pId=3 的聚簇索引上加行级 S 锁，采用当前读。</li>\n<li><code>select * from table where num = 200 for update</code> <br />\n 当 num = 200，由于 num 列上有索引，因此先在 num = 200 的两条索引记录上加行级 X 锁。接着，去聚簇索引树上查询，这两条记录对应的 pId=2，7，因此在 pId=2，7 的聚簇索引上加行级 X 锁，采用当前读。</li>\n<li><code>select * from table where num &gt; 200 for update</code> <br />\n 当 num &gt; 200，由于 num 列上有索引，因此先在符合条件的 num = 300 的一条索引记录上加行级 X 锁。接着，去聚簇索引树上查询，这条记录对应的 pId=3，因此在 pId=3 的聚簇索引上加行级 X 锁，采用当前读。</li>\n</ol>\n<p><strong>RR/Serializable + 条件列非索引📍</strong><br />\nRR 级别需要多考虑的就是 <code>gap lock</code> ，他的加锁特征在于，无论你怎么查都是锁全表。如下所示<br />\n接下来分析开始</p>\n<ol>\n<li><code>select * from table where num = 200</code> <br />\n 在 RR 级别下，不加任何锁，是快照读。<br />\n在 Serializable 级别下，在 pId = 1,2,3,7（全表所有记录）的聚簇索引上加 S 锁。并且在<br />\n聚簇索引的所有间隙 (-∞,1)(1,2)(2,3)(3,7)(7,+∞) 加 gap lock</li>\n<li><code>select * from table where num &gt; 200</code> <br />\n 在 RR 级别下，不加任何锁，是快照读。<br />\n在 Serializable 级别下，在 pId = 1,2,3,7（全表所有记录）的聚簇索引上加 S 锁。并且在<br />\n聚簇索引的所有间隙 (-∞,1)(1,2)(2,3)(3,7)(7,+∞) 加 gap lock</li>\n<li><code>select * from table where num = 200 lock in share mode</code> <br />\n 在 pId = 1,2,3,7（全表所有记录）的聚簇索引上加 S 锁。并且在<br />\n聚簇索引的所有间隙 (-∞,1)(1,2)(2,3)(3,7)(7,+∞) 加 gap lock</li>\n<li><code>select * from table where num &gt; 200 lock in share mode</code> <br />\n 在 pId = 1,2,3,7（全表所有记录）的聚簇索引上加 S 锁。并且在<br />\n聚簇索引的所有间隙 (-∞,1)(1,2)(2,3)(3,7)(7,+∞) 加 gap lock</li>\n<li><code>select * from table where num = 200 for update</code> <br />\n 在 pId = 1,2,3,7（全表所有记录）的聚簇索引上加 X 锁。并且在<br />\n聚簇索引的所有间隙 (-∞,1)(1,2)(2,3)(3,7)(7,+∞) 加 gap lock</li>\n<li><code>select * from table where num &gt; 200 for update</code> <br />\n 在 pId = 1,2,3,7（全表所有记录）的聚簇索引上加 X 锁。并且在<br />\n聚簇索引的所有间隙 (-∞,1)(1,2)(2,3)(3,7)(7,+∞) 加 gap lock</li>\n</ol>\n<p><strong>RR/Serializable + 条件列是聚簇索引📍</strong><br />\n恩，大家应该知道 pId 是主键列，因此 pId 用的就是聚簇索引。该情况的加锁特征在于，如果 where 后的条件为精确查询 (= 的情况)，那么只存在 record lock。如果 where 后的条件为范围查询 (&gt; 或 &lt; 的情况)，那么存在的是 record lock+gap lock。</p>\n<ol>\n<li><code>select * from table where pId = 2</code> <br />\n 在 RR 级别下，不加任何锁，是快照读。<br />\n在 Serializable 级别下，是当前读，在 pId=2 的聚簇索引上加 S 锁，不存在 gap lock。</li>\n<li><code>select * from table where pId &gt; 2</code> <br />\n 在 RR 级别下，不加任何锁，是快照读。<br />\n在 Serializable 级别下，是当前读，在 pId=3,7 的聚簇索引上加 S 锁。在 (2,3)(3,7)(7,+∞) 加上 gap lock</li>\n<li><code>select * from table where pId = 2 lock in share mode</code> <br />\n 是当前读，在 pId=2 的聚簇索引上加 S 锁，不存在 gap lock。</li>\n<li><code>select * from table where pId &gt; 2 lock in share mode</code> <br />\n 是当前读，在 pId=3,7 的聚簇索引上加 S 锁。在 (2,3)(3,7)(7,+∞) 加上 gap lock</li>\n<li><code>select * from table where pId = 2 for update</code> <br />\n 是当前读，在 pId=2 的聚簇索引上加 X 锁。</li>\n<li><code>select * from table where pId &gt; 2 for update</code> <br />\n 在 pId=3,7 的聚簇索引上加 X 锁。在 (2,3)(3,7)(7,+∞) 加上 gap lock</li>\n<li><code>select * from table where pId = 6 [lock in share mode|for update]</code> <br />\n 注意了，pId=6 是不存在的列，这种情况会在 (3,7) 上加 gap lock。</li>\n<li><code>select * from table where pId &gt; 18 [lock in share mode|for update]</code> <br />\n 注意了，pId&gt;18，查询结果是空的。在这种情况下，是在 (7,+∞) 上加 gap lock。</li>\n</ol>\n<p><strong>RR/Serializable + 条件列是非聚簇索引📍</strong></p>\n<blockquote>\n<p>这里非聚簇索引，需要区分是否为唯一索引。因为如果是非唯一索引，间隙锁的加锁方式是有区别的。</p>\n</blockquote>\n<blockquote>\n<p>先说一下，唯一索引的情况。如果是唯一索引，情况和 RR/Serializable + 条件列是聚簇索引类似，唯一有区别的是：这个时候有两棵索引树，加锁是加在对应的非聚簇索引树和聚簇索引树上！大家可以自行推敲！</p>\n</blockquote>\n<p>下面说一下，非聚簇索引是非唯一索引的情况，他和唯一索引的区别就是通过索引进行精确查询以后，不仅存在 record lock，还存在 gap lock。而通过唯一索引进行精确查询后，只存在 record lock，不存在 gap lock。老规矩在 num 列建立非唯一索引</p>\n<ol>\n<li><code>select * from table where num = 200</code> <br />\n 在 RR 级别下，不加任何锁，是快照读。<br />\n在 Serializable 级别下，是当前读，在 pId=2，7 的聚簇索引上加 S 锁，在 num=200 的非聚集索引上加 S 锁，在 (100,200)(200,300) 加上 gap lock。</li>\n<li><code>select * from table where num &gt; 200</code> <br />\n 在 RR 级别下，不加任何锁，是快照读。<br />\n在 Serializable 级别下，是当前读，在 pId=3 的聚簇索引上加 S 锁，在 num=300 的非聚集索引上加 S 锁。在 (200,300)(300,+∞) 加上 gap lock</li>\n<li><code>select * from table where num = 200 lock in share mode</code> <br />\n 是当前读，在 pId=2，7 的聚簇索引上加 S 锁，在 num=200 的非聚集索引上加 S 锁，在 (100,200)(200,300) 加上 gap lock。</li>\n<li><code>select * from table where num &gt; 200 lock in share mode</code> <br />\n 是当前读，在 pId=3 的聚簇索引上加 S 锁，在 num=300 的非聚集索引上加 S 锁。在 (200,300)(300,+∞) 加上 gap lock。</li>\n<li><code>select * from table where num = 200 for update</code> <br />\n 是当前读，在 pId=2，7 的聚簇索引上加 S 锁，在 num=200 的非聚集索引上加 X 锁，在 (100,200)(200,300) 加上 gap lock。</li>\n<li><code>select * from table where num &gt; 200 for update</code> <br />\n 是当前读，在 pId=3 的聚簇索引上加 S 锁，在 num=300 的非聚集索引上加 X 锁。在 (200,300)(300,+∞) 加上 gap lock</li>\n<li><code>select * from table where num = 250 [lock in share mode|for update]</code> <br />\n 注意了，num=250 是不存在的列，这种情况会在 (200,300) 上加 gap lock。</li>\n<li><code>select * from table where num &gt; 400 [lock in share mode|for update]</code> <br />\n 注意了，pId&gt;400，查询结果是空的。在这种情况下，是在 (400,+∞) 上加 gap lock。</li>\n</ol>\n<h2 id=\"mysql中的死锁\"><a class=\"anchor\" href=\"#mysql中的死锁\">#</a> MySQL 中的死锁</h2>\n<h3 id=\"死锁的产生\"><a class=\"anchor\" href=\"#死锁的产生\">#</a> 死锁的产生</h3>\n<p><strong>死锁🔒：</strong> 是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。表级锁不会产生死锁。所以解决死锁主要还是针对于最常用的 InnoDB。</p>\n<blockquote>\n<p>死锁的关键在于：两个 (或以上) 的 Select 加锁的顺序不一致。</p>\n</blockquote>\n<p>那么对应的解决死锁问题的关键就是：让不同的 Select 加锁有次序</p>\n<h3 id=\"死锁的检测\"><a class=\"anchor\" href=\"#死锁的检测\">#</a> 死锁的检测</h3>\n<p>✨在并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p>\n<table>\n<thead>\n<tr>\n<th>事务 A</th>\n<th>事务 B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td colspan=\"2\"><code>begin; </code></td>\n</tr>\n<tr>\n<td><code>update t set k=k+1 where id=1; </code></td>\n<td><code>begin; </code></td>\n</tr>\n<tr>\n<td><code>update t set k=k+1 where id=2; </code></td>\n</tr>\n<tr>\n<td colspan=\"2\"><code>update t set k=k+1 where id=2; </code></td>\n</tr>\n<tr>\n<td><code>update t set k=k+1 where id=1; </code></td>\n</tr>\n</tbody>\n</table>\n<p>事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略🥂：</p>\n<ul>\n<li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 <code>innodb_lock_wait_timeout</code>  来设置</li>\n<li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 <code>innodb_deadlock_detect</code>  设置为 on，表示开启这个逻辑</li>\n</ul>\n<p>在 InnoDB 中， <code>innodb_lock_wait_timeout</code>  的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的</p>\n<p>✨正常情况下还是要采用主动死锁检查策略，而且 <code>innodb_deadlock_detect</code>  的默认值本身就是 on。主动死锁监测在发生死锁的时候，是能够快速发现并进行处理的，但是它有额外负担的。每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁</p>\n<p>🍬如果所有事务都要更新同一行的场景，每个新来的被堵住的线程都要判断会不会由于自己的加入导致死锁，这是一个时间复杂度是 <strong>O(n)</strong> 的操作</p>\n<p><strong>👩怎么解决由这种热点行更新导致的性能问题？</strong></p>\n<ol>\n<li>如果确保这个业务一定不会出现死锁，可以临时把死锁检测关掉</li>\n<li>控制并发度</li>\n<li>将一行改成逻辑上的多行来减少锁冲突。以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成员原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗</li>\n</ol>\n<h3 id=\"解除死锁的两种方法\"><a class=\"anchor\" href=\"#解除死锁的两种方法\">#</a> 解除死锁的两种方法</h3>\n<ol>\n<li>⭐终止（或撤销）进程。终止（或撤销）系统中的一个或多个死锁进程，直至打破循环环路，使系统从死锁状态中解除出来。</li>\n<li>⭐抢占资源。从一个或多个进程中抢占足够数量的资源，分配给死锁进程，以打破死锁状态。</li>\n</ol>\n<p><strong>🔑第一种方法手动实现：</strong><br />\n在 mysql 中，输入</p>\n<pre><code>show processlist;\n</code></pre>\n<p>kill 掉等待中或者睡眠的进程，重复操作即可</p>\n<pre><code>kill 10430(进程Id);\n</code></pre>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "面试",
                "MySQL"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/11/f5f4ddb13fdd/",
            "url": "https://shaogezhu.cn/2021/11/f5f4ddb13fdd/",
            "title": "lambdaQueryWrapper中常用的方法",
            "date_published": "2021-11-16T14:31:30.000Z",
            "content_html": "<div class=\"note info\">\n<p>✨mybatis-plus 是现在我们经常使用的插件，极大的提高了我们开发的效率，LambdaQueryWrapper 类我们也经常使用，我把大部分的方法，可以把本网址收藏起来 方便以后查阅。</p>\n</div>\n<br>\n<p><img data-src=\"/assets/2021-11/lm.png\" alt=\"image.png\" /></p>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "MySQL",
                "资料",
                "mybatis"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/11/a702195cf0e5/",
            "url": "https://shaogezhu.cn/2021/11/a702195cf0e5/",
            "title": "HTTP协议 和 HTTPS协议 详解",
            "date_published": "2021-11-05T14:57:49.000Z",
            "content_html": "<div class=\"note info\">\n<p>我们经常说的通信协议，以及三次握手四次挥手，都是什么？ http 和 https 有什么关系，建立链接的流程一样么？为什么 https 就安全了？ 读完这篇文章你就会有非常深刻的认识🙇</p>\n</div>\n<h2 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h2>\n<blockquote>\n<p>📌网络协议是计算机之间为了实现网络通信而达成的一种 “约定” 或者” 规则 “，有了这种” 约定 “，不同厂商的生产设备，以及不同操作系统组成的计算机之间，就可以实现通信。</p>\n</blockquote>\n<h2 id=\"http-协议\"><a class=\"anchor\" href=\"#http-协议\">#</a> HTTP 协议</h2>\n<p><strong>✨HTTP</strong>（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p>\n<h4 id=\"http建立链接的过程\"><a class=\"anchor\" href=\"#http建立链接的过程\">#</a> http 建立链接的过程</h4>\n<ul>\n<li>客户端向服务器发送请求报文</li>\n<li>服务器根据请求报文收集对应的组合成响应报文</li>\n<li>客户端收到响应报文后进行解析渲染</li>\n</ul>\n<h4 id=\"http特点\"><a class=\"anchor\" href=\"#http特点\">#</a> HTTP 特点</h4>\n<ol>\n<li>http 协议支持客户端 / 服务端模式，也是一种请求 / 响应模式的协议。</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。</li>\n<li>灵活：HTTP 允许传输任意类型的数据对象。传输的类型由 Content-Type 加以标记。</li>\n<li>无连接：限制每次连接只处理一个请求。服务器处理完请求，并收到客户的应答后，即断开连接，但是却不利于客户端与服务器保持会话连接，为了弥补这种不足，产生了两项记录 http 状态的技术，一个叫做 Cookie, 一个叫做 Session。</li>\n<li>无状态：无状态是指协议对于事务处理没有记忆，后续处理需要前面的信息，则必须重传。</li>\n</ol>\n<h2 id=\"https-协议\"><a class=\"anchor\" href=\"#https-协议\">#</a> HTTPS 协议</h2>\n<p><strong>✨HTTPS</strong>（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<h4 id=\"https建立链接的过程\"><a class=\"anchor\" href=\"#https建立链接的过程\">#</a> https 建立链接的过程</h4>\n<p><img data-src=\"/assets/2021-11/http1.png\" alt=\"image.png\" /></p>\n<p><strong>具体步骤如下：</strong></p>\n<ol>\n<li>client 向 server 发送请求 https://www.shaogezhu.cn ，然后连接到 server 的 443 端口，发送的信息包含客户端支持的加密算法。</li>\n<li>server 接收到信息之后给予 client 响应握手信息，包含匹配好的协商加密算法，这个加密算法一定是 client 发送给 server 加密算法的子集。</li>\n<li>随即 server 给 client 发送第二个响应报文是数字证书。服务端必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥。传送证书，这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间、服务端的公钥，第三方证书认证机构 (CA) 的签名，服务端的域名信息等内容。</li>\n<li>客户端解析验证证书，这部分工作是由客户端的 SSL/TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值（预主秘钥）。</li>\n<li>客户端认证证书通过之后，接下来是通过生成会话密钥。然后通过证书的公钥加密会话密钥。</li>\n<li>服务端使用私钥解密得到会话密钥，然后服务端会通过会话秘钥加密一条消息回传给客户端，如果客户端能够正常接受的话表明 SSL 层连接建立完成了。</li>\n</ol>\n<h4 id=\"https的特点\"><a class=\"anchor\" href=\"#https的特点\">#</a> https 的特点</h4>\n<ol>\n<li><strong>内容加密：</strong> 采用混合加密技术，中间者无法直接查看明文内容</li>\n<li><strong>验证身份：</strong> 通过证书认证客户端访问的是自己的服务器</li>\n<li><strong>保护数据完整性：</strong> 防止传输的内容被中间人冒充或者篡改</li>\n</ol>\n<h2 id=\"http-与-https-区别\"><a class=\"anchor\" href=\"#http-与-https-区别\">#</a> HTTP 与 HTTPS 区别</h2>\n<ol>\n<li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li>\n<li>使用 HTTPS 协议需要到 <strong>CA</strong>（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。</li>\n<li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li>\n<li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li>\n<li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li>\n</ol>\n<blockquote>\n<p><strong>CA 认证</strong>：第三方数字签名认证机构，为了确认 https 中服务器发送的公开秘钥没有被篡改，因此会先发送给可信的第三方进行签名，客户端使用机构的公开秘钥进行签名认证，用来保证服务器公开秘钥的可靠性。</p>\n<p><strong>数字摘要：</strong> 通过单向 hash 函数对原文进行哈希，将需加密的明文 “摘要” 成一串固定长度 (如 128bit) 的密文，不同的明文摘要成的密文其结果总是不相同，同样的明文其摘要必定一致，并且即使知道了摘要也不能反推出明文。</p>\n</blockquote>\n<h4 id=\"对称秘钥加密和非对称秘钥加密\"><a class=\"anchor\" href=\"#对称秘钥加密和非对称秘钥加密\">#</a> 对称秘钥加密和非对称秘钥加密</h4>\n<p><strong>非对称加密🌴：</strong> 公开秘钥是任何人都可以轻易获得，并且可以随意发送。但是公开密钥加密后的内容只有提供公开秘钥的服务方可以使用自己的私有秘钥进行解密<br />\n<strong>对称加密🌴：</strong> 加密和解密使用的是同一秘钥，所以只要获得加密秘钥就可以进行解密。</p>\n<h4 id=\"tcp三次握手过程\"><a class=\"anchor\" href=\"#tcp三次握手过程\">#</a> TCP 三次握手过程</h4>\n<p><img data-src=\"/assets/2021-11/http2.png\" alt=\"image.png\" /></p>\n<p><strong>具体过程如下👀：</strong><br />\n（1）第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号 Synchronize Sequence Numbers），seq=a，客户端进入 SYN_SEND 状态等待服务器确认</p>\n<p>（2）第二次握手：服务器接收客户端 syn 包并确认（Ack=a+1），seq=b，同时向客户端发送一个 SYN 包（syn=1），此时服务器进入 SYN_RECV 状态</p>\n<p>（3）第三次握手：客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK (ack=b+1），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手</p>\n<p>（4）Server 端在收到 Client 的 ACK 帧之后，会从 SYN_RCVD 状态会进入 ESTABLISHED 状态，至此，Server 方向的通道连接建立成功，Server 可以发送数据给 Client，TCP 的全双工连接建立完成。</p>\n<h4 id=\"四次挥手过程\"><a class=\"anchor\" href=\"#四次挥手过程\">#</a> 四次挥手过程</h4>\n<p><img data-src=\"/assets/2021-11/http3.png\" alt=\"image.png\" /></p>\n<p><strong>具体过程如下👀：</strong><br />\n（1）第一次挥手：主动断开方（可以是客户端，也可以是服务器端），向对方发送一个 FIN 结束请求报文，此报文的 FIN 位被设置为 1，并且正确设置 Sequence Number（序列号）和 AcknowledgmentNumber（确认号）。发送完成后，主动断开方进入 FIN_WAIT_1 状态，这表示主动断开方没有业务数据要发送给对方，准备关闭 SOCKET 连接了。</p>\n<p>（2）第二次挥手：正常情况下，在收到了主动断开方发送的 FIN 断开请求报文后，被动断开方会发送一个 ACK 响应报文，报文的 Acknowledgment Number（确认号）值为断开请求报文的 Sequence Number（序列号）加 1，该 ACK 确认报文的含义是：“我同意你的连接断开请求”。之后，被动断开方就进入了 CLOSE-WAIT（关闭等待）状态，TCP 协议服务会通知高层的应用进程，对方向本地方向的连接已经关闭，对方已经没有数据要发送了，若本地还要发送数据给对方，对方依然会接受。被动断开方的 CLOSE-WAIT（关闭等待）还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。</p>\n<p>👉🏻主动断开方在收到了 ACK 报文后，由 FIN_WAIT_1 转换成 FIN_WAIT_2 状态。</p>\n<p>（3）第三次挥手：在发送完成 ACK 报文后，被动断开方还可以继续完成业务数据的发送，待剩余数据发送完成后，或者 CLOSE-WAIT（关闭等待）截止后，被动断开方会向主动断开方发送一个 FIN+ACK 结束响应报文，表示被动断开方的数据都发送完了，然后，被动断开方进入 LAST_ACK 状态。</p>\n<p>（4）第四次挥手：主动断开方收在到 FIN+ACK 断开响应报文后，还需要进行最后的确认，向被动断开方发送一个 ACK 确认报文，然后，自己就进入 TIME_WAIT 状态，等待超时后最终关闭连接。处于 TIME_WAIT 状态的主动断开方，在等待完成 2MSL 的时间后，如果期间没有收到其他报文，则证明对方已正常关闭，主动断开方的连接最终关闭。</p>\n<h2 id=\"拓展知识\"><a class=\"anchor\" href=\"#拓展知识\">#</a> 拓展知识</h2>\n<h4 id=\"为什么连接的时候是三次握手关闭的时候却是四次握手\"><a class=\"anchor\" href=\"#为什么连接的时候是三次握手关闭的时候却是四次握手\">#</a> 为什么连接的时候是三次握手，关闭的时候却是四次握手？</h4>\n<ul>\n<li>因为当 Server 端收到 Client 端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当 Server 端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉 Client 端，&quot;你发的 FIN 报文我收到了&quot;。只有等到我 Server 端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四步握手。</li>\n</ul>\n<h4 id=\"为什么连接建立的时候是三次握手可以改成两次握手吗\"><a class=\"anchor\" href=\"#为什么连接建立的时候是三次握手可以改成两次握手吗\">#</a> 为什么连接建立的时候是三次握手，可以改成两次握手吗？</h4>\n<ul>\n<li>3 次握手完成两个重要的功能，既要双方做好发送数据的准备工作 (双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机 S 和 C 之间的通信，假定 C 给 S 发送一个连接请求分组，S 收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S 认为连接已经成功地建立了，可以开始发送数据分组。可是，C 在 S 的应答分组在传输中被丢失的情况下，将不知道 S 是否已准备好，不知道 S 建立什么样的序列号，C 甚至怀疑 S 是否收到自己的连接请求分组。在这种情况下，C 认为连接还未建立成功，将忽略 S 发来的任何数据分 组，只等待连接确认应答分组。而 S 在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</li>\n</ul>\n<h4 id=\"为什么主动断开方在time-wait状态必须等待2msl的时间\"><a class=\"anchor\" href=\"#为什么主动断开方在time-wait状态必须等待2msl的时间\">#</a> 为什么主动断开方在 TIME-WAIT 状态必须等待 2MSL 的时间？</h4>\n<ul>\n<li>虽然按道理，四个报文都发送完毕，我们可以直接进入 CLOSE 状态了，但是我们必须假象网络是不可靠的，有可以最后一个 ACK 丢失。所以 TIME_WAIT 状态就是用来重发可能丢失的 ACK 报文。在 Client 发送出最后的 ACK 回复，但该 ACK 可能丢失。Server 如果没有收到 ACK，将不断重复发送 FIN 片段。所以 Client 不能立即关闭，它必须确认 Server 接收到了该 ACK。Client 会在发送出 ACK 之后进入到 TIME_WAIT 状态。Client 会设置一个计时器，等待 2MSL 的时间。如果在该时间内再次收到 FIN，那么 Client 会重发 ACK 并再次等待 2MSL。所谓的 2MSL 是两倍的 MSL (Maximum Segment Lifetime)。MSL 指一个片段在网络中最大的存活时间，2MSL 就是一个发送和一个回复所需的最大时间。如果直到 2MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</li>\n</ul>\n<h4 id=\"如果已经建立了连接但是客户端突然出现故障了怎么办\"><a class=\"anchor\" href=\"#如果已经建立了连接但是客户端突然出现故障了怎么办\">#</a> 如果已经建立了连接，但是客户端突然出现故障了怎么办？</h4>\n<ul>\n<li>TCP 还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为 2 小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔 75 秒钟发送一次。若一连发送 10 个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</li>\n</ul>\n<h4 id=\"tcp怎么保证可靠性\"><a class=\"anchor\" href=\"#tcp怎么保证可靠性\">#</a> TCP 怎么保证可靠性</h4>\n<ol>\n<li><strong>序列号和确认号机制：</strong><br />\nTCP 发送端发送数据包的时候会选择序列号，接收端收到数据包后会检测数据包的完整性，如果检测通过会响应确认号表示收到了数据包。</li>\n<li><strong>超时重发机制：</strong><br />\n发送端发送了数据包后会启动一个定时器，如果一定时间没有收到接收端的确认，将会重新发送该数据包。</li>\n<li><strong>对乱序数据包重新排序：</strong><br />\n从 IP 网络层传输到 TCP 层的数据包可能会乱序，TCP 层会对数据包重新排序再发给应用层。</li>\n<li><strong>丢弃重复数据：</strong><br />\n从 IP 网络层传输到 TCP 层的数据包可能会重复，TCP 层会丢弃重复的数据包。</li>\n<li><strong>流量控制：</strong><br />\nTCP 发送端和接收端都有一个固定大小的缓冲空间，为了防止发送端发送数据的速度太快导致接收端缓冲区溢出，发送端只能发送接收端可以接纳的数据，为了达到这种控制效果，TCP 用了流量控制协议（可变大小的滑动窗口协议）来实现。<br />\n【滑动窗口详解】<br />\n滑动窗口通俗来讲就是一种流量控制技术。<br />\n它本质上是描述接收方的 TCP 数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据，如果发送方收到接收方的窗口大小为 0 的话，那么发送方将停止发送数据，等到接收方发送窗口大小不为 0 的数据报的到来。首次发送数据时的窗口是链路带宽决定。</li>\n<li><strong>拥塞控制：</strong><br />\n在数据传输过程中，可能由于网络状态的问题，造成网络拥堵，此时引入拥塞控制机制，在保证 TCP 可靠性的同时，提高性能，具体为慢启动、拥塞避免、快重传与快恢复……</li>\n</ol>\n<p><strong>【拥塞控制算法】</strong><br />\n<img data-src=\"/assets/2021-11/http4.png\" alt=\"image.png\" /></p>\n<ul>\n<li><strong>慢启动：</strong> TCP 刚建立连接之后，会一点一点提高发送数据报的数量，即每当发送方收到一个 ACK，就会将拥塞窗口的大小变为原来的 2 倍；当增长到慢启动门限 ssthresh 时，启动拥塞避免算法</li>\n<li><strong>拥塞避免：</strong> 为了避免拥塞，超过慢启动门限后，拥塞窗口的大小每收到一个 ACK，加 1，为线性增长</li>\n<li><strong>快重传：</strong> 当出现拥塞的时候，发生了丢包的现象，快速重传算 *** 将拥塞窗口变为原来的一半，并且让慢启动门限变为拥塞窗口大小<br />\n如果不进行快速重传，进行超时重传，则是将慢启动门限设置为拥塞窗口大小的一半，并且将拥塞窗口大小置为 1</li>\n<li><strong>快恢复：</strong> 让拥塞窗口大小 +3 （即确认收到了三个数据报），并执行拥塞避免的线性增长</li>\n</ul>\n<h4 id=\"状态码分类\"><a class=\"anchor\" href=\"#状态码分类\">#</a> 状态码分类</h4>\n<ul>\n<li>1XX- 信息型，服务器收到请求，需要请求者继续操作。</li>\n<li>2XX- 成功型，请求成功收到，理解并处理。</li>\n<li>3XX - 重定向，需要进一步的操作以完成请求。</li>\n<li>4XX - 客户端错误，请求包含语法错误或无法完成请求。</li>\n<li>5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</li>\n</ul>\n<h4 id=\"常见的状态码\"><a class=\"anchor\" href=\"#常见的状态码\">#</a> 常见的状态码</h4>\n<ul>\n<li>200 OK - 客户端请求成功</li>\n<li>301 - 资源（网页等）被永久转移到其它 URL</li>\n<li>302 - 临时跳转</li>\n<li>400 Bad Request - 客户端请求有语法错误，不能被服务器所理解</li>\n<li>401 Unauthorized - 请求未经授权，这个状态代码必须和 WWW- Authenticate 报头域一起使用（简单理解：表示用户没有权限 令牌，用户名，密码错误）</li>\n<li>403 Forbidden 代表客户端错误，指的是服务器端有能力处理该请求，但是拒绝授权访问。</li>\n<li>404 - 请求资源不存在，可能是输入了错误的 URL</li>\n<li>500 - 服务器内部发生了不可预期的错误</li>\n<li>503 Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li>\n</ul>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "学习笔记",
                "面试",
                "八股文",
                "基础"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/11/5c2b3693deda/",
            "url": "https://shaogezhu.cn/2021/11/5c2b3693deda/",
            "title": "彻底理解 进程、线程、多进程、多线程",
            "date_published": "2021-11-02T15:31:06.000Z",
            "content_html": "<div class=\"note info\">\n<p>面试经常被问到的问题，今天给大家总结一下📌</p>\n</div>\n<h2 id=\"进程和线程\"><a class=\"anchor\" href=\"#进程和线程\">#</a> 进程和线程</h2>\n<h3 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h3>\n<p>教科书上解释：<strong><font color=\"blue\">进程是资源分配的最小单位</font></strong></p>\n<p>👀可以理解为：先加载程序 A 的上下文，然后开始执行 A，保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文，然后开始执行 B, 保存程序 B 的上下文。进程的生命周期有<strong>调入，执行，保存</strong>的过程。</p>\n<h3 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h3>\n<p>教科书上解释：<strong><font color=\"blue\">线程是 CPU 调度的最小单位</font></strong></p>\n<p>👀可以理解为：一个应用程序的执行可能有多个分支和多个程序段，就好比要实现程序 A，实际分成 a，b，c 等多个块；这里的 a，b，c 就是线程，也就是说线程是共享了进程的上下文环境，单核任务中划分更为细小的 CPU 时间段。</p>\n<h3 id=\"进程和线程的区别\"><a class=\"anchor\" href=\"#进程和线程的区别\">#</a> 进程和线程的区别</h3>\n<p><strong>进程🌴：</strong> 每个进程都有自己独立的内存空间，不同进程之间的内存空间不共享。进程之间的通信有操作系统传递，导致通讯效率低，切换开销大。</p>\n<p><strong>线程🌴：</strong> 一个进程可以有多个线程，所有线程<strong>共享</strong>进程的内存空间，通讯效率高，切换开销小。(PS：共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入 &quot;互斥锁&quot;。一个线程在访问内存空间的时候，其他线程不允许访问，必须等待之前的线程访问结束，才能使用这个内存空间)</p>\n<h2 id=\"多进程和多线程\"><a class=\"anchor\" href=\"#多进程和多线程\">#</a> 多进程和多线程</h2>\n<h3 id=\"共同点\"><a class=\"anchor\" href=\"#共同点\">#</a> 共同点：</h3>\n<p>👉🏻表示可以同时执行多个任务，进程和线程的调度是由操作系统自动完成。</p>\n<h3 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别：</h3>\n<table>\n<thead>\n<tr>\n<th>对比维度</th>\n<th>多进程</th>\n<th>多线程</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据共享、同步</td>\n<td>数据共享复杂，需要用 IPC；数据是分开的，同步简单</td>\n<td>因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂</td>\n</tr>\n<tr>\n<td>内存、CPU</td>\n<td>占用内存多，切换复杂，CPU 利用率低</td>\n<td>占用内存少，切换简单，CPU 利用率高</td>\n</tr>\n<tr>\n<td>创建销毁、切换</td>\n<td>创建销毁、切换复杂，速度慢</td>\n<td>创建销毁、切换简单，速度很快</td>\n</tr>\n<tr>\n<td>编程、调试</td>\n<td>编程简单，调试简单</td>\n<td>编程复杂，调试复杂</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>进程间不会互相影响</td>\n<td>一个线程挂掉将导致整个进程挂掉</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通信方式\"><a class=\"anchor\" href=\"#通信方式\">#</a> 通信方式</h3>\n<h3 id=\"进程间的通信方式\"><a class=\"anchor\" href=\"#进程间的通信方式\">#</a> 进程间的通信方式</h3>\n<ol>\n<li><strong>消息队列📍：</strong> 消息队列是消息的链表，具有特定的格式，存放在内存中并由消息队列标识符标识。消息队列存放在内核中，只有在内核重启 (即，操作系统重启) 或者显示地删除一个消息队列时，该消息队列才会被真正的删除。</li>\n<li><strong>套接字📍：</strong> 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li>\n<li><strong>信号量📍：</strong> 信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li>\n<li><strong>共享内存📍：</strong> 使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</li>\n</ol>\n<h3 id=\"线程间的通信方式java\"><a class=\"anchor\" href=\"#线程间的通信方式java\">#</a> 线程间的通信方式（Java）</h3>\n<ol>\n<li><strong>volatile</strong>：保证了线程之间的可见性和有序性，禁止指令重排序，其中可见性就是可以让线程之间进行通信。</li>\n<li><strong>等待 / 通知机制</strong>：wait (),notify () 和 notifyAll ()</li>\n<li><strong>threadLocal</strong> 参见文章：<a href=\"http://shaogezhu.cn/2021/10/17f071d31a96/\">彻底明白 ThreadLocal</a></li>\n</ol>\n<h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<h3 id=\"多进程应用场景\"><a class=\"anchor\" href=\"#多进程应用场景\">#</a> 多进程应用场景</h3>\n<ul>\n<li>nginx 主流的工作模式是多进程模式（也支持多线程模型）</li>\n<li>几乎所有的 web server 服务器服务都有多进程的，至少有一个守护进程配合一个 worker 进程，例如 apached,httpd 等等以 d 结尾的进程包括 init.d 本身就是 0 级总进程，所有你认知的进程都是它的子进程；</li>\n<li>chrome 浏览器也是多进程方式。 （<strong>原因：</strong> ①可能存在一些网页不符合编程规范，容易崩溃，采用多进程一个网页崩溃不会影响其他网页；而采用多线程会。②网页之间互相隔离，保证安全，不必担心某个网页中的恶意代码会取得存放在其他网页中的敏感信息。）</li>\n<li>redis 也可以归类到 “多进程单线程” 模型（平时工作是单个进程，涉及到耗时操作如持久化或 aof 重写时会用到多个进程）</li>\n</ul>\n<h3 id=\"多线程应用场景\"><a class=\"anchor\" href=\"#多线程应用场景\">#</a> 多线程应用场景</h3>\n<ul>\n<li>线程间有数据共享，并且数据是需要修改的（不同任务间需要大量共享数据或频繁通信时）。</li>\n<li>提供非均质的服务（有优先级任务处理）事件响应有优先级。</li>\n<li>单任务并行计算，在非 CPU Bound 的场景下提高响应速度，降低时延。</li>\n<li>与人有 IO 交互的应用，良好的用户体验（键盘鼠标的输入，立刻响应）</li>\n<li>案例：<br />\n桌面软件，响应用户输入的是一个线程，后台程序处理是另外的线程；</li>\n</ul>\n<h2 id=\"如何选\"><a class=\"anchor\" href=\"#如何选\">#</a> 如何选？</h2>\n<ol>\n<li><strong>需要频繁创建销毁的优先用线程（进程的创建和销毁开销过大）</strong><br />\n这种原则最常见的应用就是 Web 服务器了，来一个连接建立一个线程，断了就销毁线程，要是用进程，创建和销毁的代价是很难承受的。</li>\n<li><strong>需要进行大量计算的优先使用线程（CPU 频繁切换）</strong><br />\n所谓大量计算，当然就是要耗费很多 CPU，切换频繁了，这种情况下线程是最合适的。</li>\n<li><strong>都满足需求的情况下，用你最熟悉、最拿手的方式</strong><br />\n至于 “数据共享、同步”、“ 编程 、调试”、“可靠性” 这几个维度的所谓的 “复杂、简单” 应该怎么取舍，只能说：没有明确的选择方法。选择原则：如果多进程和多线程都能够满足要求，那么选择你最熟悉、最拿手的那个。</li>\n</ol>\n<p>🙇实际应用中基本上都是 “进程 + 线程” 的结合方式，千万不要真的陷入一种非此即彼的误区。</p>\n<h2 id=\"拓展知识\"><a class=\"anchor\" href=\"#拓展知识\">#</a> 拓展知识</h2>\n<h3 id=\"进程间的调度算法\"><a class=\"anchor\" href=\"#进程间的调度算法\">#</a> 进程间的调度算法</h3>\n<ol>\n<li><strong>先到先服务</strong>  从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>\n<li><strong>短作业优先</strong> 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>\n<li><strong>时间片轮转</strong> 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称 RR (Round robin) 调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li>\n<li><strong>优先级调度</strong>  为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li>\n<li><strong>多级反馈队列</strong> 前面介绍的几种进程调度的算法都有一定的局限性。如短进程优先的调度算法，仅照顾了短进程而忽略了长进程 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前被公认的一种较好的进程调度算法，UNIX 操作系统采取的便是这种调度算法。</li>\n</ol>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<blockquote>\n<p>比喻⭐：如果说进程是工厂，那么线程就是工厂里的工人，而工人是要干活的。工厂（进程）给工人（线程）提供了内存空间，让工人（线程）干活。</p>\n</blockquote>\n<p>进程是资源分配的基本单位，而线程是 CPU 调度的基本单位。因此，某种意义上可以说在支持线程的操作系统中没有真正意义上的进程调度，而都是线程调度。线程的出现主要是为了弥补进程各种操作开销大的问题，除这点外，线程和进程是差不多的。多线程和多进程一样，一方面为了充分利用 CPU 资源，另一方面是为了优化用户交互体验。</p>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "学习笔记",
                "面试"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/10/61a222d598ec/",
            "url": "https://shaogezhu.cn/2021/10/61a222d598ec/",
            "title": "spring事务 常见的失效场景",
            "date_published": "2021-10-29T14:49:32.000Z",
            "content_html": "<div class=\"note info\">\n<p>使用 spring 的项目，在处理<strong>转账、付款</strong>等操作的时候，为了数据能被正确的修改，通常会使用 spring 的注解 @Transactional 对事务进行控制。spring 对事物也有失效的场景我们来看一下，防止以后程序出现 bug👀</p>\n</div>\n<h2 id=\"spring事务失效场景\"><a class=\"anchor\" href=\"#spring事务失效场景\">#</a> spring 事务失效场景</h2>\n<h3 id=\"1-数据库引擎不支持事务\"><a class=\"anchor\" href=\"#1-数据库引擎不支持事务\">#</a> 1、数据库引擎不支持事务</h3>\n<p>以 MySQL 为例🌰，其 MyISAM 引擎是不支持事务操作的，InnoDB 才是支持事务的引擎，一般要支持事务都会使用 InnoDB。</p>\n<h3 id=\"2-没有被-spring-管理\"><a class=\"anchor\" href=\"#2-没有被-spring-管理\">#</a> 2、没有被 Spring 管理</h3>\n<p>如下面代码所示：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 数据库增删改操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果把 @Service 注解注释掉，这个类就不会被加载成一个 Bean，那这个类就不会被 Spring 管理了，事务自然就失效了。</p>\n<h3 id=\"3-方法不是-public-的\"><a class=\"anchor\" href=\"#3-方法不是-public-的\">#</a> 3、方法不是 public 的</h3>\n<p>以下来自 Spring 官方文档✨：</p>\n<blockquote>\n<p>When using proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings. Consider the use of AspectJ (see below) if you need to annotate non-public methods.</p>\n<p>大概意思就是 <strong>@Transactional</strong> 只能用于 <strong>public</strong> 的方法上，否则事务不会失效，如果要用在非 public 方法上，可以开启 AspectJ 代理模式。</p>\n</blockquote>\n<h3 id=\"4-异常被捕获了\"><a class=\"anchor\" href=\"#4-异常被捕获了\">#</a> 4、异常被捕获了</h3>\n<p>如下代码所示：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 数据库增删改操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>将异常捕获了，没有抛出来，spring 并不知道发生了异常，所以不会回滚。</p>\n<h3 id=\"5-异常类型错误\"><a class=\"anchor\" href=\"#5-异常类型错误\">#</a> 5、异常类型错误</h3>\n<p>还是上面的列子：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 数据库增删改操作</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样事务也是不生效的，因为默认回滚的是：RuntimeException，如果你想触发其他异常的回滚，需要在注解上配置一下，如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个配置仅限于 Throwable 异常类及其子类。</p>\n<h3 id=\"6-不支持事务\"><a class=\"anchor\" href=\"#6-不支持事务\">#</a> 6、不支持事务</h3>\n<p>来看下面这个例子：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用下边的方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>NOT_SUPPORTED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 数据库增删改操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>🎈Propagation.NOT_SUPPORTED： 表示不以事务运行，当前若存在事务则挂起，详细的事务传播机制在下面。</p>\n<h2 id=\"spring事务的7种传播机制\"><a class=\"anchor\" href=\"#spring事务的7种传播机制\">#</a> spring 事务的 7 种传播机制</h2>\n<ul>\n<li>\n<p><strong>REQUIRED</strong></p>\n<blockquote>\n<p>如果当前方法有事务则加入事务，没有则创建一个事务。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>NOT_SUPPORTED</strong></p>\n<blockquote>\n<p>不支持事务，如果当前有事务则挂起事务运行。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>REQUIREDS_NEW</strong></p>\n<blockquote>\n<p>新建一个事务并在这个事务中运行，如果当前存在事务就把当前事务挂起。新建的事务的提交与回滚一挂起事务没有联系，不会影响挂起事务的操作。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>MANDATORY</strong></p>\n<blockquote>\n<p>强制当前方法使用事务运行，如果当前没有事务则抛出异常。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>NEVER</strong></p>\n<blockquote>\n<p>当前方法不能存在事务，即非事务状态运行，如果存在事务则抛出异常。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>SUPPORTS</strong></p>\n<blockquote>\n<p>支持当前事务，如果当前没事务也支持非事务状态运行。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>NESTED</strong></p>\n<blockquote>\n<p>如果当前存在事务，则在嵌套事务内执行。嵌套事务的提交与回滚与父事务没有任务关系，反之，当父事务提交嵌套事务也一起提交，父事务回滚会也回滚嵌套事务的。</p>\n<p>如果当前没有事务，则新建一个事务运行，这时候则与 PROPAGATION_REQUIRED 场景一致。</p>\n</blockquote>\n</li>\n</ul>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "面试",
                "spring"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/10/17f071d31a96/",
            "url": "https://shaogezhu.cn/2021/10/17f071d31a96/",
            "title": "终于弄明白了ThreadLocal",
            "date_published": "2021-10-23T03:11:55.000Z",
            "content_html": "<div class=\"note info\">\n<p>🌈写 SpringBoot 项目的时候，经常用到的一个保存用户信息的类就是 Threadlocal，我们今天就来详细介绍一下这个类。</p>\n</div>\n<h2 id=\"threadlocal有什么用\"><a class=\"anchor\" href=\"#threadlocal有什么用\">#</a> Threadlocal 有什么用：</h2>\n<p>📌简单的说就是，<font color=\"blue\">一个 ThreadLocal 在一个线程中是共享的，在不同线程之间又是隔离的（每个线程都只能看到自己线程的值）。</font>如下图：</p>\n<p><img data-src=\"/assets/2021-10/tl1.png\" alt=\"image.png\" /></p>\n<h2 id=\"threadlocal使用实例\"><a class=\"anchor\" href=\"#threadlocal使用实例\">#</a> ThreadLocal 使用实例</h2>\n<h3 id=\"api介绍\"><a class=\"anchor\" href=\"#api介绍\">#</a> API 介绍</h3>\n<p>🦄在使用 Threadlocal 之前我们先看以下它的 API：<br />\n<img data-src=\"/assets/2021-10/tl2.png\" alt=\"16314961931.png\" /></p>\n<p>ThreadLocal 类的 API 非常的简单，在这里比较重要的就是 get ()、set ()、remove (),set 用于赋值操作，get 用于获取变量的值，remove 就是删除当前变量的值。需要注意的是 initialValue 方法会在第一次调用时被触发，用于初始化当前变量值，默认情况下 initialValue 返回的是 null。</p>\n<h3 id=\"threadlocal的使用\"><a class=\"anchor\" href=\"#threadlocal的使用\">#</a> ThreadLocal 的使用</h3>\n<p>🍋说完了 ThreadLocal 类的 API 了，那我们就来动手实践一下了，来理解前面的那句话：<strong>一个 ThreadLocal 在一个线程中是共享的，在不同线程之间又是隔离的（每个线程都只能看到自己线程的值）</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 重写这个方法，可以修改 “线程变量” 的初始值，默认是 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 一号线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一号线程set前：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一号线程set后：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 二号线程</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二号线程set前：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二号线程set后：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 主线程睡 1s</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 主线程</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程的threadlocal值：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>稍微解释一下上面的代码：💡</strong></p>\n<p>每一个 ThreadLocal 实例就类似于一个变量名，不同的 ThreadLocal 实例就是不同的变量名，它们内部会存有一个值（暂时这么理解）<font color=\"violet\">在后面的描述中所说的 “<font color=\"blue\">ThreadLocal 变量或者是线程变量</font>” 代表的就是 ThreadLocal 类的实例。</font></p>\n<p>在类中创建了一个静态的 <strong>“ThreadLocal 变量”</strong>，在主线程中创建两个线程，在这两个线程中分别设置 ThreadLocal 变量为 1 和 2。然后等待一号和二号线程执行完毕后，在主线程中查看 ThreadLocal 变量的值。</p>\n<p><strong>程序结果及分析⌛</strong><br />\n<img data-src=\"/assets/2021-10/tl3.png\" alt=\"16314972101.png\" /></p>\n<p>程序结果重点看的是主线程输出的是 0，如果是一个普通变量，在一号线程和二号线程中将普通变量设置为 1 和 2，那么在一二号线程执行完毕后在打印这个变量，输出的值肯定是 1 或者 2（到底输出哪一个由操作系统的线程调度逻辑有关）。但使用 ThreadLocal 变量通过两个线程赋值后，在主线程程中输出的却是初始值 0。在这也就是为什么 “一个 ThreadLocal 在一个线程中是共享的，在不同线程之间又是隔离的”，每个线程都只能看到自己线程的值，这也就是 <font color=\"red\">ThreadLocal 的核心作用：实现线程范围的局部变量。</font></p>\n<h2 id=\"threadlocal-的源码分析\"><a class=\"anchor\" href=\"#threadlocal-的源码分析\">#</a> Threadlocal 的源码分析</h2>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<blockquote>\n<p>每个 Thread 对象都有一个 ThreadLocalMap，<strong>当创建一个 ThreadLocal 的时候，就会将该 ThreadLocal 对象添加到该 Map 中，其中键就是 ThreadLocal，值可以是任意类型。</strong> 这句话刚看可能不是很懂，下面我们一起看完源码就明白了。</p>\n</blockquote>\n<p>前面我们的理解是所有的常量值或者是引用类型的引用都是保存在 ThreadLocal 实例中的，但实际上不是的，这种说法只是让我们更好的理解 ThreadLocal 变量这个概念。<font color = \"blue\"><strong>向 ThreadLocal 存入一个值，实际上是向当前线程对象中的 ThreadLocalMap 存入值</strong></font>，ThreadLocalMap 我们可以简单的理解成一个 Map，而向这个 Map 存值的 key 就是 ThreadLocal 实例本身。</p>\n<h3 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码</h3>\n<p><img data-src=\"/assets/2021-10/tl4.png\" alt=\"image.png\" /></p>\n<p>👉也就是说，想要存入的 ThreadLocal 中的数据实际上并没有存到 ThreadLocal 对象中去，而是以<strong>这个 ThreadLocal 实例作为 key 存到了当前线程中的一个 Map 中去了</strong>，获取 ThreadLocal 的值时同样也是这个道理。这也就是为什么 ThreadLocal 可以实现线程之间隔离的原因了。</p>\n<h2 id=\"内部类threadlocalmap\"><a class=\"anchor\" href=\"#内部类threadlocalmap\">#</a> 内部类 ThreadLocalMap</h2>\n<p>ThreadLocalMap 是 ThreadLocal 的内部类，实现了一套自己的 Map 结构✨</p>\n<p><strong>ThreadLocalMap 属性：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 初始容量 16</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 散列表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//entry 有效数量 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 负载因子</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ThreadLocalMap 设置 ThreadLocal 变量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 与运算  &amp; (len-1) 这就是为什么 要求数组 len 要求 2 的 n 次幂 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 因为 len 减一后最后一个 bit 是 1 与运算计算出来的数值下标 能保证全覆盖 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 否者数组有效位会减半 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 如果是 hashmap 计算完下标后 会增加链表 或红黑树的查找计算量 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 从下标位置开始向后循环搜索  不会死循环  有扩容因子 必定有空余槽点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 一种情况 是当前引用 返回值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 槽点被 GC 掉 重设状态 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token function\">replaceStaleEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">// 槽点为空 设置 value</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 设置 ThreadLocal 数量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token comment\">// 没有可清理的槽点 并且数量大于负载因子 rehash</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">cleanSomeSlots</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sz <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ThreadLocalMap 属性介绍😎：</p>\n<ul>\n<li>和普通 Hashmap 类似存储在一个数组内，但与 hashmap 使用的拉链法解决散列冲突不同的是 ThreadLocalMap 使用开放地址法</li>\n<li>数组 初始容量 16，负载因子 2/3</li>\n<li>node 节点 的 key 封装了 WeakReference 用于回收</li>\n</ul>\n<h3 id=\"threadlocalmap存储位置\"><a class=\"anchor\" href=\"#threadlocalmap存储位置\">#</a> ThreadLocalMap 存储位置</h3>\n<blockquote>\n<p>储存在 Thread 中，有两个 ThreadLocalMap 变量</p>\n</blockquote>\n<p><img data-src=\"/assets/2021-10/tl4.5.png\" alt=\"16315167211.png\" /></p>\n<ol>\n<li>threadLocals 在 ThreadLocal 对象方法 set 中去创建 也由 ThreadLocal 来维护</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        t<span class=\"token punctuation\">.</span>threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>inheritableThreadLocals 和 ThreadLocal 类似 InheritableThreadLocal 重写了 createMap 方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        t<span class=\"token punctuation\">.</span>inheritableThreadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>inheritableThreadLocals 作用是将 ThreadLocalMap 传递给子线程</li>\n</ol>\n<p><img data-src=\"/assets/2021-10/tl5.png\" alt=\"image.png\" /></p>\n<ol start=\"4\">\n<li>init 方法中 条件满足后直接为子线程创建 ThreadLocalMap</li>\n</ol>\n<p><img data-src=\"/assets/2021-10/tl6.png\" alt=\"image.png\" /></p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>仅在初始化子线程的时候会传递 中途改变副线程的 inheritableThreadLocals 变量 不会将影响结果传递到子线程 。</li>\n<li>使用线程池要注意 线程不回收 尽量避免使用父线程的 inheritableThreadLocals 导致错误</li>\n</ol>\n<h2 id=\"key的弱引用问题\"><a class=\"anchor\" href=\"#key的弱引用问题\">#</a> Key 的弱引用问题</h2>\n<p>为什么要用弱引用，官方是这样回答的</p>\n<blockquote>\n<p>To help deal with very large and long-lived usages, the hash table entries use WeakReferences for keys.<br />\n 为了处理非常大和生命周期非常长的线程，哈希表使用弱引用作为 key。</p>\n</blockquote>\n<p>生命周期长的线程可以理解为：线程池的核心线程</p>\n<p>ThreadLocal 在没有外部对象强引用时如 Thread，发生 GC 时弱引用 Key 会被回收，而 Value 是强引用不会回收，如果创建 ThreadLocal 的线程一直持续运行如线程池中的线程，那么这个 Entry 对象中的 value 就有可能一直得不到回收，发生内存泄露。</p>\n<ul>\n<li><strong>key 使用强引用🌴：</strong> 引用的 ThreadLocal 的对象被回收了，但是 ThreadLocalMap 还持有 ThreadLocal 的强引用，如果没有手动删除，ThreadLocal 不会被回收，导致 Entry 内存泄漏。</li>\n<li><strong>key 使用弱引用🌴：</strong> 引用的 ThreadLocal 的对象被回收了，由于 ThreadLocalMap 持有 ThreadLocal 的弱引用，即使没有手动删除，ThreadLocal 也会被回收。value 在下一次 ThreadLocalMap 调用 set,get，remove 的时候会被清除。</li>\n</ul>\n<p>Java8 中已经做了一些优化如，在 ThreadLocal 的 get ()、set ()、remove () 方法调用的时候会清除掉线程 ThreadLocalMap 中所有 Entry 中 Key 为 null 的 Value，并将整个 Entry 设置为 null，利于下次内存回收。</p>\n<h3 id=\"java中的四种引用\"><a class=\"anchor\" href=\"#java中的四种引用\">#</a> java 中的四种引用</h3>\n<ol>\n<li><strong>强引用📍：</strong> 如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为 null，这样一来的话，JVM 在合适的时间就会回收该对象</li>\n<li><strong>软引用📍：</strong> 在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。（软引用可用来实现内存敏感的高速缓存，比如网页缓存、图片缓存等。使用软引用能防止内存泄露，增强程序的健壮性）</li>\n<li><strong>弱引用📍：</strong> 具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</li>\n<li><strong>虚引用📍：</strong> 虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。（注意哦，其它引用是被 JVM 回收后才被传入 ReferenceQueue 中的。由于这个机制，所以虚引用大多被用于引用销毁前的处理工作。可以使用在对象销毁前的一些操作，比如说资源释放等。）</li>\n</ol>\n<p>通常 ThreadLocalMap 的生命周期跟 Thread（注意线程池中的 Thread）一样长，如果没有手动删除对应 key（线程使用结束归还给线程池了，其中的 KV 不再被使用但又不会 GC 回收，可认为是内存泄漏），一定会导致内存泄漏，但是使用弱引用可以多一层保障：弱引用 ThreadLocal 会被 GC 回收，不会内存泄漏，对应的 value 在下一次 ThreadLocalMap 调用 set,get,remove 的时候会被清除，Java8 已经做了上面的代码优化。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p><strong>ThreadLocal 的作用：</strong> 实现线程范围内的局部变量，即 ThreadLocal 在一个线程中是共享的，在不同线程之间是隔离的。</p>\n<p><strong>ThreadLocal 的原理：</strong> ThreadLocal 存入值时<font color=\"red\">使用当前 ThreadLocal 实例作为 key（并不是以当前线程对象作为 key）</font>，存入当前线程对象中的 Map 中去。最开始在看源码之前，我以为是以当前线程对象作为 key 将对象存入到 ThreadLocal 中的 Map 中去....</p>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "面试",
                "java"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/10/95416e47530f/",
            "url": "https://shaogezhu.cn/2021/10/95416e47530f/",
            "title": "内存溢出和内存泄露的区别与联系",
            "date_published": "2021-10-19T15:30:09.000Z",
            "content_html": "<h2 id=\"内存溢出和内存泄露的区别与联系\"><a class=\"anchor\" href=\"#内存溢出和内存泄露的区别与联系\">#</a> 内存溢出和内存泄露的区别与联系</h2>\n<blockquote>\n<p><strong>内存溢出：</strong>（out of memory），简单说就是内存不够分了，指程序要求的内存超出了系统所能分配的范围，出现 OOM；比如申请一个 int 类型，但给了它一个 int 才能存放的数，就会出现内存溢出，或者是创建一个大的对象，而堆内存放不下这个对象，这也是内存溢出。</p>\n<p><strong>内存泄漏：</strong>（Memory Leak），是指程序在申请内存后，无法释放已申请的内存空间 <strong>(指分配出去的内存无法被 gc 回收)</strong>。一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。</p>\n</blockquote>\n<p>因此，从上面也可以推断出内存泄露可能会导致内存溢出。</p>\n<p>二者的关系：🥂<br />\n内存溢出会抛出异常，内存泄露不会抛出异常，大多数时候程序看起来是正常运行的。</p>\n<h3 id=\"内存溢出或泄露原因分析\"><a class=\"anchor\" href=\"#内存溢出或泄露原因分析\">#</a> 内存溢出或泄露原因分析</h3>\n<p><strong>分析堆内存溢出的原因可能如下：🌴</strong></p>\n<ol>\n<li>使用了大量的递归或无限递归（递归中用到了大量的新建的对象）</li>\n<li>使用了大量循环或死循环（循环中用到了大量的新建的对象）</li>\n<li>类中和引用变量过多使用了 Static 修饰 如 public staitc Student s；在类中的属性中使用 static 修饰的最好只用基本类型或字符串。如 public static int i = 0; //public static String str;</li>\n<li>数组，List，Map 中存放的是对象的引用而不是对象，因为这些引用会让对应的对象不能被释放，会大量存储在内存中。</li>\n</ol>\n<p><strong>分析栈内存溢出的原因可能如下：🌴</strong></p>\n<ol>\n<li>使用了大量的递归或无限递归</li>\n<li>使用了大量循环或死循环（如循环中不停调用方法）</li>\n<li>list，map，数组等长度过大等。</li>\n</ol>\n<h3 id=\"出现内存溢出或内存泄露的解决方案\"><a class=\"anchor\" href=\"#出现内存溢出或内存泄露的解决方案\">#</a> 出现内存溢出或内存泄露的解决方案</h3>\n<ol>\n<li>修改 JVM 启动参数 (-Xms，-Xmx)，直接增加虚拟机内存。</li>\n<li>检查错误日志。</li>\n<li>使用内存查看工具查看内存使用情况 (如 jconsole)</li>\n<li>对代码进行仔细分析，找出可能发生内存溢出的位置。</li>\n</ol>\n<p><strong>详细排查方案如下:🎈</strong></p>\n<ul>\n<li>检查在数据库中取的数据量是否超过内存</li>\n<li>检查是否有过大的集合或对象</li>\n<li>检查是死循环或递归是否会导致溢出</li>\n<li>检查是否有大量对象的创建是否会出现内存问题</li>\n<li>检查是否有大量的连接对象或监听器等未关闭<br />\n......</li>\n</ul>\n<h3 id=\"在开发中应如何避免出现内存泄露\"><a class=\"anchor\" href=\"#在开发中应如何避免出现内存泄露\">#</a> 在开发中应如何避免出现内存泄露</h3>\n<ol>\n<li>尽量少使用枚举</li>\n<li>尽量使用静态内部类而不是内部类</li>\n<li>尽量使用轻量级的数据结构</li>\n<li>养成关闭连接和注销监听器的习惯</li>\n<li>谨慎使用 static 关键字</li>\n<li>谨慎使用单例模式</li>\n</ol>\n<p>🚀🚀🚀<br />\n<br></p>\n",
            "tags": [
                "Java",
                "学习笔记",
                "面试",
                "java"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/10/4eb7eccc7c2a/",
            "url": "https://shaogezhu.cn/2021/10/4eb7eccc7c2a/",
            "title": "Redis 常见数据结构以及使用场景分析",
            "date_published": "2021-10-11T13:45:48.000Z",
            "content_html": "<div class=\"note primary\">\n<p>Redis 是面试中的最经常问到的数据库之一，在日常项目中我们为了快速访问到一些数据，首先想到的肯定就是 Redis 了。下面就来介绍一下 Redis 的功能，方便我们以后使用👩</p>\n</div>\n<h2 id=\"redis-常见数据结构以及使用场景分析\"><a class=\"anchor\" href=\"#redis-常见数据结构以及使用场景分析\">#</a> Redis 常见数据结构以及使用场景分析</h2>\n<p><strong>redis 支持丰富的数据类型，不同的场景使用合适的数据类型可以有效的优化内存数据的存放空间：🌴🌴</strong></p>\n<blockquote>\n<ol>\n<li><strong>string：</strong> 最基本的数据类型，二进制安全的字符串，最大 512M。</li>\n<li><strong>list：</strong> 按照添加顺序保持顺序的字符串列表。</li>\n<li><strong>hash：</strong> key-value 对的一种集合。</li>\n<li><strong>set：</strong> 无序的字符串集合，不存在重复的元素。</li>\n<li><strong>sorted set：</strong> 已排序的字符串集合。</li>\n<li><strong>bitmap：</strong> 更细化的一种操作，以 bit 为单位。</li>\n<li><strong>hyperloglog：</strong> 基于概率的数据结构。 # 2.8.9 新增</li>\n<li><strong>Geo:</strong>  地理位置信息储存起来， 并对这些信息进行操作   # 3.2 新增</li>\n<li><strong>流（Stream）</strong> # 5.0 新增</li>\n</ol>\n</blockquote>\n<br>\n<h4 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h4>\n<ol>\n<li><strong>介绍 ：</strong> string 数据结构是简单的 key-value 类型。虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 <strong><span class=\"blue\">简单动态字符串</span></strong> (simple dynamic string，<strong>SDS</strong>)。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O (1)（C 字符串为 O (N)）, 除此之外，Redis 的 SDS API 是安全的，不会造成缓冲区溢出。</li>\n<li><strong>常用命令：</strong> set,get,strlen,exists,decr,incr,setex 等等。</li>\n<li><strong>应用场景：</strong> 一般常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。</li>\n</ol>\n<p>下面我们简单看看它的使用！😎<br />\n<strong>普通字符串的基本操作：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> key value <span class=\"token comment\">#设置 key-value 类型的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key <span class=\"token comment\"># 根据 key 获得对应的 value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"value\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> exists key  <span class=\"token comment\"># 判断某个 key 是否存在</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> strlen key <span class=\"token comment\"># 返回 key 所储存的字符串值的长度。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> del key <span class=\"token comment\"># 删除某个 key 对应的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>批量设置 :</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mset key1 value1 key2 value2 <span class=\"token comment\"># 批量设置 key-value 类型的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mget key1 key2 <span class=\"token comment\"># 批量获取多个 key 对应的 value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr></table></figure><p><strong>计数器（字符串的内容为整数的时候可以使用）：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> number <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incr number <span class=\"token comment\"># 将 key 中储存的数字值增一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get number</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> decr number <span class=\"token comment\"># 将 key 中储存的数字值减一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token string\">\"1\"</span></pre></td></tr></table></figure><p><strong>过期（默认为永不过期）：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> expire key  <span class=\"token number\">60</span> <span class=\"token comment\"># 数据在 60s 后过期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setex key <span class=\"token number\">60</span> value <span class=\"token comment\"># 数据在 60s 后过期 (setex:[set] + [ex] pire)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl key <span class=\"token comment\"># 查看数据还有多久过期</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span></pre></td></tr></table></figure><br>\n<h4 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h4>\n<ol>\n<li><strong>介绍 ：</strong> list 即是 <strong>链表</strong>。链表是一种非常常见的数据结构，特点是易于数据元素的插入和删除并且可以灵活调整链表长度，但是链表的随机访问困难。许多高级编程语言都内置了链表的实现比如 Java 中的 LinkedList，但是 C 语言并没有实现链表，所以 Redis 实现了自己的链表数据结构。Redis 的 list 的实现为一个 <strong><span class=\"orange\">双向链表</span></strong>，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。</li>\n<li><strong>常用命令:</strong> rpush,lpop,lpush,rpop,lrange,llen 等。</li>\n<li><strong>应用场景:</strong> 发布与订阅或者说消息队列、慢查询。</li>\n</ol>\n<p>下面我们简单看看它的使用！🍬</p>\n<p><strong>通过 rpush/lpop 实现队列：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList value1 <span class=\"token comment\"># 向 list 的头部（右边）添加元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList value2 value3 <span class=\"token comment\"># 向 list 的头部（最右边）添加多个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpop myList <span class=\"token comment\"># 将 list 的尾部 (最左边) 元素取出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 查看对应下标的 list 列表， 0 为 start,1 为 end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 查看列表中的所有元素，-1 表示倒数第一</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr></table></figure><p><strong>通过 rpush/rpop 实现栈：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList2 value1 value2 value3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpop myList2 <span class=\"token comment\"># 将 list 的头部 (最右边) 元素取出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"value3\"</span></pre></td></tr></table></figure><p>下边图方便大家理解：<br />\n<img data-src=\"/assets/2021-10/r1.png\" alt=\"image.png\" /></p>\n<p><strong>通过 lrange 查看对应下标范围的列表元素：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList value1 value2 value3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 查看对应下标的 list 列表， 0 为 start,1 为 end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 查看列表中的所有元素，-1 表示倒数第一</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr></table></figure><p>通过 lrange 命令，你可以基于 list 实现分页查询，性能非常高！<br />\n<strong>通过 llen 查看链表长度：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> llen myList</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><br>\n<h4 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h4>\n<ol>\n<li><strong>介绍 ：</strong> hash 类似于 JDK1.8 前的 HashMap，内部实现也差不多 (数组 + 链表)。不过，Redis 的 hash 做了更多优化。另外，hash 是一个 string 类型的 field 和 value 的映射表，<strong><span class=\"pink\">特别适合用于存储对象</span></strong>，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。</li>\n<li><strong>常用命令：</strong> hset,hmset,hexists,hget,hgetall,hkeys,hvals 等。</li>\n<li><strong>应用场景：</strong>  系统中对象数据的存储。</li>\n</ol>\n<p>下面我们简单看看它的使用！🎈</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hmset userInfoKey name <span class=\"token string\">\"guide\"</span> description <span class=\"token string\">\"dev\"</span> age <span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hexists userInfoKey name <span class=\"token comment\"># 查看 key 对应的 value 中指定的字段是否存在。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget userInfoKey name <span class=\"token comment\"># 获取存储在哈希表中指定字段的值。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"guide\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget userInfoKey age</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hgetall userInfoKey <span class=\"token comment\"># 获取在哈希表中指定 key 的所有字段和值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"guide\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"description\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"dev\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hkeys userInfoKey <span class=\"token comment\"># 获取 key 列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"description\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hvals userInfoKey <span class=\"token comment\"># 获取 value 列表</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"guide\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"dev\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hset userInfoKey name <span class=\"token string\">\"GuideGeGe\"</span> <span class=\"token comment\"># 修改某个字段对应的值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget userInfoKey name</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token string\">\"GuideGeGe\"</span></pre></td></tr></table></figure><br>\n<h4 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h4>\n<ol>\n<li><strong>介绍 ：</strong> set 类似于 Java 中的 HashSet 。Redis 中的 set 类型是一种无序集合，集合中的元素没有先后顺序。当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。</li>\n<li><strong>常用命令：</strong> sadd,spop,smembers,sismember,scard,sinterstore,sunion 等。</li>\n<li><strong>应用场景:</strong> 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景</li>\n</ol>\n<p>下面我们简单看看它的使用！🙇</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd mySet value1 value2 <span class=\"token comment\"># 添加元素进去</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd mySet value1 <span class=\"token comment\"># 不允许有重复元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> smembers mySet <span class=\"token comment\"># 查看 set 中所有的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> scard mySet <span class=\"token comment\"># 查看 set 的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sismember mySet value1 <span class=\"token comment\"># 检查某个元素是否存在 set 中，只能接收单个元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd mySet2 value2 value3</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sinterstore mySet3 mySet mySet2 <span class=\"token comment\"># 获取 mySet 和 mySet2 的交集并存放在 mySet3 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> smembers mySet3</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr></table></figure><br>\n<h4 id=\"sorted-set\"><a class=\"anchor\" href=\"#sorted-set\">#</a> Sorted set</h4>\n<ol>\n<li><strong>介绍：</strong> 和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。有点像是 Java 中 HashMap 和 TreeSet 的结合体。</li>\n<li><strong>常用命令：</strong> zadd,zcard,zscore,zrange,zrevrange,zrem 等。</li>\n<li><strong>应用场景：</strong> 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。</li>\n</ol>\n<p>常用命令展示：🍋</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myZset <span class=\"token number\">3.0</span> value1 <span class=\"token comment\"># 添加元素到 sorted set 中 3.0 为权重</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myZset <span class=\"token number\">2.0</span> value2 <span class=\"token number\">1.0</span> value3 <span class=\"token comment\"># 一次添加多个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zcard myZset <span class=\"token comment\"># 查看 sorted set 中的元素数量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zscore myZset value1 <span class=\"token comment\"># 查看某个 value 的权重</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"3\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange  myZset <span class=\"token number\">0</span> -1 <span class=\"token comment\"># 顺序输出某个范围区间的元素，0 -1 表示输出所有元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange  myZset <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 顺序输出某个范围区间的元素，0 为 start  1 为 stop</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrevrange  myZset <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 逆序输出某个范围区间的元素，0 为 start  1 为 stop</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr></table></figure><br>\n<h4 id=\"bitmap-位图\"><a class=\"anchor\" href=\"#bitmap-位图\">#</a> Bitmap 位图</h4>\n<ol>\n<li><strong>介绍：</strong>  bitmap 存储的是连续的二进制数字（0 和 1），通过 bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 bitmap 本身会极大的节省储存空间。</li>\n<li><strong>常用命令：</strong>  setbit 、getbit 、bitcount、bitop</li>\n<li><strong>应用场景：</strong>  适合需要保存状态信息（比如是否签到、是否登录...）并需要进一步对这些信息进行分析的场景。比如用户签到情况、活跃用户情况、用户行为统计（比如是否点赞过某个视频）。</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># SETBIT 会返回之前位的值（默认是 0）这里会生成 7 个位</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit mykey <span class=\"token number\">7</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit mykey <span class=\"token number\">7</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getbit mykey <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit mykey <span class=\"token number\">6</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit mykey <span class=\"token number\">8</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 通过 bitcount 统计被被设置为 1 的位的数量。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> bitcount mykey</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>针对上面提到的一些场景，这里进行进一步说明。</p>\n<p><strong>使用场景一📍：用户行为分析</strong> 很多网站为了分析你的喜好，需要研究你点赞过的内容。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 记录你喜欢过 001 号小姐姐</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit beauty_girl_001 uid <span class=\"token number\">1</span></pre></td></tr></table></figure><p><strong>使用场景二📍：统计活跃用户</strong></p>\n<p>使用时间作为 key，然后用户 ID 为 offset，如果当日活跃过就设置为 1</p>\n<p>那么我该如何计算某几天 / 月 / 年的活跃用户呢 (暂且约定，统计时间内只要有一天在线就称为活跃)，有请下一个 redis 的命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># BITOP 命令支持 AND 、 OR 、 NOT 、 XOR 这四种操作中的任意一种参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BITOP operation destkey key <span class=\"token punctuation\">[</span>key <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>初始化数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit <span class=\"token number\">20210308</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit <span class=\"token number\">20210308</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setbit <span class=\"token number\">20210309</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>统计 20210308~20210309 总活跃用户数: 1</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> bitop and desk1 <span class=\"token number\">20210308</span> <span class=\"token number\">20210309</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> bitcount desk1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>统计 20210308~20210309 在线活跃用户数: 2</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> bitop or desk2 <span class=\"token number\">20210308</span> <span class=\"token number\">20210309</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> bitcount desk2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p><strong>使用场景三📍：用户在线状态</strong></p>\n<p>对于获取或者统计用户在线状态，使用 bitmap 是一个节约空间且效率又高的一种方法。</p>\n<p>只需要一个 key，然后用户 ID 为 offset，如果在线就设置为 1，不在线就设置为 0。</p>\n<br>\n<h4 id=\"hyperloglog-基数统计\"><a class=\"anchor\" href=\"#hyperloglog-基数统计\">#</a> HyperLogLog 基数统计</h4>\n<p><strong>Redis 的基数统计</strong>，这个结构可以非常省内存的去统计各种计数，比如注册 IP 数、每日访问 IP 数、页面实时 UV）、在线用户数等。但是它也有局限性，就是只能统计数量，而没办法去知道具体的内容是什么。</p>\n<blockquote>\n<p>当然用集合也可以解决这个问题。但是一个大型的网站，每天 IP 比如有 100 万，粗算一个 IP 消耗 15 字节，那么 100 万个 IP 就是 15M。而 HyperLogLog 在 Redis 中每个键占用的内容都是 12K，理论存储近似接近 2^64 个值，不管存储的内容是什么，它一个基于基数估算的算法，只能比较准确的估算出基数，可以使用少量固定的内存去存储并识别集合中的唯一元素。而且这个估算的基数并不一定准确，是一个带有 0.81% 标准错误的近似值。</p>\n</blockquote>\n<p><strong>应用场景:✨</strong><br />\nHyperLogLog 主要的应用场景就是进行基数统计。这个问题的应用场景其实是十分广泛的。例如：对于 Google 主页面而言，同一个账户可能会访问 Google 主页面多次。于是，在诸多的访问流水中，如何计算出 Google 主页面每天被多少个不同的账户访问过就是一个重要的问题。那么对于 Google 这种访问量巨大的网页而言，其实统计出有十亿 的访问量或者十亿零十万的访问量其实是没有太多的区别的，因此，在这种业务场景下，为了节省成本，其实可以只计算出一个大概的值，而没有必要计算出精准的值。</p>\n<p>这个数据结构的命令有三个：PFADD、PFCOUNT、PFMERGE</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis<span class=\"token operator\">></span> PFADD databases <span class=\"token string\">\"Redis\"</span> <span class=\"token string\">\"MongoDB\"</span> <span class=\"token string\">\"MySQL\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>redis<span class=\"token operator\">></span> PFADD databases <span class=\"token string\">\"Redis\"</span>  <span class=\"token comment\"># Redis 已经存在，不必对估计数量进行更新</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>redis<span class=\"token operator\">></span> PFCOUNT databases</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><br>\n<h4 id=\"geo-地理位置\"><a class=\"anchor\" href=\"#geo-地理位置\">#</a> Geo 地理位置</h4>\n<p>Redis 的 GEO 特性在 Redis 3.2 版本中推出， 这个功能可以将用户给定的地理位置信息储存起来， 并对这些信息进行操作。GEO 的数据结构总共有六个命令：geoadd、geopos、geodist、georadius、georadiusbymember、gethash,<strong>GEO 使用的是国际通用坐标系 WGS-84。</strong></p>\n<p>常用指令：</p>\n<blockquote>\n<ol>\n<li>GEOADD: 添加地理位置</li>\n<li>GEOPOS：查询地理位置（经纬度），返回数组</li>\n<li>GEODIST：计算两位位置间的距离</li>\n<li>GEORADIUS：以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</li>\n<li>GEORADIUSBYMEMBER：以给定的地理位置为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd kcityGeo <span class=\"token number\">116.405285</span> <span class=\"token number\">39.904989</span> <span class=\"token string\">\"beijing\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd kcityGeo <span class=\"token number\">121.472644</span> <span class=\"token number\">31.231706</span> <span class=\"token string\">\"shanghai\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geodist kcityGeo beijing shanghai km</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"1067.5980\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geopos kcityGeo beijing</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"116.40528291463851929\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"39.9049884229125027\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geohash kcityGeo beijing</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"wx4g0b7xrt0\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> georadiusbymember kcityGeo beijing <span class=\"token number\">1200</span> km withdist withcoord asc count <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"beijing\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"0.0000\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"116.40528291463851929\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"39.9049884229125027\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shanghai\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1067.5980\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"121.47264629602432251\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"31.23170490709807012\"</span></pre></td></tr></table></figure><br>\n<h4 id=\"streams-流\"><a class=\"anchor\" href=\"#streams-流\">#</a> Streams 流</h4>\n<p><strong>支持多播的可持久化的消息队列，用于实现发布订阅功能</strong>，借鉴了 kafka 的设计。Redis Stream 的结构有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的 ID 和对应的内容。消息是持久化的，Redis 重启后，内容还在。🚀🚀🚀</p>\n<p><img data-src=\"/assets/2021-10/r2.png\" alt=\"image.png\" /></p>\n<p>每个 Stream 都有唯一的名称，它就是 Redis 的 key，在我们首次使用 xadd 指令追加消息时自动创建。</p>\n<blockquote>\n<p>每个<strong> Stream</strong> 都可以挂多个消费组，每个消费组会有个游标 last_delivered_id 在 Stream 数组之上往前移动，表示当前消费组已经消费到哪条消息了。每个消费组都有一个 Stream 内唯一的名称，消费组不会自动创建，它需要单独的指令 xgroup create 进行创建，需要指定从 Stream 的某个消息 ID 开始消费，这个 ID 用来初始化 last_delivered_id 变量。</p>\n<p>每个<strong>消费组</strong> (Consumer Group) 的状态都是独立的，相互不受影响。也就是说同一份 Stream 内部的消息会被每个消费组都消费到。</p>\n<p>同一个消费组 (Consumer Group) 可以挂接多个消费者 (Consumer)，这些消费者之间是竞争关系，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。每个消费者者有一个组内唯一名称。</p>\n<p><strong>消费者</strong> (Consumer) 内部会有个状态变量 pending_ids，它记录了当前已经被客户端读取的消息，但是还没有 ack。如果客户端没有 ack，这个变量里面的消息 ID 会越来越多，一旦某个消息被 ack，它就开始减少。这个 pending_ids 变量在 Redis 官方被称之为 PEL，也就是 Pending Entries List，这是一个很核心的数据结构，它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理。</p>\n<p><strong>消息 ID：</strong> 消息 ID 的形式是 timestampInMillis-sequence，例如 1527846880572-5，它表示当前的消息在毫米时间戳 1527846880572 时产生，并且是该毫秒内产生的第 5 条消息。消息 ID 可以由服务器自动生成，也可以由客户端自己指定，但是形式必须是整数 - 整数，而且必须是后面加入的消息的 ID 要大于前面的消息 ID。</p>\n<p><strong>消息内容：</strong> 消息内容就是键值对，形如 hash 结构的键值对，这没什么特别之处。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD mystream * field1 value1 field2 value2 field3 value3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\"1588491680862-0\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD mystream * username lisi age <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"1588491854070-0\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> xlen mystream</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> XADD mystream * username lisi age <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"1588491861215-0\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> xrange mystream - + </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1588491680862-0\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field1\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field2\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field3\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1588491854070-0\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"username\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lisi\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"18\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1588491861215-0\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"username\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lisi\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"18\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> xdel mystream <span class=\"token number\">1588491854070</span>-0 </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> xrange mystream - + </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1588491680862-0\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field1\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field2\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field3\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1588491861215-0\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"username\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lisi\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"18\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> xlen mystream</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><br>\n",
            "tags": [
                "Java",
                "学习笔记",
                "面试",
                "Redis"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/10/a3c0f04e5e30/",
            "url": "https://shaogezhu.cn/2021/10/a3c0f04e5e30/",
            "title": "手写分布式雪花(Snowflake)算法生成ID",
            "date_published": "2021-10-02T12:45:48.000Z",
            "content_html": "<div class=\"note info\">\n<p>我们现在大多 MySQL 数据库，生成 ID 的算法就是用的<span class=\"pink\"> SnowFlake</span>，下面我们了解一下这个算法的生成原理，以及是如何工作的👀</p>\n</div>\n<h2 id=\"snowflake算法\"><a class=\"anchor\" href=\"#snowflake算法\">#</a> SnowFlake 算法</h2>\n<blockquote>\n<p>SnowFlake 是 twitter 公司内部分布式项目采用的 ID 生成算法，开源后广受国内大厂的好评。由这种算法生成的 ID，我们就叫做 SnowFlakeID。</p>\n</blockquote>\n<p>SnowFlake 算法生成 id 的结果是一个 64bit 大小的整数，它的结构如下图：<br />\n<img data-src=\"/assets/2021-10/sn1.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p>分为四段：</p>\n<p><strong>第一段：</strong> 1 位为未使用，永远固定为 0。<br />\n（因为二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 id 一般都是用正整数，所以最高位固定为 0 ）</p>\n<p><strong>第二段：</strong> 41 位为毫秒级时间 (41 位的长度可以使用 69 年)</p>\n<p><strong>第三段：</strong> 10 位为 workerId (10 位的长度最多支持部署 1024 个节点）<br />\n(这里的 10 位又分为两部分，第一部分 5 位表示数据中心 ID（0-31）第二部分 5 位表示机器 ID（0-31）)</p>\n<p><strong>第四段：</strong> 12 位为毫秒内的计数（12 位的计数顺序号支持每个节点每毫秒产生 4096 个 ID 序号）</p>\n</blockquote>\n<p><strong>代码实现：😎</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SnowFlake</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 时间 41 位</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> lastTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 数据中心 ID 5 位 (默认 0-31)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> datacenterId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> datacenterIdShift <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 机房机器 ID 5 位 (默认 0-31)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> workerId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> workerIdShift <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 随机数 12 位 (默认 0~4095)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicLong</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> randomShift <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 随机数的最大值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> maxRandom <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> randomShift<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> workerIdShift<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> datacenterIdShift<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerIdShift <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                datacenterIdShift <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                workerIdShift <span class=\"token operator\">+</span> datacenterIdShift <span class=\"token operator\">></span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数不匹配\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workerIdShift <span class=\"token operator\">=</span> workerIdShift<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>datacenterIdShift <span class=\"token operator\">=</span> datacenterIdShift<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>randomShift <span class=\"token operator\">=</span> <span class=\"token number\">22</span> <span class=\"token operator\">-</span> datacenterIdShift <span class=\"token operator\">-</span> workerIdShift<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxRandom <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> randomShift<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 获取雪花的 ID</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> lastTime <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>workerIdShift <span class=\"token operator\">+</span> datacenterIdShift <span class=\"token operator\">+</span> randomShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                workerId <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>datacenterIdShift <span class=\"token operator\">+</span> randomShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                datacenterId <span class=\"token operator\">&lt;&lt;</span> randomShift <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                random<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 生成一个新的 ID</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">long</span> <span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 如果当前时间和上一次时间不在同一毫秒内，直接返回</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">></span> lastTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            lastTime <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            random<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 将最后的随机数，进行 + 1 操作</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> maxRandom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 自选等待下一毫秒</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&lt;=</span> lastTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            now <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        lastTime <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        random<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">SnowFlake</span> snowFlake <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SnowFlake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>snowFlake<span class=\"token punctuation\">.</span><span class=\"token function\">nextId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码中获取 id 的方法利用<strong>位运算</strong>实现</p>\n<p><img data-src=\"/assets/2021-10/sn2.png\" alt=\"16312623841.png\" /></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1  |                    41                        |  5  |   5  |     12      </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   0|0001100 10100010 10111110 10001001 01011100 00|00000|0 0000|0000 00000000 //41位的时间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   0|000000‭0 00000000 00000000 00000000 00000000 00|10001|0 0000|0000 00000000 //5位的数据中心ID</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   0|0000000 00000000 00000000 00000000 00000000 00|00000|1 1001|0000 00000000 //5为的机器ID</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>or 0|0000000 00000000 00000000 00000000 00000000 00|00000|0 0000|‭0000 00000000‬ //12位的sequence</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>------------------------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   0|0001100 10100010 10111110 10001001 01011100 00|10001|1 1001|‭0000 00000000‬ //结果：910499571847892992</pre></td></tr></table></figure><h3 id=\"snowflake优点\"><a class=\"anchor\" href=\"#snowflake优点\">#</a> SnowFlake 优点：</h3>\n<ol>\n<li>所有生成的 id 按时间趋势递增</li>\n<li>整个分布式系统内不会产生重复 id（因为有 datacenterId 和 workerId 来做区分）</li>\n</ol>\n<h3 id=\"snowflake不足\"><a class=\"anchor\" href=\"#snowflake不足\">#</a> SnowFlake 不足：</h3>\n<p>由于 SnowFlake 强依赖时间戳，所以时间的变动会造成 SnowFlake 的算法产生错误。</p>\n<br>\n",
            "tags": [
                "Java",
                "技术实践",
                "面试",
                "java",
                "算法"
            ]
        },
        {
            "id": "https://shaogezhu.cn/2021/9/fc647db813d3/",
            "url": "https://shaogezhu.cn/2021/9/fc647db813d3/",
            "title": "常见的限流算法分析以及手写实现（计数器、漏斗、令牌桶）",
            "date_published": "2021-09-23T14:46:48.000Z",
            "content_html": "<h2 id=\"常见的限流算法分析\"><a class=\"anchor\" href=\"#常见的限流算法分析\">#</a> 常见的限流算法分析</h2>\n<div class=\"note primary\">\n<p>限流在我们日常生活中经常见到，如<strong>火车站门口的栏杆</strong>、<strong>一些景点的门票只出售一定的数量</strong> 等等。在我们的开发中也用到了这种思想。</p>\n</div>\n<h3 id=\"为什么要限流\"><a class=\"anchor\" href=\"#为什么要限流\">#</a> 为什么要限流</h3>\n<p>🏫在保证可用的情况下尽可能多增加进入的人数，其余的人在排队等待，或者返回友好提示，保证里面的进行系统的用户可以正常使用， <strong><font color=\"blue\">防止系统雪崩</font></strong>。</p>\n<h3 id=\"限流算法\"><a class=\"anchor\" href=\"#限流算法\">#</a> 限流算法</h3>\n<p>🌴🌴限流算法很多，常见的有三类，分别是 <strong><font color=\"purple\">计数器算法</font> <strong>、</strong><font color=\"orange\">漏桶算法</font></strong>、<strong><font color=\"green\">令牌桶算法</font></strong> 。</p>\n<blockquote>\n<p>（1）<strong>计数器：</strong></p>\n<p>          在一段时间间隔内，处理请求的最大数量固定，超过部分不做处理。</p>\n<p>（2）<strong>漏桶：</strong></p>\n<p>          漏桶大小固定，处理速度固定，但请求进入速度不固定（在突发情况请求过多时，会丢弃过多的请求）。</p>\n<p>（3）<strong>令牌桶：</strong></p>\n<p>          令牌桶的大小固定，令牌的产生速度固定，但是消耗令牌（即请求）速度不固定（可以应对一些某些时间请求过多的情况）；每个请求都会从令牌桶中取出令牌，如果没有令牌则丢弃该次请求。</p>\n</blockquote>\n<h3 id=\"计数器限流\"><a class=\"anchor\" href=\"#计数器限流\">#</a> 计数器限流</h3>\n<p>🍺<strong>在一段时间间隔内，处理请求的最大数量固定，超过部分不做处理。</strong></p>\n<p>举个🌰, 比如我们规定对于 A 接口，我们 1 分钟的访问次数不能超过 100 次。</p>\n<p>那么我们可以这么做：</p>\n<p>🎈在一开 始的时候，我们可以设置一个计数器 counter，每当一个请求过来的时候，counter 就加 1，如果 counter 的值大于 100 并且该请求与第一个请求的间隔时间还在 1 分钟之内，那么说明请求数过多，拒绝访问；</p>\n<p>🍬如果该请求与第一个请求的间隔时间大于 1 分钟，且 counter 的值还在限流范围内，那么就重置 counter, 就是这么简单粗暴。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/333bdec3d3524f4c95172376841dd180.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sw5Z-C44CB,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-pkGvVRdd-1647523333397)(/upload/2021/09/image-0cbbc44ec76d446896e989962e8122e5.png)]\" /></p>\n<p><strong>代码实现：</strong> 😎</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 计数器 限流</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterLimiter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 起始时间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 时间间隔 1000ms</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> interval <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 每个时间间隔内，限制数量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 累加器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicLong</span> accumulator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * true 代表放行，请求可已通过</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * false 代表限制，不让请求通过</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">long</span> nowTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 判断是否在上一个时间间隔内</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">&lt;</span> startTime <span class=\"token operator\">+</span> interval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 如果还在上个时间间隔内</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> accumulator<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 如果不在上一个时间间隔内</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CounterLimiter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token comment\">// 防止重复初始化</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">></span> startTime <span class=\"token operator\">+</span> interval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    startTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    accumulator<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 再次进行判断</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> accumulator<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 线程池，用于多线程模拟测试</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 被限制的次数</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">AtomicInteger</span> limited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 线程数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threads <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 每条线程的执行轮数</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> turns <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 同步器</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">CountDownLatch</span> countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>threads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> threads<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> turns<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                            <span class=\"token comment\">// 被限制的次数累积</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                            limited<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token comment\">// 等待所有线程结束</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">float</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">// 输出统计结果</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"限制的次数为：\"</span> <span class=\"token operator\">+</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token string\">\",通过的次数为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>threads <span class=\"token operator\">*</span> turns <span class=\"token operator\">-</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"限制的比例为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>threads <span class=\"token operator\">*</span> turns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行的时长为：\"</span> <span class=\"token operator\">+</span> time <span class=\"token operator\">+</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>计数器限流的不足：</strong> 🌴</p>\n<p>这个算法虽然简单，但是存在<strong>临界问题</strong>，我们看下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/e5b54ef9aa614eab9ada0ab8850d9b1b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sw5Z-C44CB,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xUvgpono-1647523333398)(/upload/2021/09/image-d55d813bbcb544479109dd2248e90ff0.png)]\" /></p>\n<p>👉🏻从上图中我们可以看到，假设有一个恶意用户，他在 0:59 时，瞬间发送了 100 个请求，并且 1:00 又瞬间发送了 100 个请求，那么其实这个用户在 1 秒里面，瞬间发送了 200 个请求。</p>\n<p>🍦我们刚才规定的是 1 分钟最多 100 个请求（规划的吞吐量），也就是每秒钟最多 1.7 个请求，用户通过在时间窗口的重置节点处突发请求， 可以瞬间超过我们的速率限制。</p>\n<p>用户有可能通过算法的这个漏洞，瞬间压垮我们的应用。🙇🏻‍♀️</p>\n<p><span><span style=\"font-family:Verdana, Arial, Helvetica, sans-serif;line-height:19px;text-indent:26px;\"><span style=\"font-size:14px;\"><span style=\"font-family:Arial;line-height:26px;\"><br></span></span></span></span></p>\n<p><span><span style=\"font-family:Verdana, Arial, Helvetica, sans-serif;line-height:19px;text-indent:26px;\"><span style=\"font-size:14px;\"><span style=\"font-family:Arial;line-height:26px;\"><br></span></span></span></span></p>\n<h3 id=\"漏桶限流\"><a class=\"anchor\" href=\"#漏桶限流\">#</a> 漏桶限流</h3>\n<p>✨漏桶算法限流的基本原理为：<strong>水（对应请求）从进水口进入到漏桶里，漏桶以一定的速度出水（请求放行），当水流入速度过大，桶内的总水量大于桶容量会直接溢出，请求被拒绝。</strong><br />\n大致的漏桶限流规则如下：📍<br />\n（1）进水口（对应客户端请求）以任意速率流入进入漏桶。<br />\n（2）漏桶的容量是固定的，出水（放行）速率也是固定的。<br />\n（3）漏桶容量是不变的，如果处理速度太慢，桶内水量会超出了桶的容量，则后面流入的水滴会溢出，表示请求拒绝。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/27e69fa5f58e45128755cbabf27cc2ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sw5Z-C44CB,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ohzhfhmz-1647523333399)(/upload/2021/09/image-afa56bce847f4d8b99e2dfd1eb3509aa.png)]\" /></p>\n<p>⭐漏桶算法其实很简单，可以粗略的认为就是注水漏水过程，往桶中以任意速率流入水，以一定速率流出水，当水超过桶容量（capacity）则丢弃，因为桶容量是不变的，保证了整体的速率。</p>\n<p>以一定速率流出水，<br />\n<img data-src=\"https://img-blog.csdnimg.cn/ef3bb3929e4a4e44b34dce33187e672a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sw5Z-C44CB,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hFtmsnIH-1647523333399)(/upload/2021/09/image-c7d684d693f74fa5bf4077febb8fccbc.png)]\" /></p>\n<p><strong>削峰📍：</strong> 有大量流量进入时，会发生溢出，从而限流保护服务可用</p>\n<p><strong>缓冲📍：</strong> 不至于直接请求到服务器，缓冲压力</p>\n<p><strong>代码实现：</strong> 😎</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 漏斗限流</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeakBucketLimiter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 桶的大小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 流出速率，每秒两个</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 开始时间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 桶中剩余的水</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicLong</span> water <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * true 代表放行，请求可已通过</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * false 代表限制，不让请求通过</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 如果桶的余量问 0，直接放行</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>water<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            water<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 计算从当前时间到开始时间流出的水，和现在桶中剩余的水</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 桶中剩余的水</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        water<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>water<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 防止出现 & lt;0 的情况</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        water<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> water<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 设置新的开始时间</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        startTime <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 如果当前水小于容量，表示可以放行</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>water<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            water<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 线程池，用于多线程模拟测试</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 被限制的次数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">AtomicInteger</span> limited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 线程数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threads <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 每条线程的执行轮数</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> turns <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 同步器</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">CountDownLatch</span> countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>threads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> threads<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> turns<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                            <span class=\"token comment\">// 被限制的次数累积</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                            limited<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token comment\">// 等待所有线程结束</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">float</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// 输出统计结果</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"限制的次数为：\"</span> <span class=\"token operator\">+</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token string\">\",通过的次数为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>threads <span class=\"token operator\">*</span> turns <span class=\"token operator\">-</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"限制的比例为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>threads <span class=\"token operator\">*</span> turns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行的时长为：\"</span> <span class=\"token operator\">+</span> time <span class=\"token operator\">+</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>漏桶的不足：</strong> 🤷‍♀️<br />\n漏桶的出水速度固定，也就是请求放行速度是固定的。<br />\n漏桶出口的速度固定，不能灵活的应对后端能力提升。比如，通过动态扩容，后端流量从 1000QPS 提升到 1WQPS，漏桶没有办法。</p>\n<p><span><span style=\"font-family:Verdana, Arial, Helvetica, sans-serif;line-height:19px;text-indent:26px;\"><span style=\"font-size:14px;\"><span style=\"font-family:Arial;line-height:26px;\"><br></span></span></span></span></p>\n<p><span><span style=\"font-family:Verdana, Arial, Helvetica, sans-serif;line-height:19px;text-indent:26px;\"><span style=\"font-size:14px;\"><span style=\"font-family:Arial;line-height:26px;\"><br></span></span></span></span></p>\n<h3 id=\"令牌桶限流\"><a class=\"anchor\" href=\"#令牌桶限流\">#</a> 令牌桶限流</h3>\n<p><strong>🍬令牌桶算法中新请求到来时会从桶里拿走一个令牌，如果桶内没有令牌可拿，就拒绝服务。</strong>  当然，令牌的数量也是有上限的。令牌的数量与时间和发放速率强相关，时间流逝的时间越长，会不断往桶里加入越多的令牌，如果令牌发放的速度比申请速度快，令牌桶会放满令牌，直到令牌占满整个令牌桶。</p>\n<p>令牌桶限流大致的规则如下：🙇🏻‍<br />\n（1）进水口按照某个速度，向桶中放入令牌。<br />\n（2）令牌的容量是固定的，但是放行的速度不是固定的，只要桶中还有剩余令牌，一旦请求过来就能申请成功，然后放行。<br />\n（3）如果令牌的发放速度，慢于请求到来速度，桶内就无牌可领，请求就会被拒绝。</p>\n<p>总之，令牌的发送速率可以设置，从而可以对突发的出口流量进行有效的应对。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/04bc89a81781443aa1e0bfb07260ab58.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55Sw5Z-C44CB,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OlS9VCnB-1647523333401)(/upload/2021/09/image-f5b402eae3b2409c8939b34d8be41f9c.png)]\" /></p>\n<p><strong>代码实现：</strong> 😎</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 令牌桶</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenBucketLimiter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 桶的容量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 放入令牌的速率，每秒 2 个</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 上次放置令牌的时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> lastTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 桶中令牌的余量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicLong</span> tokenNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * true 代表放行，请求可已通过</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * false 代表限制，不让请求通过</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 更新桶中剩余令牌的数量</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        tokenNum<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> lastTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        tokenNum<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> tokenNum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 更新时间</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        lastTime <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> lastTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 桶中还有令牌就放行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenNum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            tokenNum<span class=\"token punctuation\">.</span><span class=\"token function\">decrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 线程池，用于多线程模拟测试</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> pool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 被限制的次数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">AtomicInteger</span> limited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 线程数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threads <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 每条线程的执行轮数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> turns <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 同步器</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">CountDownLatch</span> countDownLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>threads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> threads<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> turns<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                            <span class=\"token comment\">// 被限制的次数累积</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                            limited<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token comment\">// 等待所有线程结束</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            countDownLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">float</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 输出统计结果</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"限制的次数为：\"</span> <span class=\"token operator\">+</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token string\">\",通过的次数为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>threads <span class=\"token operator\">*</span> turns <span class=\"token operator\">-</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"限制的比例为：\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> limited<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>threads <span class=\"token operator\">*</span> turns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行的时长为：\"</span> <span class=\"token operator\">+</span> time <span class=\"token operator\">+</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>令牌桶的好处：</strong> 🚀🚀🚀<br />\n令牌桶的好处之一就是可以方便地应对 突发出口流量（后端能力的提升）。</p>\n<p>比如，可以改变令牌的发放速度，算法能按照新的发送速率调大令牌的发放数量，使得出口突发流量能被处理。</p>\n",
            "tags": [
                "Java",
                "技术实践",
                "java",
                "限流算法"
            ]
        }
    ]
}